
Smart_Irrigation_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009934  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08009b08  08009b08  00019b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e48  08009e48  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08009e48  08009e48  00019e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e50  08009e50  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e50  08009e50  00019e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002454  20000204  0800a05c  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002658  0800a05c  00022658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e08  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000329f  00000000  00000000  0003603c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  000392e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f30  00000000  00000000  0003a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002556b  00000000  00000000  0003b2f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b55  00000000  00000000  00060863  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dba92  00000000  00000000  000713b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014ce4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f4  00000000  00000000  0014cec8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009aec 	.word	0x08009aec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	08009aec 	.word	0x08009aec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f3c:	4a28      	ldr	r2, [pc, #160]	; (8000fe0 <MX_ADC1_Init+0xb8>)
 8000f3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f42:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f4e:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <MX_ADC1_Init+0xbc>)
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f76:	2202      	movs	r2, #2
 8000f78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f82:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f88:	4814      	ldr	r0, [pc, #80]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000f8a:	f001 f96f 	bl	800226c <HAL_ADC_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f94:	f000 fcc6 	bl	8001924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000faa:	f001 fc31 	bl	8002810 <HAL_ADC_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fb4:	f000 fcb6 	bl	8001924 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_ADC1_Init+0xb4>)
 8000fc6:	f001 fc23 	bl	8002810 <HAL_ADC_ConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fd0:	f000 fca8 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000238 	.word	0x20000238
 8000fe0:	40012000 	.word	0x40012000
 8000fe4:	0f000001 	.word	0x0f000001

08000fe8 <UART1_IRQHandler>:
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(USART1_IRQn);

}
void UART1_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	memset(R_msg, 0, sizeof(R_msg));
 8000fec:	2220      	movs	r2, #32
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <UART1_IRQHandler+0x20>)
 8000ff2:	f005 fa9b 	bl	800652c <memset>
	HAL_UART_Receive(&huart1, (uint8_t*)&R_msg[0],1,20);
 8000ff6:	2314      	movs	r3, #20
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4903      	ldr	r1, [pc, #12]	; (8001008 <UART1_IRQHandler+0x20>)
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <UART1_IRQHandler+0x24>)
 8000ffe:	f004 faf9 	bl	80055f4 <HAL_UART_Receive>
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200002c0 	.word	0x200002c0
 800100c:	20000280 	.word	0x20000280

08001010 <MX_DMA_Init>:
 *
  * Enable DMA controller clock
  */

void MX_DMA_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_DMA_Init+0x3c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a0b      	ldr	r2, [pc, #44]	; (800104c <MX_DMA_Init+0x3c>)
 8001020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_DMA_Init+0x3c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2038      	movs	r0, #56	; 0x38
 8001038:	f001 ff75 	bl	8002f26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800103c:	2038      	movs	r0, #56	; 0x38
 800103e:	f001 ff8e 	bl	8002f5e <HAL_NVIC_EnableIRQ>

}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800

08001050 <Set_Pin_Output>:
//64-bit adresses of the temperature sensors
uint8_t DS18B20_ROM_ADDR[2][8] = { {0x28,0x0,0x2c,0xf3,0x8,0x0,0x0,0x1b},
								  {0x28,0x26,0xbd,0xb,0x3a,0x19,0x1,0x99} };
// Setting selected pin as output
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
   GPIO_InitStruct.Pin = GPIO_Pin;
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f002 fb18 	bl	80036b4 <HAL_GPIO_Init>
}
 8001084:	bf00      	nop
 8001086:	3720      	adds	r7, #32
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <Set_Pin_Input>:
// Setting selected pin as input
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
	   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
	   GPIO_InitStruct.Pin = GPIO_Pin;
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	60fb      	str	r3, [r7, #12]
	   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ac:	2300      	movs	r3, #0
 80010ae:	613b      	str	r3, [r7, #16]
	   GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	617b      	str	r3, [r7, #20]
	   HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f002 fafa 	bl	80036b4 <HAL_GPIO_Init>
}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <Start_DS18B20>:
// Starting communication with sensor according to manual
uint8_t Start_DS18B20 (void)
{
 80010c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(PORT_DS18B20, PIN_DS18B20);
 80010d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d6:	4827      	ldr	r0, [pc, #156]	; (8001174 <Start_DS18B20+0xac>)
 80010d8:	f7ff ffba 	bl	8001050 <Set_Pin_Output>
	HAL_GPIO_WritePin (PORT_DS18B20, PIN_DS18B20, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	4824      	ldr	r0, [pc, #144]	; (8001174 <Start_DS18B20+0xac>)
 80010e4:	f002 fc90 	bl	8003a08 <HAL_GPIO_WritePin>
	delay (480);
 80010e8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80010ec:	f000 fecc 	bl	8001e88 <delay>
	Set_Pin_Input(PORT_DS18B20, PIN_DS18B20);
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	481f      	ldr	r0, [pc, #124]	; (8001174 <Start_DS18B20+0xac>)
 80010f6:	f7ff ffc9 	bl	800108c <Set_Pin_Input>
	delay (80);
 80010fa:	2050      	movs	r0, #80	; 0x50
 80010fc:	f000 fec4 	bl	8001e88 <delay>
	if (!(HAL_GPIO_ReadPin (PORT_DS18B20, PIN_DS18B20))) Response = 1;
 8001100:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001104:	481b      	ldr	r0, [pc, #108]	; (8001174 <Start_DS18B20+0xac>)
 8001106:	f002 fc67 	bl	80039d8 <HAL_GPIO_ReadPin>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d102      	bne.n	8001116 <Start_DS18B20+0x4e>
 8001110:	2301      	movs	r3, #1
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	e001      	b.n	800111a <Start_DS18B20+0x52>
	else Response = -1;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	71fb      	strb	r3, [r7, #7]
	delay (400);
 800111a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800111e:	f000 feb3 	bl	8001e88 <delay>
	if(Response != 1)
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d020      	beq.n	800116a <Start_DS18B20+0xa2>
	{
		strcat((char*)msg, "ERROR: TEMPERATURE SENSORS NOT DETECTED \r\n");
 8001128:	4813      	ldr	r0, [pc, #76]	; (8001178 <Start_DS18B20+0xb0>)
 800112a:	f7ff f871 	bl	8000210 <strlen>
 800112e:	4603      	mov	r3, r0
 8001130:	461a      	mov	r2, r3
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <Start_DS18B20+0xb0>)
 8001134:	4413      	add	r3, r2
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <Start_DS18B20+0xb4>)
 8001138:	4614      	mov	r4, r2
 800113a:	469c      	mov	ip, r3
 800113c:	f104 0e20 	add.w	lr, r4, #32
 8001140:	4665      	mov	r5, ip
 8001142:	4626      	mov	r6, r4
 8001144:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001146:	6028      	str	r0, [r5, #0]
 8001148:	6069      	str	r1, [r5, #4]
 800114a:	60aa      	str	r2, [r5, #8]
 800114c:	60eb      	str	r3, [r5, #12]
 800114e:	3410      	adds	r4, #16
 8001150:	f10c 0c10 	add.w	ip, ip, #16
 8001154:	4574      	cmp	r4, lr
 8001156:	d1f3      	bne.n	8001140 <Start_DS18B20+0x78>
 8001158:	4662      	mov	r2, ip
 800115a:	4623      	mov	r3, r4
 800115c:	cb03      	ldmia	r3!, {r0, r1}
 800115e:	6010      	str	r0, [r2, #0]
 8001160:	6051      	str	r1, [r2, #4]
 8001162:	8819      	ldrh	r1, [r3, #0]
 8001164:	789b      	ldrb	r3, [r3, #2]
 8001166:	8111      	strh	r1, [r2, #8]
 8001168:	7293      	strb	r3, [r2, #10]
	}
	return Response;
 800116a:	79fb      	ldrb	r3, [r7, #7]
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001174:	40020000 	.word	0x40020000
 8001178:	20000308 	.word	0x20000308
 800117c:	08009b08 	.word	0x08009b08

08001180 <Write_Byte_DS18B20>:
// Writing data to sensor according to manual
void Write_Byte_DS18B20 (uint8_t data){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<8; i++)
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	e034      	b.n	80011fa <Write_Byte_DS18B20+0x7a>
	{
		if((data & (1<<i))!=0)
 8001190:	79fa      	ldrb	r2, [r7, #7]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	fa42 f303 	asr.w	r3, r2, r3
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b00      	cmp	r3, #0
 800119e:	d016      	beq.n	80011ce <Write_Byte_DS18B20+0x4e>
		{
			Set_Pin_Output(PORT_DS18B20, PIN_DS18B20);
 80011a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a4:	4818      	ldr	r0, [pc, #96]	; (8001208 <Write_Byte_DS18B20+0x88>)
 80011a6:	f7ff ff53 	bl	8001050 <Set_Pin_Output>
			HAL_GPIO_WritePin(PORT_DS18B20, PIN_DS18B20, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b0:	4815      	ldr	r0, [pc, #84]	; (8001208 <Write_Byte_DS18B20+0x88>)
 80011b2:	f002 fc29 	bl	8003a08 <HAL_GPIO_WritePin>
			delay(1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f000 fe66 	bl	8001e88 <delay>
			Set_Pin_Input(PORT_DS18B20, PIN_DS18B20);
 80011bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c0:	4811      	ldr	r0, [pc, #68]	; (8001208 <Write_Byte_DS18B20+0x88>)
 80011c2:	f7ff ff63 	bl	800108c <Set_Pin_Input>
			delay(60);
 80011c6:	203c      	movs	r0, #60	; 0x3c
 80011c8:	f000 fe5e 	bl	8001e88 <delay>
 80011cc:	e012      	b.n	80011f4 <Write_Byte_DS18B20+0x74>
		}
		else
		{
			Set_Pin_Output(PORT_DS18B20, PIN_DS18B20);
 80011ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d2:	480d      	ldr	r0, [pc, #52]	; (8001208 <Write_Byte_DS18B20+0x88>)
 80011d4:	f7ff ff3c 	bl	8001050 <Set_Pin_Output>
			HAL_GPIO_WritePin(PORT_DS18B20, PIN_DS18B20, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011de:	480a      	ldr	r0, [pc, #40]	; (8001208 <Write_Byte_DS18B20+0x88>)
 80011e0:	f002 fc12 	bl	8003a08 <HAL_GPIO_WritePin>
			delay(60);
 80011e4:	203c      	movs	r0, #60	; 0x3c
 80011e6:	f000 fe4f 	bl	8001e88 <delay>
			Set_Pin_Input(PORT_DS18B20, PIN_DS18B20);
 80011ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <Write_Byte_DS18B20+0x88>)
 80011f0:	f7ff ff4c 	bl	800108c <Set_Pin_Input>
	for(int i=0; i<8; i++)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3301      	adds	r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	ddc7      	ble.n	8001190 <Write_Byte_DS18B20+0x10>
		}
	}
}
 8001200:	bf00      	nop
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40020000 	.word	0x40020000

0800120c <Read_DS18B20>:
// Reading data from sensor according to manual
uint8_t Read_DS18B20 (void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	Set_Pin_Input(PORT_DS18B20, PIN_DS18B20);
 8001212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001216:	481d      	ldr	r0, [pc, #116]	; (800128c <Read_DS18B20+0x80>)
 8001218:	f7ff ff38 	bl	800108c <Set_Pin_Input>
	uint8_t data = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<8; i++)
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	e02a      	b.n	800127c <Read_DS18B20+0x70>
	{
		Set_Pin_Output(PORT_DS18B20, PIN_DS18B20);
 8001226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122a:	4818      	ldr	r0, [pc, #96]	; (800128c <Read_DS18B20+0x80>)
 800122c:	f7ff ff10 	bl	8001050 <Set_Pin_Output>
		HAL_GPIO_WritePin(PORT_DS18B20, PIN_DS18B20, 0);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001236:	4815      	ldr	r0, [pc, #84]	; (800128c <Read_DS18B20+0x80>)
 8001238:	f002 fbe6 	bl	8003a08 <HAL_GPIO_WritePin>
		delay(2);
 800123c:	2002      	movs	r0, #2
 800123e:	f000 fe23 	bl	8001e88 <delay>
		Set_Pin_Input(PORT_DS18B20, PIN_DS18B20);
 8001242:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001246:	4811      	ldr	r0, [pc, #68]	; (800128c <Read_DS18B20+0x80>)
 8001248:	f7ff ff20 	bl	800108c <Set_Pin_Input>
		if(HAL_GPIO_ReadPin (PORT_DS18B20, PIN_DS18B20) == GPIO_PIN_SET)
 800124c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001250:	480e      	ldr	r0, [pc, #56]	; (800128c <Read_DS18B20+0x80>)
 8001252:	f002 fbc1 	bl	80039d8 <HAL_GPIO_ReadPin>
 8001256:	4603      	mov	r3, r0
 8001258:	2b01      	cmp	r3, #1
 800125a:	d109      	bne.n	8001270 <Read_DS18B20+0x64>
		{
			data |= 1<<i;
 800125c:	2201      	movs	r2, #1
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	b25a      	sxtb	r2, r3
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	4313      	orrs	r3, r2
 800126c:	b25b      	sxtb	r3, r3
 800126e:	71fb      	strb	r3, [r7, #7]
		}
		delay(60);
 8001270:	203c      	movs	r0, #60	; 0x3c
 8001272:	f000 fe09 	bl	8001e88 <delay>
	for(int i=0; i<8; i++)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2b07      	cmp	r3, #7
 8001280:	ddd1      	ble.n	8001226 <Read_DS18B20+0x1a>
	}
	return data;
 8001282:	79fb      	ldrb	r3, [r7, #7]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40020000 	.word	0x40020000

08001290 <MX_GPIO_Init>:
  * @retval None
  */
#include <gpio.h>

void MX_GPIO_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]
 80012a2:	60da      	str	r2, [r3, #12]
 80012a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	4b31      	ldr	r3, [pc, #196]	; (8001370 <MX_GPIO_Init+0xe0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a30      	ldr	r2, [pc, #192]	; (8001370 <MX_GPIO_Init+0xe0>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b2e      	ldr	r3, [pc, #184]	; (8001370 <MX_GPIO_Init+0xe0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <MX_GPIO_Init+0xe0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a29      	ldr	r2, [pc, #164]	; (8001370 <MX_GPIO_Init+0xe0>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b27      	ldr	r3, [pc, #156]	; (8001370 <MX_GPIO_Init+0xe0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <MX_GPIO_Init+0xe0>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a22      	ldr	r2, [pc, #136]	; (8001370 <MX_GPIO_Init+0xe0>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_GPIO_Init+0xe0>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001300:	481c      	ldr	r0, [pc, #112]	; (8001374 <MX_GPIO_Init+0xe4>)
 8001302:	f002 fb81 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	2111      	movs	r1, #17
 800130a:	481b      	ldr	r0, [pc, #108]	; (8001378 <MX_GPIO_Init+0xe8>)
 800130c:	f002 fb7c 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001310:	2310      	movs	r3, #16
 8001312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001318:	2302      	movs	r3, #2
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	4619      	mov	r1, r3
 8001326:	4813      	ldr	r0, [pc, #76]	; (8001374 <MX_GPIO_Init+0xe4>)
 8001328:	f002 f9c4 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 800132c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <MX_GPIO_Init+0xe4>)
 8001346:	f002 f9b5 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800134a:	2311      	movs	r3, #17
 800134c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4619      	mov	r1, r3
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_GPIO_Init+0xe8>)
 8001362:	f002 f9a7 	bl	80036b4 <HAL_GPIO_Init>

}
 8001366:	bf00      	nop
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	00000000 	.word	0x00000000

08001380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b0ab      	sub	sp, #172	; 0xac
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001386:	f000 fedd 	bl	8002144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138a:	f000 fa3b 	bl	8001804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800138e:	f7ff ff7f 	bl	8001290 <MX_GPIO_Init>
  MX_DMA_Init();
 8001392:	f7ff fe3d 	bl	8001010 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001396:	f000 fe81 	bl	800209c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800139a:	f7ff fdc5 	bl	8000f28 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800139e:	f000 fe53 	bl	8002048 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80013a2:	f004 ffd3 	bl	800634c <MX_FATFS_Init>
  MX_RTC_Init();
 80013a6:	f000 fd87 	bl	8001eb8 <MX_RTC_Init>
  MX_TIM10_Init();
 80013aa:	f000 fcd9 	bl	8001d60 <MX_TIM10_Init>
  MX_TIM11_Init();
 80013ae:	f000 fd0d 	bl	8001dcc <MX_TIM11_Init>
  MX_TIM13_Init();
 80013b2:	f000 fd43 	bl	8001e3c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  //Start Timer_10 used to create microsecond delay during temperature sensor communication
  HAL_TIM_Base_Start(&htim10);
 80013b6:	4876      	ldr	r0, [pc, #472]	; (8001590 <main+0x210>)
 80013b8:	f003 fef5 	bl	80051a6 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 80013bc:	4875      	ldr	r0, [pc, #468]	; (8001594 <main+0x214>)
 80013be:	f003 fef2 	bl	80051a6 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim13);
 80013c2:	4875      	ldr	r0, [pc, #468]	; (8001598 <main+0x218>)
 80013c4:	f003 feef 	bl	80051a6 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  uint32_t adc_value[2];
  uint32_t raw;
  uint32_t Rx, Lux;
  uint8_t moisture;
  uint8_t state = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint8_t irrigation;
  char buffer[120];
  //Start DMA from ADC1
  HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 80013ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013d2:	2202      	movs	r2, #2
 80013d4:	4619      	mov	r1, r3
 80013d6:	4871      	ldr	r0, [pc, #452]	; (800159c <main+0x21c>)
 80013d8:	f001 f90a 	bl	80025f0 <HAL_ADC_Start_DMA>

  set_time();
 80013dc:	f000 fdc6 	bl	8001f6c <set_time>

  while (1)
  {
	  __HAL_TIM_SET_COUNTER(&htim11, 0);
 80013e0:	4b6c      	ldr	r3, [pc, #432]	; (8001594 <main+0x214>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2200      	movs	r2, #0
 80013e6:	625a      	str	r2, [r3, #36]	; 0x24
	  //Setting buffer values to zero
	  memset(buffer, 0, sizeof(buffer));
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	2278      	movs	r2, #120	; 0x78
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f005 f89c 	bl	800652c <memset>
//************************************************LIGHT SENSOR*******************************************************************************
	  //Value of ADC conversion automatically stored through DMA in the buffer
	  raw = adc_value[0];
 80013f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80013f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  //Calculating approximate value in standard SI units
	  Rx = (19251200 - 4700*raw)/raw;
 80013fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80013fe:	f241 225c 	movw	r2, #4700	; 0x125c
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	f1c3 7392 	rsb	r3, r3, #19136512	; 0x1240000
 800140a:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 800140e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001412:	fbb3 f3f2 	udiv	r3, r3, r2
 8001416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  Lux = 16301 - 1596*log(Rx);
 800141a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800141e:	f7ff f891 	bl	8000544 <__aeabi_ui2d>
 8001422:	4603      	mov	r3, r0
 8001424:	460c      	mov	r4, r1
 8001426:	ec44 3b10 	vmov	d0, r3, r4
 800142a:	f007 f8d5 	bl	80085d8 <log>
 800142e:	ec51 0b10 	vmov	r0, r1, d0
 8001432:	a34f      	add	r3, pc, #316	; (adr r3, 8001570 <main+0x1f0>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7ff f8fe 	bl	8000638 <__aeabi_dmul>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	461a      	mov	r2, r3
 8001442:	4623      	mov	r3, r4
 8001444:	a14c      	add	r1, pc, #304	; (adr r1, 8001578 <main+0x1f8>)
 8001446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800144a:	f7fe ff3d 	bl	80002c8 <__aeabi_dsub>
 800144e:	4603      	mov	r3, r0
 8001450:	460c      	mov	r4, r1
 8001452:	4618      	mov	r0, r3
 8001454:	4621      	mov	r1, r4
 8001456:	f7ff fbc7 	bl	8000be8 <__aeabi_d2uiz>
 800145a:	4603      	mov	r3, r0
 800145c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  Lux = 4857612*pow(Rx, -1.02911);
 8001460:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001464:	f7ff f86e 	bl	8000544 <__aeabi_ui2d>
 8001468:	4603      	mov	r3, r0
 800146a:	460c      	mov	r4, r1
 800146c:	ed9f 1b44 	vldr	d1, [pc, #272]	; 8001580 <main+0x200>
 8001470:	ec44 3b10 	vmov	d0, r3, r4
 8001474:	f007 f930 	bl	80086d8 <pow>
 8001478:	ec51 0b10 	vmov	r0, r1, d0
 800147c:	a342      	add	r3, pc, #264	; (adr r3, 8001588 <main+0x208>)
 800147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001482:	f7ff f8d9 	bl	8000638 <__aeabi_dmul>
 8001486:	4603      	mov	r3, r0
 8001488:	460c      	mov	r4, r1
 800148a:	4618      	mov	r0, r3
 800148c:	4621      	mov	r1, r4
 800148e:	f7ff fbab 	bl	8000be8 <__aeabi_d2uiz>
 8001492:	4603      	mov	r3, r0
 8001494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  sprintf(msg, "%ld ",Lux);
 8001498:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800149c:	4940      	ldr	r1, [pc, #256]	; (80015a0 <main+0x220>)
 800149e:	4841      	ldr	r0, [pc, #260]	; (80015a4 <main+0x224>)
 80014a0:	f005 fca8 	bl	8006df4 <siprintf>
//************************************************MOISTURE SENSOR****************************************************************************
	  //Value of ADC conversion automatically stored through DMA in the buffer
	  raw = adc_value[1];
 80014a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80014a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  //Rescaling raw value from ADC to represent the percent of moisture
	  moisture = (3396 - raw)/19;
 80014ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014b0:	f5c3 6354 	rsb	r3, r3, #3392	; 0xd40
 80014b4:	3304      	adds	r3, #4
 80014b6:	4a3c      	ldr	r2, [pc, #240]	; (80015a8 <main+0x228>)
 80014b8:	fba2 1203 	umull	r1, r2, r2, r3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	085b      	lsrs	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  sprintf(buffer,"%d ",moisture);
 80014c8:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4937      	ldr	r1, [pc, #220]	; (80015ac <main+0x22c>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 fc8f 	bl	8006df4 <siprintf>
	  strcat(msg, buffer);
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	4619      	mov	r1, r3
 80014da:	4832      	ldr	r0, [pc, #200]	; (80015a4 <main+0x224>)
 80014dc:	f005 fcaa 	bl	8006e34 <strcat>

//************************************************TEMPERATURE SENSORS*************************************************************************
	  //Stop ADC conversion to prevent interrupts during microseconds delay
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e4:	482d      	ldr	r0, [pc, #180]	; (800159c <main+0x21c>)
 80014e6:	f000 fffe 	bl	80024e6 <HAL_ADC_PollForConversion>
	  HAL_ADC_Stop(&hadc1);
 80014ea:	482c      	ldr	r0, [pc, #176]	; (800159c <main+0x21c>)
 80014ec:	f000 ffc8 	bl	8002480 <HAL_ADC_Stop>
	  //Start sensor communication
		for(int j = 0;j < 2;j++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80014f6:	e025      	b.n	8001544 <main+0x1c4>
		{
		  //Reset the data line
		  Start_DS18B20();
 80014f8:	f7ff fde6 	bl	80010c8 <Start_DS18B20>
		  //Matching ROM code
		  Write_Byte_DS18B20 (0x55);
 80014fc:	2055      	movs	r0, #85	; 0x55
 80014fe:	f7ff fe3f 	bl	8001180 <Write_Byte_DS18B20>
		  //Sending ROM code to the corresponding sensor
		  for(int i = 0; i < 8; i++)
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001508:	e010      	b.n	800152c <main+0x1ac>
		  {
			  Write_Byte_DS18B20(DS18B20_ROM_ADDR[j][i]);
 800150a:	4a29      	ldr	r2, [pc, #164]	; (80015b0 <main+0x230>)
 800150c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	441a      	add	r2, r3
 8001514:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fe2f 	bl	8001180 <Write_Byte_DS18B20>
		  for(int i = 0; i < 8; i++)
 8001522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001526:	3301      	adds	r3, #1
 8001528:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800152c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001530:	2b07      	cmp	r3, #7
 8001532:	ddea      	ble.n	800150a <main+0x18a>
		  }
		  //Start temperature conversion
		  Write_Byte_DS18B20 (0x44);
 8001534:	2044      	movs	r0, #68	; 0x44
 8001536:	f7ff fe23 	bl	8001180 <Write_Byte_DS18B20>
		for(int j = 0;j < 2;j++)
 800153a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800153e:	3301      	adds	r3, #1
 8001540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001544:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001548:	2b01      	cmp	r3, #1
 800154a:	ddd5      	ble.n	80014f8 <main+0x178>
		}
		HAL_Delay (100);
 800154c:	2064      	movs	r0, #100	; 0x64
 800154e:	f000 fe6b 	bl	8002228 <HAL_Delay>
		// After conversion read temperature data from both sensors
		for(int j = 0;j < 2;j++)
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001558:	e072      	b.n	8001640 <main+0x2c0>
		{
		  //Reset the data line
		  Start_DS18B20();
 800155a:	f7ff fdb5 	bl	80010c8 <Start_DS18B20>
		  //Matching ROM code
		  Write_Byte_DS18B20 (0x55);
 800155e:	2055      	movs	r0, #85	; 0x55
 8001560:	f7ff fe0e 	bl	8001180 <Write_Byte_DS18B20>
		  //Sending ROM code to the corresponding sensor
		  for(int i = 0; i<8; i++)
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800156a:	e034      	b.n	80015d6 <main+0x256>
 800156c:	f3af 8000 	nop.w
 8001570:	00000000 	.word	0x00000000
 8001574:	4098f000 	.word	0x4098f000
 8001578:	00000000 	.word	0x00000000
 800157c:	40cfd680 	.word	0x40cfd680
 8001580:	0c1fc8f3 	.word	0x0c1fc8f3
 8001584:	bff0773c 	.word	0xbff0773c
 8001588:	00000000 	.word	0x00000000
 800158c:	415287c3 	.word	0x415287c3
 8001590:	20000418 	.word	0x20000418
 8001594:	2000049c 	.word	0x2000049c
 8001598:	2000045c 	.word	0x2000045c
 800159c:	20000238 	.word	0x20000238
 80015a0:	08009b34 	.word	0x08009b34
 80015a4:	20000308 	.word	0x20000308
 80015a8:	af286bcb 	.word	0xaf286bcb
 80015ac:	08009b3c 	.word	0x08009b3c
 80015b0:	20000000 	.word	0x20000000
			  {
				  Write_Byte_DS18B20(DS18B20_ROM_ADDR[j][i]);
 80015b4:	4a7e      	ldr	r2, [pc, #504]	; (80017b0 <main+0x430>)
 80015b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	441a      	add	r2, r3
 80015be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fdda 	bl	8001180 <Write_Byte_DS18B20>
		  for(int i = 0; i<8; i++)
 80015cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015d0:	3301      	adds	r3, #1
 80015d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80015d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80015da:	2b07      	cmp	r3, #7
 80015dc:	ddea      	ble.n	80015b4 <main+0x234>
			  }
		  //Sending data from sensor to Mcu
		  Write_Byte_DS18B20 (0xBE);
 80015de:	20be      	movs	r0, #190	; 0xbe
 80015e0:	f7ff fdce 	bl	8001180 <Write_Byte_DS18B20>
		  //Receive 8 bits of temperature data and CRC bit
		  Temp_byte1 = Read_DS18B20();
 80015e4:	f7ff fe12 	bl	800120c <Read_DS18B20>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b71      	ldr	r3, [pc, #452]	; (80017b4 <main+0x434>)
 80015ee:	701a      	strb	r2, [r3, #0]
		  //Receive 8 bits of temperature data and CRC bit
		  Temp_byte2 = Read_DS18B20();
 80015f0:	f7ff fe0c 	bl	800120c <Read_DS18B20>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b6f      	ldr	r3, [pc, #444]	; (80017b8 <main+0x438>)
 80015fa:	701a      	strb	r2, [r3, #0]
		  //Creating 16bit value with byte-shifting
		  Temp = (Temp_byte2 << 8) | Temp_byte1;
 80015fc:	4b6e      	ldr	r3, [pc, #440]	; (80017b8 <main+0x438>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21a      	sxth	r2, r3
 8001604:	4b6b      	ldr	r3, [pc, #428]	; (80017b4 <main+0x434>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b21b      	sxth	r3, r3
 800160a:	4313      	orrs	r3, r2
 800160c:	b21b      	sxth	r3, r3
 800160e:	b29a      	uxth	r2, r3
 8001610:	4b6a      	ldr	r3, [pc, #424]	; (80017bc <main+0x43c>)
 8001612:	801a      	strh	r2, [r3, #0]
		  //Convert value from uint16_t to 12 bit value of float type
		  Temperatures[j] = (float)Temp/16;
 8001614:	4b69      	ldr	r3, [pc, #420]	; (80017bc <main+0x43c>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	ee07 3a90 	vmov	s15, r3
 800161c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001620:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001624:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001628:	4a65      	ldr	r2, [pc, #404]	; (80017c0 <main+0x440>)
 800162a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0;j < 2;j++)
 8001636:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800163a:	3301      	adds	r3, #1
 800163c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001644:	2b01      	cmp	r3, #1
 8001646:	dd88      	ble.n	800155a <main+0x1da>
		}
	  __HAL_ADC_ENABLE_IT(&hadc1, ADC_IT_OVR);
 8001648:	4b5e      	ldr	r3, [pc, #376]	; (80017c4 <main+0x444>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <main+0x444>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001656:	605a      	str	r2, [r3, #4]
	  sprintf(buffer, "%.2f " ,Temperatures[0]);
 8001658:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <main+0x440>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff93 	bl	8000588 <__aeabi_f2d>
 8001662:	4603      	mov	r3, r0
 8001664:	460c      	mov	r4, r1
 8001666:	1d38      	adds	r0, r7, #4
 8001668:	461a      	mov	r2, r3
 800166a:	4623      	mov	r3, r4
 800166c:	4956      	ldr	r1, [pc, #344]	; (80017c8 <main+0x448>)
 800166e:	f005 fbc1 	bl	8006df4 <siprintf>
	  strcat(msg, buffer);
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	4619      	mov	r1, r3
 8001676:	4855      	ldr	r0, [pc, #340]	; (80017cc <main+0x44c>)
 8001678:	f005 fbdc 	bl	8006e34 <strcat>
	  sprintf(buffer, "%.2f",Temperatures[1]);
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <main+0x440>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff81 	bl	8000588 <__aeabi_f2d>
 8001686:	4603      	mov	r3, r0
 8001688:	460c      	mov	r4, r1
 800168a:	1d38      	adds	r0, r7, #4
 800168c:	461a      	mov	r2, r3
 800168e:	4623      	mov	r3, r4
 8001690:	494f      	ldr	r1, [pc, #316]	; (80017d0 <main+0x450>)
 8001692:	f005 fbaf 	bl	8006df4 <siprintf>
	  strcat(msg, buffer);
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	484c      	ldr	r0, [pc, #304]	; (80017cc <main+0x44c>)
 800169c:	f005 fbca 	bl	8006e34 <strcat>
	  HAL_ADC_Start(&hadc1);
 80016a0:	4848      	ldr	r0, [pc, #288]	; (80017c4 <main+0x444>)
 80016a2:	f000 fe27 	bl	80022f4 <HAL_ADC_Start>
//************************************************BLUETOOTH COMMUNICATION*********************************************************************
	  UART1_IRQHandler();
 80016a6:	f7ff fc9f 	bl	8000fe8 <UART1_IRQHandler>
	  sprintf(T_msg,"Buffer: %d",buffer_index);
 80016aa:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <main+0x454>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	461a      	mov	r2, r3
 80016b0:	4949      	ldr	r1, [pc, #292]	; (80017d8 <main+0x458>)
 80016b2:	484a      	ldr	r0, [pc, #296]	; (80017dc <main+0x45c>)
 80016b4:	f005 fb9e 	bl	8006df4 <siprintf>

//************************************************REAL-TIME CLOCK*******************************************************************************
	  //Get current time
	  get_time();
 80016b8:	f000 fc90 	bl	8001fdc <get_time>
	  sprintf(buffer, "%s ", (char*)time);
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	4a48      	ldr	r2, [pc, #288]	; (80017e0 <main+0x460>)
 80016c0:	4948      	ldr	r1, [pc, #288]	; (80017e4 <main+0x464>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f005 fb96 	bl	8006df4 <siprintf>
	  //strcat(msg,buffer);
	  sprintf(buffer, "%s ", (char*)date);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4a47      	ldr	r2, [pc, #284]	; (80017e8 <main+0x468>)
 80016cc:	4945      	ldr	r1, [pc, #276]	; (80017e4 <main+0x464>)
 80016ce:	4618      	mov	r0, r3
 80016d0:	f005 fb90 	bl	8006df4 <siprintf>
	  //strcat(msg,buffer);
//************************************************UART TRAMSMIT*******************************************************************************
	  strcat(msg, "\r\n");
 80016d4:	483d      	ldr	r0, [pc, #244]	; (80017cc <main+0x44c>)
 80016d6:	f7fe fd9b 	bl	8000210 <strlen>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <main+0x44c>)
 80016e0:	4413      	add	r3, r2
 80016e2:	4a42      	ldr	r2, [pc, #264]	; (80017ec <main+0x46c>)
 80016e4:	8811      	ldrh	r1, [r2, #0]
 80016e6:	7892      	ldrb	r2, [r2, #2]
 80016e8:	8019      	strh	r1, [r3, #0]
 80016ea:	709a      	strb	r2, [r3, #2]
	  //Transmit to PC serial port
	  HAL_UART_Transmit(&huart2, (char*)msg,strlen((char*)msg), HAL_MAX_DELAY);
 80016ec:	4837      	ldr	r0, [pc, #220]	; (80017cc <main+0x44c>)
 80016ee:	f7fe fd8f 	bl	8000210 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016fa:	4934      	ldr	r1, [pc, #208]	; (80017cc <main+0x44c>)
 80016fc:	483c      	ldr	r0, [pc, #240]	; (80017f0 <main+0x470>)
 80016fe:	f003 fee0 	bl	80054c2 <HAL_UART_Transmit>
	  //Transmit to Bluetooth module
	  HAL_UART_Transmit(&huart1, (char*)msg,strlen((char*)msg), HAL_MAX_DELAY);
 8001702:	4832      	ldr	r0, [pc, #200]	; (80017cc <main+0x44c>)
 8001704:	f7fe fd84 	bl	8000210 <strlen>
 8001708:	4603      	mov	r3, r0
 800170a:	b29a      	uxth	r2, r3
 800170c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001710:	492e      	ldr	r1, [pc, #184]	; (80017cc <main+0x44c>)
 8001712:	4838      	ldr	r0, [pc, #224]	; (80017f4 <main+0x474>)
 8001714:	f003 fed5 	bl	80054c2 <HAL_UART_Transmit>
	  //Irrigation algorithm
	  if (moisture < 40)
 8001718:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800171c:	2b27      	cmp	r3, #39	; 0x27
 800171e:	d802      	bhi.n	8001726 <main+0x3a6>
		  irrigation = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	  if (moisture > 70)
 8001726:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800172a:	2b46      	cmp	r3, #70	; 0x46
 800172c:	d902      	bls.n	8001734 <main+0x3b4>
	  	  irrigation = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	  //If conditions met start irrigation
	  if(__HAL_TIM_GET_COUNTER(&htim13) > 55000 && irrigation == 1)
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <main+0x478>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 800173e:	4293      	cmp	r3, r2
 8001740:	d914      	bls.n	800176c <main+0x3ec>
 8001742:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 8001746:	2b01      	cmp	r3, #1
 8001748:	d110      	bne.n	800176c <main+0x3ec>
	  {
		  __HAL_TIM_SET_COUNTER(&htim13, 0);
 800174a:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <main+0x478>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1 );
 8001752:	2201      	movs	r2, #1
 8001754:	2110      	movs	r1, #16
 8001756:	4829      	ldr	r0, [pc, #164]	; (80017fc <main+0x47c>)
 8001758:	f002 f956 	bl	8003a08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1 );
 800175c:	2201      	movs	r2, #1
 800175e:	2120      	movs	r1, #32
 8001760:	4826      	ldr	r0, [pc, #152]	; (80017fc <main+0x47c>)
 8001762:	f002 f951 	bl	8003a08 <HAL_GPIO_WritePin>
		  state = 1;
 8001766:	2301      	movs	r3, #1
 8001768:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	  }
	  //If conditions met stop irrigation
	  if(state == 1 && __HAL_TIM_GET_COUNTER(&htim13) > 5000 )
 800176c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001770:	2b01      	cmp	r3, #1
 8001772:	d113      	bne.n	800179c <main+0x41c>
 8001774:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <main+0x478>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d90c      	bls.n	800179c <main+0x41c>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0 );
 8001782:	2200      	movs	r2, #0
 8001784:	2110      	movs	r1, #16
 8001786:	481d      	ldr	r0, [pc, #116]	; (80017fc <main+0x47c>)
 8001788:	f002 f93e 	bl	8003a08 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0 );
 800178c:	2200      	movs	r2, #0
 800178e:	2120      	movs	r1, #32
 8001790:	481a      	ldr	r0, [pc, #104]	; (80017fc <main+0x47c>)
 8001792:	f002 f939 	bl	8003a08 <HAL_GPIO_WritePin>
		  state = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	  }
	  while((__HAL_TIM_GET_COUNTER(&htim11)) < 999);
 800179c:	bf00      	nop
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <main+0x480>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	f240 32e6 	movw	r2, #998	; 0x3e6
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d9f8      	bls.n	800179e <main+0x41e>
	  __HAL_TIM_SET_COUNTER(&htim11, 0);
 80017ac:	e618      	b.n	80013e0 <main+0x60>
 80017ae:	bf00      	nop
 80017b0:	20000000 	.word	0x20000000
 80017b4:	20000408 	.word	0x20000408
 80017b8:	20000414 	.word	0x20000414
 80017bc:	20000304 	.word	0x20000304
 80017c0:	2000040c 	.word	0x2000040c
 80017c4:	20000238 	.word	0x20000238
 80017c8:	08009b40 	.word	0x08009b40
 80017cc:	20000308 	.word	0x20000308
 80017d0:	08009b48 	.word	0x08009b48
 80017d4:	20000301 	.word	0x20000301
 80017d8:	08009b50 	.word	0x08009b50
 80017dc:	200002e0 	.word	0x200002e0
 80017e0:	2000055c 	.word	0x2000055c
 80017e4:	08009b5c 	.word	0x08009b5c
 80017e8:	200005d0 	.word	0x200005d0
 80017ec:	08009b60 	.word	0x08009b60
 80017f0:	20000590 	.word	0x20000590
 80017f4:	20000280 	.word	0x20000280
 80017f8:	2000045c 	.word	0x2000045c
 80017fc:	40020000 	.word	0x40020000
 8001800:	2000049c 	.word	0x2000049c

08001804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0ac      	sub	sp, #176	; 0xb0
 8001808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800180e:	2234      	movs	r2, #52	; 0x34
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f004 fe8a 	bl	800652c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001818:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	225c      	movs	r2, #92	; 0x5c
 800182e:	2100      	movs	r1, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f004 fe7b 	bl	800652c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <SystemClock_Config+0x118>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a37      	ldr	r2, [pc, #220]	; (800191c <SystemClock_Config+0x118>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b35      	ldr	r3, [pc, #212]	; (800191c <SystemClock_Config+0x118>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
 8001856:	4b32      	ldr	r3, [pc, #200]	; (8001920 <SystemClock_Config+0x11c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800185e:	4a30      	ldr	r2, [pc, #192]	; (8001920 <SystemClock_Config+0x11c>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <SystemClock_Config+0x11c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800186e:	607b      	str	r3, [r7, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001872:	2309      	movs	r3, #9
 8001874:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800187a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001884:	2301      	movs	r3, #1
 8001886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188a:	2302      	movs	r3, #2
 800188c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001890:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001898:	2304      	movs	r3, #4
 800189a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 50;
 800189e:	2332      	movs	r3, #50	; 0x32
 80018a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018b0:	2302      	movs	r3, #2
 80018b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fea2 	bl	8004604 <HAL_RCC_OscConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80018c6:	f000 f82d 	bl	8001924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ca:	230f      	movs	r3, #15
 80018cc:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ce:	2302      	movs	r3, #2
 80018d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018da:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018e0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018e4:	2101      	movs	r1, #1
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 f8a8 	bl	8003a3c <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80018f2:	f000 f817 	bl	8001924 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018f6:	2320      	movs	r3, #32
 80018f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	4618      	mov	r0, r3
 8001906:	f002 f9b3 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001910:	f000 f808 	bl	8001924 <Error_Handler>
  }
}
 8001914:	bf00      	nop
 8001916:	37b0      	adds	r7, #176	; 0xb0
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_MspInit+0x4c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_MspInit+0x4c>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_MspInit+0x4c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_MspInit+0x4c>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a08      	ldr	r2, [pc, #32]	; (8001980 <HAL_MspInit+0x4c>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_MspInit+0x4c>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	603b      	str	r3, [r7, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <HAL_ADC_MspInit+0xdc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d157      	bne.n	8001a56 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a2d      	ldr	r2, [pc, #180]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b27      	ldr	r3, [pc, #156]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a26      	ldr	r2, [pc, #152]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b24      	ldr	r3, [pc, #144]	; (8001a64 <HAL_ADC_MspInit+0xe0>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019de:	2303      	movs	r3, #3
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019e2:	2303      	movs	r3, #3
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	481d      	ldr	r0, [pc, #116]	; (8001a68 <HAL_ADC_MspInit+0xe4>)
 80019f2:	f001 fe5f 	bl	80036b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_ADC_MspInit+0xec>)
 80019fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a14:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a1c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a1e:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a24:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a34:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a3a:	480c      	ldr	r0, [pc, #48]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a3c:	f001 faaa 	bl	8002f94 <HAL_DMA_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001a46:	f7ff ff6d 	bl	8001924 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a4e:	639a      	str	r2, [r3, #56]	; 0x38
 8001a50:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_ADC_MspInit+0xe8>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a56:	bf00      	nop
 8001a58:	3728      	adds	r7, #40	; 0x28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40012000 	.word	0x40012000
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	200004dc 	.word	0x200004dc
 8001a70:	40026410 	.word	0x40026410

08001a74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_RTC_MspInit+0x24>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d102      	bne.n	8001a8c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_RTC_MspInit+0x28>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	40002800 	.word	0x40002800
 8001a9c:	42470e3c 	.word	0x42470e3c

08001aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <HAL_TIM_Base_MspInit+0x8c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d10e      	bne.n	8001ad0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	; (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001ace:	e026      	b.n	8001b1e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM11)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <HAL_TIM_Base_MspInit+0x94>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d10e      	bne.n	8001af8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae2:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
}
 8001af6:	e012      	b.n	8001b1e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM13)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <HAL_TIM_Base_MspInit+0x98>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10d      	bne.n	8001b1e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	4a09      	ldr	r2, [pc, #36]	; (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b10:	6413      	str	r3, [r2, #64]	; 0x40
 8001b12:	4b07      	ldr	r3, [pc, #28]	; (8001b30 <HAL_TIM_Base_MspInit+0x90>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
}
 8001b1e:	bf00      	nop
 8001b20:	371c      	adds	r7, #28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40014400 	.word	0x40014400
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40014800 	.word	0x40014800
 8001b38:	40001c00 	.word	0x40001c00

08001b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08c      	sub	sp, #48	; 0x30
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a36      	ldr	r2, [pc, #216]	; (8001c34 <HAL_UART_MspInit+0xf8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d135      	bne.n	8001bca <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	4b35      	ldr	r3, [pc, #212]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a34      	ldr	r2, [pc, #208]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b68:	f043 0310 	orr.w	r3, r3, #16
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a2d      	ldr	r2, [pc, #180]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4822      	ldr	r0, [pc, #136]	; (8001c3c <HAL_UART_MspInit+0x100>)
 8001bb4:	f001 fd7e 	bl	80036b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2025      	movs	r0, #37	; 0x25
 8001bbe:	f001 f9b2 	bl	8002f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bc2:	2025      	movs	r0, #37	; 0x25
 8001bc4:	f001 f9cb 	bl	8002f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bc8:	e030      	b.n	8001c2c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a1c      	ldr	r2, [pc, #112]	; (8001c40 <HAL_UART_MspInit+0x104>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d12b      	bne.n	8001c2c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	4a16      	ldr	r2, [pc, #88]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	4a0f      	ldr	r2, [pc, #60]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_UART_MspInit+0xfc>)
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c1c:	2307      	movs	r3, #7
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <HAL_UART_MspInit+0x100>)
 8001c28:	f001 fd44 	bl	80036b4 <HAL_GPIO_Init>
}
 8001c2c:	bf00      	nop
 8001c2e:	3730      	adds	r7, #48	; 0x30
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40011000 	.word	0x40011000
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40004400 	.word	0x40004400

08001c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <MemManage_Handler+0x4>

08001c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c98:	f000 faa6 	bl	80021e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <USART1_IRQHandler+0x10>)
 8001ca6:	f003 fd4b 	bl	8005740 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000280 	.word	0x20000280

08001cb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <DMA2_Stream0_IRQHandler+0x10>)
 8001cba:	f001 fa93 	bl	80031e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200004dc 	.word	0x200004dc

08001cc8 <_sbrk>:
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
 8001cf8:	f004 fbee 	bl	80064d8 <__errno>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	230c      	movs	r3, #12
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20020000 	.word	0x20020000
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	20000220 	.word	0x20000220
 8001d30:	20002658 	.word	0x20002658

08001d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <SystemInit+0x28>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <SystemInit+0x28>)
 8001d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d48:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <SystemInit+0x28>)
 8001d4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d4e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <MX_TIM10_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM10_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d66:	463b      	mov	r3, r7
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim10.Instance = TIM10;
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_TIM10_Init+0x64>)
 8001d70:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <MX_TIM10_Init+0x68>)
 8001d72:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 50-1;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_TIM10_Init+0x64>)
 8001d76:	2231      	movs	r2, #49	; 0x31
 8001d78:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_TIM10_Init+0x64>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0xffff-1;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_TIM10_Init+0x64>)
 8001d82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d86:	60da      	str	r2, [r3, #12]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_TIM10_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <MX_TIM10_Init+0x64>)
 8001d90:	f003 f9de 	bl	8005150 <HAL_TIM_Base_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 8001d9a:	f7ff fdc3 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim10, &sMasterConfig) != HAL_OK)
 8001da6:	463b      	mov	r3, r7
 8001da8:	4619      	mov	r1, r3
 8001daa:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <MX_TIM10_Init+0x64>)
 8001dac:	f003 fac0 	bl	8005330 <HAL_TIMEx_MasterConfigSynchronization>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM10_Init+0x5a>
  {
    Error_Handler();
 8001db6:	f7ff fdb5 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000418 	.word	0x20000418
 8001dc8:	40014400 	.word	0x40014400

08001dcc <MX_TIM11_Init>:
void MX_TIM11_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd2:	463b      	mov	r3, r7
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim11.Instance = TIM11;
 8001dda:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <MX_TIM11_Init+0x64>)
 8001ddc:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <MX_TIM11_Init+0x68>)
 8001dde:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 50000-1;
 8001de0:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <MX_TIM11_Init+0x64>)
 8001de2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001de6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_TIM11_Init+0x64>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0xffff-1;
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <MX_TIM11_Init+0x64>)
 8001df0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001df4:	60da      	str	r2, [r3, #12]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_TIM11_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001dfc:	480c      	ldr	r0, [pc, #48]	; (8001e30 <MX_TIM11_Init+0x64>)
 8001dfe:	f003 f9a7 	bl	8005150 <HAL_TIM_Base_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM11_Init+0x40>
  {
    Error_Handler();
 8001e08:	f7ff fd8c 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim10, &sMasterConfig) != HAL_OK)
 8001e14:	463b      	mov	r3, r7
 8001e16:	4619      	mov	r1, r3
 8001e18:	4807      	ldr	r0, [pc, #28]	; (8001e38 <MX_TIM11_Init+0x6c>)
 8001e1a:	f003 fa89 	bl	8005330 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 8001e24:	f7ff fd7e 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e28:	bf00      	nop
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	2000049c 	.word	0x2000049c
 8001e34:	40014800 	.word	0x40014800
 8001e38:	20000418 	.word	0x20000418

08001e3c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM13_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MX_TIM13_Init+0x40>)
 8001e42:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <MX_TIM13_Init+0x44>)
 8001e44:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 500000-1;
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <MX_TIM13_Init+0x40>)
 8001e48:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <MX_TIM13_Init+0x48>)
 8001e4a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <MX_TIM13_Init+0x40>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <MX_TIM13_Init+0x40>)
 8001e54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e58:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <MX_TIM13_Init+0x40>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_TIM13_Init+0x40>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <MX_TIM13_Init+0x40>)
 8001e68:	f003 f972 	bl	8005150 <HAL_TIM_Base_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001e72:	f7ff fd57 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000045c 	.word	0x2000045c
 8001e80:	40001c00 	.word	0x40001c00
 8001e84:	0007a11f 	.word	0x0007a11f

08001e88 <delay>:
//USING PERIPHERIAL TIMER FOR DELAY
void delay (uint32_t time)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
   __HAL_TIM_SET_COUNTER(&htim10, 0);
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <delay+0x2c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2200      	movs	r2, #0
 8001e96:	625a      	str	r2, [r3, #36]	; 0x24
   while((__HAL_TIM_GET_COUNTER(&htim10))<time);
 8001e98:	bf00      	nop
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <delay+0x2c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d8f9      	bhi.n	8001e9a <delay+0x12>
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000418 	.word	0x20000418

08001eb8 <MX_RTC_Init>:

void MX_RTC_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ecc:	2300      	movs	r3, #0
 8001ece:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <MX_RTC_Init+0xac>)
 8001ed2:	4a25      	ldr	r2, [pc, #148]	; (8001f68 <MX_RTC_Init+0xb0>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <MX_RTC_Init+0xac>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <MX_RTC_Init+0xac>)
 8001ede:	227f      	movs	r2, #127	; 0x7f
 8001ee0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <MX_RTC_Init+0xac>)
 8001ee4:	22ff      	movs	r2, #255	; 0xff
 8001ee6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ee8:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <MX_RTC_Init+0xac>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <MX_RTC_Init+0xac>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <MX_RTC_Init+0xac>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001efa:	481a      	ldr	r0, [pc, #104]	; (8001f64 <MX_RTC_Init+0xac>)
 8001efc:	f002 fddc 	bl	8004ab8 <HAL_RTC_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001f06:	f7ff fd0d 	bl	8001924 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2201      	movs	r2, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	480f      	ldr	r0, [pc, #60]	; (8001f64 <MX_RTC_Init+0xac>)
 8001f26:	f002 fe58 	bl	8004bda <HAL_RTC_SetTime>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001f30:	f7ff fcf8 	bl	8001924 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f34:	2301      	movs	r3, #1
 8001f36:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f44:	463b      	mov	r3, r7
 8001f46:	2201      	movs	r2, #1
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4806      	ldr	r0, [pc, #24]	; (8001f64 <MX_RTC_Init+0xac>)
 8001f4c:	f002 ff60 	bl	8004e10 <HAL_RTC_SetDate>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f56:	f7ff fce5 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000053c 	.word	0x2000053c
 8001f68:	40002800 	.word	0x40002800

08001f6c <set_time>:
void set_time (void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sTime.Hours = 0x21;
 8001f72:	2321      	movs	r3, #33	; 0x21
 8001f74:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x04;
 8001f76:	2304      	movs	r3, #4
 8001f78:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x00;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4812      	ldr	r0, [pc, #72]	; (8001fd8 <set_time+0x6c>)
 8001f8e:	f002 fe24 	bl	8004bda <HAL_RTC_SetTime>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <set_time+0x30>
	{
	  Error_Handler();
 8001f98:	f7ff fcc4 	bl	8001924 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_DECEMBER;
 8001fa0:	2312      	movs	r3, #18
 8001fa2:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x14;
 8001fa4:	2314      	movs	r3, #20
 8001fa6:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x20;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	70fb      	strb	r3, [r7, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001fac:	463b      	mov	r3, r7
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <set_time+0x6c>)
 8001fb4:	f002 ff2c 	bl	8004e10 <HAL_RTC_SetDate>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <set_time+0x56>
	{
	  Error_Handler();
 8001fbe:	f7ff fcb1 	bl	8001924 <Error_Handler>
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8001fc2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <set_time+0x6c>)
 8001fca:	f003 f8a7 	bl	800511c <HAL_RTCEx_BKUPWrite>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000053c 	.word	0x2000053c

08001fdc <get_time>:

void get_time(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4812      	ldr	r0, [pc, #72]	; (8002034 <get_time+0x58>)
 8001fea:	f002 feb3 	bl	8004d54 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	480f      	ldr	r0, [pc, #60]	; (8002034 <get_time+0x58>)
 8001ff8:	f002 ffb1 	bl	8004f5e <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 8001ffc:	783b      	ldrb	r3, [r7, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	4619      	mov	r1, r3
 8002004:	78bb      	ldrb	r3, [r7, #2]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	460b      	mov	r3, r1
 800200a:	490b      	ldr	r1, [pc, #44]	; (8002038 <get_time+0x5c>)
 800200c:	480b      	ldr	r0, [pc, #44]	; (800203c <get_time+0x60>)
 800200e:	f004 fef1 	bl	8006df4 <siprintf>
	/* Display date Format: dd-mm-yy */
	sprintf((char*)date,"%02d-%02d-%02d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8002012:	7dbb      	ldrb	r3, [r7, #22]
 8002014:	461a      	mov	r2, r3
 8002016:	7d7b      	ldrb	r3, [r7, #21]
 8002018:	4619      	mov	r1, r3
 800201a:	7dfb      	ldrb	r3, [r7, #23]
 800201c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	460b      	mov	r3, r1
 8002024:	4906      	ldr	r1, [pc, #24]	; (8002040 <get_time+0x64>)
 8002026:	4807      	ldr	r0, [pc, #28]	; (8002044 <get_time+0x68>)
 8002028:	f004 fee4 	bl	8006df4 <siprintf>
}
 800202c:	bf00      	nop
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	2000053c 	.word	0x2000053c
 8002038:	08009b64 	.word	0x08009b64
 800203c:	2000055c 	.word	0x2000055c
 8002040:	08009b74 	.word	0x08009b74
 8002044:	200005d0 	.word	0x200005d0

08002048 <MX_USART1_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 800204e:	4a12      	ldr	r2, [pc, #72]	; (8002098 <MX_USART1_UART_Init+0x50>)
 8002050:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 8002054:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002058:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART1_UART_Init+0x4c>)
 8002080:	f003 f9d2 	bl	8005428 <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800208a:	f7ff fc4b 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000280 	.word	0x20000280
 8002098:	40011000 	.word	0x40011000

0800209c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <MX_USART2_UART_Init+0x4c>)
 80020a2:	4a12      	ldr	r2, [pc, #72]	; (80020ec <MX_USART2_UART_Init+0x50>)
 80020a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <MX_USART2_UART_Init+0x4c>)
 80020a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ae:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <MX_USART2_UART_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020b4:	4b0c      	ldr	r3, [pc, #48]	; (80020e8 <MX_USART2_UART_Init+0x4c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <MX_USART2_UART_Init+0x4c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <MX_USART2_UART_Init+0x4c>)
 80020c2:	220c      	movs	r2, #12
 80020c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c6:	4b08      	ldr	r3, [pc, #32]	; (80020e8 <MX_USART2_UART_Init+0x4c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <MX_USART2_UART_Init+0x4c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <MX_USART2_UART_Init+0x4c>)
 80020d4:	f003 f9a8 	bl	8005428 <HAL_UART_Init>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020de:	f7ff fc21 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000590 	.word	0x20000590
 80020ec:	40004400 	.word	0x40004400

080020f0 <Reset_Handler>:
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002128 <LoopFillZerobss+0x14>
 80020f4:	2100      	movs	r1, #0
 80020f6:	e003      	b.n	8002100 <LoopCopyDataInit>

080020f8 <CopyDataInit>:
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <LoopFillZerobss+0x18>)
 80020fa:	585b      	ldr	r3, [r3, r1]
 80020fc:	5043      	str	r3, [r0, r1]
 80020fe:	3104      	adds	r1, #4

08002100 <LoopCopyDataInit>:
 8002100:	480b      	ldr	r0, [pc, #44]	; (8002130 <LoopFillZerobss+0x1c>)
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <LoopFillZerobss+0x20>)
 8002104:	1842      	adds	r2, r0, r1
 8002106:	429a      	cmp	r2, r3
 8002108:	d3f6      	bcc.n	80020f8 <CopyDataInit>
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <LoopFillZerobss+0x24>)
 800210c:	e002      	b.n	8002114 <LoopFillZerobss>

0800210e <FillZerobss>:
 800210e:	2300      	movs	r3, #0
 8002110:	f842 3b04 	str.w	r3, [r2], #4

08002114 <LoopFillZerobss>:
 8002114:	4b09      	ldr	r3, [pc, #36]	; (800213c <LoopFillZerobss+0x28>)
 8002116:	429a      	cmp	r2, r3
 8002118:	d3f9      	bcc.n	800210e <FillZerobss>
 800211a:	f7ff fe0b 	bl	8001d34 <SystemInit>
 800211e:	f004 f9e1 	bl	80064e4 <__libc_init_array>
 8002122:	f7ff f92d 	bl	8001380 <main>
 8002126:	4770      	bx	lr
 8002128:	20020000 	.word	0x20020000
 800212c:	08009e58 	.word	0x08009e58
 8002130:	20000000 	.word	0x20000000
 8002134:	20000204 	.word	0x20000204
 8002138:	20000204 	.word	0x20000204
 800213c:	20002658 	.word	0x20002658

08002140 <ADC_IRQHandler>:
 8002140:	e7fe      	b.n	8002140 <ADC_IRQHandler>
	...

08002144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_Init+0x40>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <HAL_Init+0x40>)
 800214e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_Init+0x40>)
 800215a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800215e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <HAL_Init+0x40>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800216a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216c:	2003      	movs	r0, #3
 800216e:	f000 fecf 	bl	8002f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002172:	2000      	movs	r0, #0
 8002174:	f000 f808 	bl	8002188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002178:	f7ff fbdc 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023c00 	.word	0x40023c00

08002188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_InitTick+0x54>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_InitTick+0x58>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f000 fee7 	bl	8002f7a <HAL_SYSTICK_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00e      	b.n	80021d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d80a      	bhi.n	80021d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021bc:	2200      	movs	r2, #0
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c4:	f000 feaf 	bl	8002f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c8:	4a06      	ldr	r2, [pc, #24]	; (80021e4 <HAL_InitTick+0x5c>)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000010 	.word	0x20000010
 80021e0:	20000018 	.word	0x20000018
 80021e4:	20000014 	.word	0x20000014

080021e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_IncTick+0x20>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_IncTick+0x24>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_IncTick+0x24>)
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	20000018 	.word	0x20000018
 800220c:	200005e0 	.word	0x200005e0

08002210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return uwTick;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_GetTick+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	200005e0 	.word	0x200005e0

08002228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff ffee 	bl	8002210 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002240:	d005      	beq.n	800224e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_Delay+0x40>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800224e:	bf00      	nop
 8002250:	f7ff ffde 	bl	8002210 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	d8f7      	bhi.n	8002250 <HAL_Delay+0x28>
  {
  }
}
 8002260:	bf00      	nop
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000018 	.word	0x20000018

0800226c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e033      	b.n	80022ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d109      	bne.n	800229e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fb7a 	bl	8001984 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f003 0310 	and.w	r3, r3, #16
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d118      	bne.n	80022dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022b2:	f023 0302 	bic.w	r3, r3, #2
 80022b6:	f043 0202 	orr.w	r2, r3, #2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fbd8 	bl	8002a74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	f043 0201 	orr.w	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
 80022da:	e001      	b.n	80022e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_ADC_Start+0x1a>
 800230a:	2302      	movs	r3, #2
 800230c:	e0a5      	b.n	800245a <HAL_ADC_Start+0x166>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b01      	cmp	r3, #1
 8002322:	d018      	beq.n	8002356 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002334:	4b4c      	ldr	r3, [pc, #304]	; (8002468 <HAL_ADC_Start+0x174>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a4c      	ldr	r2, [pc, #304]	; (800246c <HAL_ADC_Start+0x178>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	0c9a      	lsrs	r2, r3, #18
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002348:	e002      	b.n	8002350 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3b01      	subs	r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f9      	bne.n	800234a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d179      	bne.n	8002458 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002382:	2b00      	cmp	r3, #0
 8002384:	d007      	beq.n	8002396 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800238e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	d106      	bne.n	80023b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	f023 0206 	bic.w	r2, r3, #6
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
 80023b0:	e002      	b.n	80023b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_ADC_Start+0x17c>)
 80023c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d12a      	bne.n	8002430 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a25      	ldr	r2, [pc, #148]	; (8002474 <HAL_ADC_Start+0x180>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d015      	beq.n	8002410 <HAL_ADC_Start+0x11c>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a23      	ldr	r2, [pc, #140]	; (8002478 <HAL_ADC_Start+0x184>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d105      	bne.n	80023fa <HAL_ADC_Start+0x106>
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_ADC_Start+0x17c>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a1f      	ldr	r2, [pc, #124]	; (800247c <HAL_ADC_Start+0x188>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d129      	bne.n	8002458 <HAL_ADC_Start+0x164>
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_ADC_Start+0x17c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 031f 	and.w	r3, r3, #31
 800240c:	2b0f      	cmp	r3, #15
 800240e:	d823      	bhi.n	8002458 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d11c      	bne.n	8002458 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	e013      	b.n	8002458 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0f      	ldr	r2, [pc, #60]	; (8002474 <HAL_ADC_Start+0x180>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d10e      	bne.n	8002458 <HAL_ADC_Start+0x164>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d107      	bne.n	8002458 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002456:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000010 	.word	0x20000010
 800246c:	431bde83 	.word	0x431bde83
 8002470:	40012300 	.word	0x40012300
 8002474:	40012000 	.word	0x40012000
 8002478:	40012100 	.word	0x40012100
 800247c:	40012200 	.word	0x40012200

08002480 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_Stop+0x16>
 8002492:	2302      	movs	r3, #2
 8002494:	e021      	b.n	80024da <HAL_ADC_Stop+0x5a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0201 	bic.w	r2, r2, #1
 80024ac:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	f043 0201 	orr.w	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002502:	d113      	bne.n	800252c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800250e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002512:	d10b      	bne.n	800252c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002518:	f043 0220 	orr.w	r2, r3, #32
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e05c      	b.n	80025e6 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800252c:	f7ff fe70 	bl	8002210 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002532:	e01a      	b.n	800256a <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800253a:	d016      	beq.n	800256a <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <HAL_ADC_PollForConversion+0x6c>
 8002542:	f7ff fe65 	bl	8002210 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d20b      	bcs.n	800256a <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f043 0204 	orr.w	r2, r3, #4
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e03d      	b.n	80025e6 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b02      	cmp	r3, #2
 8002576:	d1dd      	bne.n	8002534 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0212 	mvn.w	r2, #18
 8002580:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d123      	bne.n	80025e4 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11f      	bne.n	80025e4 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d006      	beq.n	80025c0 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d111      	bne.n	80025e4 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_ADC_Start_DMA+0x1e>
 800260a:	2302      	movs	r3, #2
 800260c:	e0cc      	b.n	80027a8 <HAL_ADC_Start_DMA+0x1b8>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b01      	cmp	r3, #1
 8002622:	d018      	beq.n	8002656 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002634:	4b5e      	ldr	r3, [pc, #376]	; (80027b0 <HAL_ADC_Start_DMA+0x1c0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a5e      	ldr	r2, [pc, #376]	; (80027b4 <HAL_ADC_Start_DMA+0x1c4>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	0c9a      	lsrs	r2, r3, #18
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002648:	e002      	b.n	8002650 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	3b01      	subs	r3, #1
 800264e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f9      	bne.n	800264a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	f040 80a0 	bne.w	80027a6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002690:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026a4:	d106      	bne.n	80026b4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026aa:	f023 0206 	bic.w	r2, r3, #6
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	645a      	str	r2, [r3, #68]	; 0x44
 80026b2:	e002      	b.n	80026ba <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026c2:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <HAL_ADC_Start_DMA+0x1c8>)
 80026c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	4a3c      	ldr	r2, [pc, #240]	; (80027bc <HAL_ADC_Start_DMA+0x1cc>)
 80026cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	4a3b      	ldr	r2, [pc, #236]	; (80027c0 <HAL_ADC_Start_DMA+0x1d0>)
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026da:	4a3a      	ldr	r2, [pc, #232]	; (80027c4 <HAL_ADC_Start_DMA+0x1d4>)
 80026dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002706:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	334c      	adds	r3, #76	; 0x4c
 8002712:	4619      	mov	r1, r3
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f000 fcea 	bl	80030f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	2b00      	cmp	r3, #0
 8002726:	d12a      	bne.n	800277e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a26      	ldr	r2, [pc, #152]	; (80027c8 <HAL_ADC_Start_DMA+0x1d8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d015      	beq.n	800275e <HAL_ADC_Start_DMA+0x16e>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a25      	ldr	r2, [pc, #148]	; (80027cc <HAL_ADC_Start_DMA+0x1dc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d105      	bne.n	8002748 <HAL_ADC_Start_DMA+0x158>
 800273c:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_ADC_Start_DMA+0x1c8>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <HAL_ADC_Start_DMA+0x1e0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d129      	bne.n	80027a6 <HAL_ADC_Start_DMA+0x1b6>
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <HAL_ADC_Start_DMA+0x1c8>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	2b0f      	cmp	r3, #15
 800275c:	d823      	bhi.n	80027a6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d11c      	bne.n	80027a6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	e013      	b.n	80027a6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <HAL_ADC_Start_DMA+0x1d8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d10e      	bne.n	80027a6 <HAL_ADC_Start_DMA+0x1b6>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d107      	bne.n	80027a6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027a4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000010 	.word	0x20000010
 80027b4:	431bde83 	.word	0x431bde83
 80027b8:	40012300 	.word	0x40012300
 80027bc:	08002c6d 	.word	0x08002c6d
 80027c0:	08002d27 	.word	0x08002d27
 80027c4:	08002d43 	.word	0x08002d43
 80027c8:	40012000 	.word	0x40012000
 80027cc:	40012100 	.word	0x40012100
 80027d0:	40012200 	.word	0x40012200

080027d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1c>
 8002828:	2302      	movs	r3, #2
 800282a:	e113      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x244>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b09      	cmp	r3, #9
 800283a:	d925      	bls.n	8002888 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68d9      	ldr	r1, [r3, #12]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	461a      	mov	r2, r3
 800284a:	4613      	mov	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	4413      	add	r3, r2
 8002850:	3b1e      	subs	r3, #30
 8002852:	2207      	movs	r2, #7
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43da      	mvns	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	400a      	ands	r2, r1
 8002860:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68d9      	ldr	r1, [r3, #12]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	b29b      	uxth	r3, r3
 8002872:	4618      	mov	r0, r3
 8002874:	4603      	mov	r3, r0
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	4403      	add	r3, r0
 800287a:	3b1e      	subs	r3, #30
 800287c:	409a      	lsls	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	e022      	b.n	80028ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6919      	ldr	r1, [r3, #16]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	4613      	mov	r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	4413      	add	r3, r2
 800289c:	2207      	movs	r2, #7
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43da      	mvns	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	400a      	ands	r2, r1
 80028aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6919      	ldr	r1, [r3, #16]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	4618      	mov	r0, r3
 80028be:	4603      	mov	r3, r0
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4403      	add	r3, r0
 80028c4:	409a      	lsls	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d824      	bhi.n	8002920 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685a      	ldr	r2, [r3, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	3b05      	subs	r3, #5
 80028e8:	221f      	movs	r2, #31
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43da      	mvns	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	400a      	ands	r2, r1
 80028f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	b29b      	uxth	r3, r3
 8002904:	4618      	mov	r0, r3
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	3b05      	subs	r3, #5
 8002912:	fa00 f203 	lsl.w	r2, r0, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	635a      	str	r2, [r3, #52]	; 0x34
 800291e:	e04c      	b.n	80029ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b0c      	cmp	r3, #12
 8002926:	d824      	bhi.n	8002972 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	3b23      	subs	r3, #35	; 0x23
 800293a:	221f      	movs	r2, #31
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43da      	mvns	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	400a      	ands	r2, r1
 8002948:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	b29b      	uxth	r3, r3
 8002956:	4618      	mov	r0, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	3b23      	subs	r3, #35	; 0x23
 8002964:	fa00 f203 	lsl.w	r2, r0, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
 8002970:	e023      	b.n	80029ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	3b41      	subs	r3, #65	; 0x41
 8002984:	221f      	movs	r2, #31
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	400a      	ands	r2, r1
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	4618      	mov	r0, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	3b41      	subs	r3, #65	; 0x41
 80029ae:	fa00 f203 	lsl.w	r2, r0, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029ba:	4b29      	ldr	r3, [pc, #164]	; (8002a60 <HAL_ADC_ConfigChannel+0x250>)
 80029bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a28      	ldr	r2, [pc, #160]	; (8002a64 <HAL_ADC_ConfigChannel+0x254>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10f      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1d8>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b12      	cmp	r3, #18
 80029ce:	d10b      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_ADC_ConfigChannel+0x254>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d12b      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x23a>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <HAL_ADC_ConfigChannel+0x258>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d003      	beq.n	8002a04 <HAL_ADC_ConfigChannel+0x1f4>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b11      	cmp	r3, #17
 8002a02:	d122      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_ADC_ConfigChannel+0x258>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d111      	bne.n	8002a4a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_ADC_ConfigChannel+0x25c>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a11      	ldr	r2, [pc, #68]	; (8002a70 <HAL_ADC_ConfigChannel+0x260>)
 8002a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a30:	0c9a      	lsrs	r2, r3, #18
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a3c:	e002      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f9      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	40012300 	.word	0x40012300
 8002a64:	40012000 	.word	0x40012000
 8002a68:	10000012 	.word	0x10000012
 8002a6c:	20000010 	.word	0x20000010
 8002a70:	431bde83 	.word	0x431bde83

08002a74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a7c:	4b79      	ldr	r3, [pc, #484]	; (8002c64 <ADC_Init+0x1f0>)
 8002a7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	021a      	lsls	r2, r3, #8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6899      	ldr	r1, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	4a58      	ldr	r2, [pc, #352]	; (8002c68 <ADC_Init+0x1f4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b1a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6899      	ldr	r1, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6899      	ldr	r1, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	e00f      	b.n	8002b72 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b70:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0202 	bic.w	r2, r2, #2
 8002b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	7e1b      	ldrb	r3, [r3, #24]
 8002b8c:	005a      	lsls	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01b      	beq.n	8002bd8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bbe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	035a      	lsls	r2, r3, #13
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	e007      	b.n	8002be8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	051a      	lsls	r2, r3, #20
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6899      	ldr	r1, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c2a:	025a      	lsls	r2, r3, #9
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6899      	ldr	r1, [r3, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	029a      	lsls	r2, r3, #10
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40012300 	.word	0x40012300
 8002c68:	0f000001 	.word	0x0f000001

08002c6c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c78:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d13c      	bne.n	8002d00 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d12b      	bne.n	8002cf8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d127      	bne.n	8002cf8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d119      	bne.n	8002cf8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0220 	bic.w	r2, r2, #32
 8002cd2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7ff fd6b 	bl	80027d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002cfe:	e00e      	b.n	8002d1e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff fd75 	bl	80027fc <HAL_ADC_ErrorCallback>
}
 8002d12:	e004      	b.n	8002d1e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff fd57 	bl	80027e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d3a:	bf00      	nop
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2240      	movs	r2, #64	; 0x40
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f043 0204 	orr.w	r2, r3, #4
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f7ff fd4a 	bl	80027fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002da2:	4a04      	ldr	r2, [pc, #16]	; (8002db4 <__NVIC_SetPriorityGrouping+0x44>)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	60d3      	str	r3, [r2, #12]
}
 8002da8:	bf00      	nop
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	0a1b      	lsrs	r3, r3, #8
 8002dc2:	f003 0307 	and.w	r3, r3, #7
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	db0b      	blt.n	8002dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	f003 021f 	and.w	r2, r3, #31
 8002dec:	4907      	ldr	r1, [pc, #28]	; (8002e0c <__NVIC_EnableIRQ+0x38>)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	095b      	lsrs	r3, r3, #5
 8002df4:	2001      	movs	r0, #1
 8002df6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000e100 	.word	0xe000e100

08002e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	6039      	str	r1, [r7, #0]
 8002e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	db0a      	blt.n	8002e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	490c      	ldr	r1, [pc, #48]	; (8002e5c <__NVIC_SetPriority+0x4c>)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	0112      	lsls	r2, r2, #4
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	440b      	add	r3, r1
 8002e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e38:	e00a      	b.n	8002e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4908      	ldr	r1, [pc, #32]	; (8002e60 <__NVIC_SetPriority+0x50>)
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	3b04      	subs	r3, #4
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	761a      	strb	r2, [r3, #24]
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	e000e100 	.word	0xe000e100
 8002e60:	e000ed00 	.word	0xe000ed00

08002e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b089      	sub	sp, #36	; 0x24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	f1c3 0307 	rsb	r3, r3, #7
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	bf28      	it	cs
 8002e82:	2304      	movcs	r3, #4
 8002e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d902      	bls.n	8002e94 <NVIC_EncodePriority+0x30>
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	3b03      	subs	r3, #3
 8002e92:	e000      	b.n	8002e96 <NVIC_EncodePriority+0x32>
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43da      	mvns	r2, r3
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43d9      	mvns	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ebc:	4313      	orrs	r3, r2
         );
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3724      	adds	r7, #36	; 0x24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
	...

08002ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002edc:	d301      	bcc.n	8002ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e00f      	b.n	8002f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <SysTick_Config+0x40>)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eea:	210f      	movs	r1, #15
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ef0:	f7ff ff8e 	bl	8002e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ef4:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <SysTick_Config+0x40>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002efa:	4b04      	ldr	r3, [pc, #16]	; (8002f0c <SysTick_Config+0x40>)
 8002efc:	2207      	movs	r2, #7
 8002efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	e000e010 	.word	0xe000e010

08002f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ff29 	bl	8002d70 <__NVIC_SetPriorityGrouping>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b086      	sub	sp, #24
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f38:	f7ff ff3e 	bl	8002db8 <__NVIC_GetPriorityGrouping>
 8002f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	6978      	ldr	r0, [r7, #20]
 8002f44:	f7ff ff8e 	bl	8002e64 <NVIC_EncodePriority>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff ff5d 	bl	8002e10 <__NVIC_SetPriority>
}
 8002f56:	bf00      	nop
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	4603      	mov	r3, r0
 8002f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff31 	bl	8002dd4 <__NVIC_EnableIRQ>
}
 8002f72:	bf00      	nop
 8002f74:	3708      	adds	r7, #8
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff ffa2 	bl	8002ecc <SysTick_Config>
 8002f88:	4603      	mov	r3, r0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fa0:	f7ff f936 	bl	8002210 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e099      	b.n	80030e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fd0:	e00f      	b.n	8002ff2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fd2:	f7ff f91d 	bl	8002210 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d908      	bls.n	8002ff2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e078      	b.n	80030e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e8      	bne.n	8002fd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	4b38      	ldr	r3, [pc, #224]	; (80030ec <HAL_DMA_Init+0x158>)
 800300c:	4013      	ands	r3, r2
 800300e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800301e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800302a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2b04      	cmp	r3, #4
 800304a:	d107      	bne.n	800305c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	4313      	orrs	r3, r2
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f023 0307 	bic.w	r3, r3, #7
 8003072:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	2b04      	cmp	r3, #4
 8003084:	d117      	bne.n	80030b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00e      	beq.n	80030b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 fa91 	bl	80035c0 <DMA_CheckFifoParam>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030b2:	2301      	movs	r3, #1
 80030b4:	e016      	b.n	80030e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fa48 	bl	8003554 <DMA_CalcBaseAndBitshift>
 80030c4:	4603      	mov	r3, r0
 80030c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	223f      	movs	r2, #63	; 0x3f
 80030ce:	409a      	lsls	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	f010803f 	.word	0xf010803f

080030f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_DMA_Start_IT+0x26>
 8003112:	2302      	movs	r3, #2
 8003114:	e040      	b.n	8003198 <HAL_DMA_Start_IT+0xa8>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d12f      	bne.n	800318a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2202      	movs	r2, #2
 800312e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f9da 	bl	80034f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	223f      	movs	r2, #63	; 0x3f
 800314a:	409a      	lsls	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0216 	orr.w	r2, r2, #22
 800315e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0208 	orr.w	r2, r2, #8
 8003176:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e005      	b.n	8003196 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003192:	2302      	movs	r3, #2
 8003194:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003196:	7dfb      	ldrb	r3, [r7, #23]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d004      	beq.n	80031be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2280      	movs	r2, #128	; 0x80
 80031b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e00c      	b.n	80031d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2205      	movs	r2, #5
 80031c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031f0:	4b92      	ldr	r3, [pc, #584]	; (800343c <HAL_DMA_IRQHandler+0x258>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a92      	ldr	r2, [pc, #584]	; (8003440 <HAL_DMA_IRQHandler+0x25c>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	0a9b      	lsrs	r3, r3, #10
 80031fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800320e:	2208      	movs	r2, #8
 8003210:	409a      	lsls	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4013      	ands	r3, r2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01a      	beq.n	8003250 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d013      	beq.n	8003250 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0204 	bic.w	r2, r2, #4
 8003236:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	2208      	movs	r2, #8
 800323e:	409a      	lsls	r2, r3
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	f043 0201 	orr.w	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	2201      	movs	r2, #1
 8003256:	409a      	lsls	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d012      	beq.n	8003286 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00b      	beq.n	8003286 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003272:	2201      	movs	r2, #1
 8003274:	409a      	lsls	r2, r3
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0202 	orr.w	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2204      	movs	r2, #4
 800328c:	409a      	lsls	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4013      	ands	r3, r2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d012      	beq.n	80032bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	2204      	movs	r2, #4
 80032aa:	409a      	lsls	r2, r3
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	f043 0204 	orr.w	r2, r3, #4
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	2210      	movs	r2, #16
 80032c2:	409a      	lsls	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d043      	beq.n	8003354 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d03c      	beq.n	8003354 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032de:	2210      	movs	r2, #16
 80032e0:	409a      	lsls	r2, r3
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d018      	beq.n	8003326 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d108      	bne.n	8003314 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	2b00      	cmp	r3, #0
 8003308:	d024      	beq.n	8003354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
 8003312:	e01f      	b.n	8003354 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003318:	2b00      	cmp	r3, #0
 800331a:	d01b      	beq.n	8003354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
 8003324:	e016      	b.n	8003354 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003330:	2b00      	cmp	r3, #0
 8003332:	d107      	bne.n	8003344 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0208 	bic.w	r2, r2, #8
 8003342:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003358:	2220      	movs	r2, #32
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 808e 	beq.w	8003482 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8086 	beq.w	8003482 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	2220      	movs	r2, #32
 800337c:	409a      	lsls	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b05      	cmp	r3, #5
 800338c:	d136      	bne.n	80033fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0216 	bic.w	r2, r2, #22
 800339c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d103      	bne.n	80033be <HAL_DMA_IRQHandler+0x1da>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d007      	beq.n	80033ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0208 	bic.w	r2, r2, #8
 80033cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d2:	223f      	movs	r2, #63	; 0x3f
 80033d4:	409a      	lsls	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d07d      	beq.n	80034ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	4798      	blx	r3
        }
        return;
 80033fa:	e078      	b.n	80034ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d01c      	beq.n	8003444 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d108      	bne.n	800342a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341c:	2b00      	cmp	r3, #0
 800341e:	d030      	beq.n	8003482 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	4798      	blx	r3
 8003428:	e02b      	b.n	8003482 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d027      	beq.n	8003482 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
 800343a:	e022      	b.n	8003482 <HAL_DMA_IRQHandler+0x29e>
 800343c:	20000010 	.word	0x20000010
 8003440:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10f      	bne.n	8003472 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0210 	bic.w	r2, r2, #16
 8003460:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	2b00      	cmp	r3, #0
 8003488:	d032      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d022      	beq.n	80034dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2205      	movs	r2, #5
 800349a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0201 	bic.w	r2, r2, #1
 80034ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3301      	adds	r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d307      	bcc.n	80034ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f2      	bne.n	80034ae <HAL_DMA_IRQHandler+0x2ca>
 80034c8:	e000      	b.n	80034cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
 80034ec:	e000      	b.n	80034f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80034ee:	bf00      	nop
    }
  }
}
 80034f0:	3718      	adds	r7, #24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop

080034f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003514:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b40      	cmp	r3, #64	; 0x40
 8003524:	d108      	bne.n	8003538 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003536:	e007      	b.n	8003548 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	3b10      	subs	r3, #16
 8003564:	4a14      	ldr	r2, [pc, #80]	; (80035b8 <DMA_CalcBaseAndBitshift+0x64>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800356e:	4a13      	ldr	r2, [pc, #76]	; (80035bc <DMA_CalcBaseAndBitshift+0x68>)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b03      	cmp	r3, #3
 8003580:	d909      	bls.n	8003596 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	1d1a      	adds	r2, r3, #4
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	659a      	str	r2, [r3, #88]	; 0x58
 8003594:	e007      	b.n	80035a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	aaaaaaab 	.word	0xaaaaaaab
 80035bc:	08009b9c 	.word	0x08009b9c

080035c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11f      	bne.n	800361a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d855      	bhi.n	800368c <DMA_CheckFifoParam+0xcc>
 80035e0:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <DMA_CheckFifoParam+0x28>)
 80035e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e6:	bf00      	nop
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	0800360b 	.word	0x0800360b
 80035f0:	080035f9 	.word	0x080035f9
 80035f4:	0800368d 	.word	0x0800368d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d045      	beq.n	8003690 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003608:	e042      	b.n	8003690 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003612:	d13f      	bne.n	8003694 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003618:	e03c      	b.n	8003694 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003622:	d121      	bne.n	8003668 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d836      	bhi.n	8003698 <DMA_CheckFifoParam+0xd8>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <DMA_CheckFifoParam+0x70>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003641 	.word	0x08003641
 8003634:	08003647 	.word	0x08003647
 8003638:	08003641 	.word	0x08003641
 800363c:	08003659 	.word	0x08003659
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      break;
 8003644:	e02f      	b.n	80036a6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d024      	beq.n	800369c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003656:	e021      	b.n	800369c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003660:	d11e      	bne.n	80036a0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003666:	e01b      	b.n	80036a0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d902      	bls.n	8003674 <DMA_CheckFifoParam+0xb4>
 800366e:	2b03      	cmp	r3, #3
 8003670:	d003      	beq.n	800367a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003672:	e018      	b.n	80036a6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      break;
 8003678:	e015      	b.n	80036a6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00e      	beq.n	80036a4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
      break;
 800368a:	e00b      	b.n	80036a4 <DMA_CheckFifoParam+0xe4>
      break;
 800368c:	bf00      	nop
 800368e:	e00a      	b.n	80036a6 <DMA_CheckFifoParam+0xe6>
      break;
 8003690:	bf00      	nop
 8003692:	e008      	b.n	80036a6 <DMA_CheckFifoParam+0xe6>
      break;
 8003694:	bf00      	nop
 8003696:	e006      	b.n	80036a6 <DMA_CheckFifoParam+0xe6>
      break;
 8003698:	bf00      	nop
 800369a:	e004      	b.n	80036a6 <DMA_CheckFifoParam+0xe6>
      break;
 800369c:	bf00      	nop
 800369e:	e002      	b.n	80036a6 <DMA_CheckFifoParam+0xe6>
      break;   
 80036a0:	bf00      	nop
 80036a2:	e000      	b.n	80036a6 <DMA_CheckFifoParam+0xe6>
      break;
 80036a4:	bf00      	nop
    }
  } 
  
  return status; 
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
 80036ce:	e165      	b.n	800399c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d0:	2201      	movs	r2, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4013      	ands	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	f040 8154 	bne.w	8003996 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d00b      	beq.n	800370e <HAL_GPIO_Init+0x5a>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d007      	beq.n	800370e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003702:	2b11      	cmp	r3, #17
 8003704:	d003      	beq.n	800370e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b12      	cmp	r3, #18
 800370c:	d130      	bne.n	8003770 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003744:	2201      	movs	r2, #1
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 0201 	and.w	r2, r3, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0xfc>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b12      	cmp	r3, #18
 80037ae:	d123      	bne.n	80037f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	08da      	lsrs	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3208      	adds	r2, #8
 80037b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	220f      	movs	r2, #15
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	08da      	lsrs	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	3208      	adds	r2, #8
 80037f2:	69b9      	ldr	r1, [r7, #24]
 80037f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	2203      	movs	r2, #3
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 0203 	and.w	r2, r3, #3
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80ae 	beq.w	8003996 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	4b5c      	ldr	r3, [pc, #368]	; (80039b0 <HAL_GPIO_Init+0x2fc>)
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	4a5b      	ldr	r2, [pc, #364]	; (80039b0 <HAL_GPIO_Init+0x2fc>)
 8003844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003848:	6453      	str	r3, [r2, #68]	; 0x44
 800384a:	4b59      	ldr	r3, [pc, #356]	; (80039b0 <HAL_GPIO_Init+0x2fc>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003856:	4a57      	ldr	r2, [pc, #348]	; (80039b4 <HAL_GPIO_Init+0x300>)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	3302      	adds	r3, #2
 800385e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	220f      	movs	r2, #15
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a4e      	ldr	r2, [pc, #312]	; (80039b8 <HAL_GPIO_Init+0x304>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d025      	beq.n	80038ce <HAL_GPIO_Init+0x21a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a4d      	ldr	r2, [pc, #308]	; (80039bc <HAL_GPIO_Init+0x308>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d01f      	beq.n	80038ca <HAL_GPIO_Init+0x216>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a4c      	ldr	r2, [pc, #304]	; (80039c0 <HAL_GPIO_Init+0x30c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d019      	beq.n	80038c6 <HAL_GPIO_Init+0x212>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a4b      	ldr	r2, [pc, #300]	; (80039c4 <HAL_GPIO_Init+0x310>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_GPIO_Init+0x20e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4a      	ldr	r2, [pc, #296]	; (80039c8 <HAL_GPIO_Init+0x314>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d00d      	beq.n	80038be <HAL_GPIO_Init+0x20a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a49      	ldr	r2, [pc, #292]	; (80039cc <HAL_GPIO_Init+0x318>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d007      	beq.n	80038ba <HAL_GPIO_Init+0x206>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a48      	ldr	r2, [pc, #288]	; (80039d0 <HAL_GPIO_Init+0x31c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_GPIO_Init+0x202>
 80038b2:	2306      	movs	r3, #6
 80038b4:	e00c      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038b6:	2307      	movs	r3, #7
 80038b8:	e00a      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038ba:	2305      	movs	r3, #5
 80038bc:	e008      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038be:	2304      	movs	r3, #4
 80038c0:	e006      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038c2:	2303      	movs	r3, #3
 80038c4:	e004      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038c6:	2302      	movs	r3, #2
 80038c8:	e002      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_GPIO_Init+0x21c>
 80038ce:	2300      	movs	r3, #0
 80038d0:	69fa      	ldr	r2, [r7, #28]
 80038d2:	f002 0203 	and.w	r2, r2, #3
 80038d6:	0092      	lsls	r2, r2, #2
 80038d8:	4093      	lsls	r3, r2
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e0:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_GPIO_Init+0x300>)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	089b      	lsrs	r3, r3, #2
 80038e6:	3302      	adds	r3, #2
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <HAL_GPIO_Init+0x320>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4013      	ands	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003912:	4a30      	ldr	r2, [pc, #192]	; (80039d4 <HAL_GPIO_Init+0x320>)
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003918:	4b2e      	ldr	r3, [pc, #184]	; (80039d4 <HAL_GPIO_Init+0x320>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800393c:	4a25      	ldr	r2, [pc, #148]	; (80039d4 <HAL_GPIO_Init+0x320>)
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003942:	4b24      	ldr	r3, [pc, #144]	; (80039d4 <HAL_GPIO_Init+0x320>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	43db      	mvns	r3, r3
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	4013      	ands	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003966:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <HAL_GPIO_Init+0x320>)
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800396c:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_GPIO_Init+0x320>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003990:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <HAL_GPIO_Init+0x320>)
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3301      	adds	r3, #1
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b0f      	cmp	r3, #15
 80039a0:	f67f ae96 	bls.w	80036d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039a4:	bf00      	nop
 80039a6:	3724      	adds	r7, #36	; 0x24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40013800 	.word	0x40013800
 80039b8:	40020000 	.word	0x40020000
 80039bc:	40020400 	.word	0x40020400
 80039c0:	40020800 	.word	0x40020800
 80039c4:	40020c00 	.word	0x40020c00
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40021400 	.word	0x40021400
 80039d0:	40021800 	.word	0x40021800
 80039d4:	40013c00 	.word	0x40013c00

080039d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	460b      	mov	r3, r1
 80039e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	e001      	b.n	80039fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
 8003a14:	4613      	mov	r3, r2
 8003a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a18:	787b      	ldrb	r3, [r7, #1]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a24:	e003      	b.n	8003a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	041a      	lsls	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	619a      	str	r2, [r3, #24]
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0cc      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a50:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d90c      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5e:	4b65      	ldr	r3, [pc, #404]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b63      	ldr	r3, [pc, #396]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0b8      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d020      	beq.n	8003ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a90:	4b59      	ldr	r3, [pc, #356]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa8:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a52      	ldr	r2, [pc, #328]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab4:	4b50      	ldr	r3, [pc, #320]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	494d      	ldr	r1, [pc, #308]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d044      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d119      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afa:	4b3f      	ldr	r3, [pc, #252]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e06f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0a:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e067      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1a:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	4934      	ldr	r1, [pc, #208]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b2c:	f7fe fb70 	bl	8002210 <HAL_GetTick>
 8003b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b32:	e00a      	b.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b34:	f7fe fb6c 	bl	8002210 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e04f      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	4b2b      	ldr	r3, [pc, #172]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 020c 	and.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1eb      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b25      	ldr	r3, [pc, #148]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d20c      	bcs.n	8003b84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e032      	b.n	8003bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b90:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4916      	ldr	r1, [pc, #88]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0308 	and.w	r3, r3, #8
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bae:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	490e      	ldr	r1, [pc, #56]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bc2:	f000 fb7f 	bl	80042c4 <HAL_RCC_GetSysClockFreq>
 8003bc6:	4601      	mov	r1, r0
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	; (8003bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <HAL_RCC_ClockConfig+0x1c0>)
 8003bd4:	5cd3      	ldrb	r3, [r2, r3]
 8003bd6:	fa21 f303 	lsr.w	r3, r1, r3
 8003bda:	4a09      	ldr	r2, [pc, #36]	; (8003c00 <HAL_RCC_ClockConfig+0x1c4>)
 8003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1c8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fad0 	bl	8002188 <HAL_InitTick>

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40023c00 	.word	0x40023c00
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	08009b84 	.word	0x08009b84
 8003c00:	20000010 	.word	0x20000010
 8003c04:	20000014 	.word	0x20000014

08003c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000010 	.word	0x20000010

08003c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c24:	f7ff fff0 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c28:	4601      	mov	r1, r0
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0a9b      	lsrs	r3, r3, #10
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4a03      	ldr	r2, [pc, #12]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c36:	5cd3      	ldrb	r3, [r2, r3]
 8003c38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40023800 	.word	0x40023800
 8003c44:	08009b94 	.word	0x08009b94

08003c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c4c:	f7ff ffdc 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c50:	4601      	mov	r1, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0b5b      	lsrs	r3, r3, #13
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4a03      	ldr	r2, [pc, #12]	; (8003c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c5e:	5cd3      	ldrb	r3, [r2, r3]
 8003c60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	08009b94 	.word	0x08009b94

08003c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08c      	sub	sp, #48	; 0x30
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d010      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003ca8:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb6:	496c      	ldr	r1, [pc, #432]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d010      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003cd6:	4b64      	ldr	r3, [pc, #400]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cdc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce4:	4960      	ldr	r1, [pc, #384]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d017      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d04:	4b58      	ldr	r3, [pc, #352]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	4955      	ldr	r1, [pc, #340]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d22:	d101      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003d24:	2301      	movs	r3, #1
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003d30:	2301      	movs	r3, #1
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d017      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d40:	4b49      	ldr	r3, [pc, #292]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4e:	4946      	ldr	r1, [pc, #280]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003d60:	2301      	movs	r3, #1
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d101      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 808a 	beq.w	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a38      	ldr	r2, [pc, #224]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8e:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d9a:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a33      	ldr	r2, [pc, #204]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003da6:	f7fe fa33 	bl	8002210 <HAL_GetTick>
 8003daa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dae:	f7fe fa2f 	bl	8002210 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e278      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dc0:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dcc:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d02f      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d028      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dfa:	4b1d      	ldr	r3, [pc, #116]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e00:	4a19      	ldr	r2, [pc, #100]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e06:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d114      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fe f9fd 	bl	8002210 <HAL_GetTick>
 8003e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fe f9f9 	bl	8002210 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e240      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0ee      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e48:	d114      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5e:	4902      	ldr	r1, [pc, #8]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	608b      	str	r3, [r1, #8]
 8003e64:	e00c      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e66:	bf00      	nop
 8003e68:	40023800 	.word	0x40023800
 8003e6c:	40007000 	.word	0x40007000
 8003e70:	42470e40 	.word	0x42470e40
 8003e74:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	4a49      	ldr	r2, [pc, #292]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e7e:	6093      	str	r3, [r2, #8]
 8003e80:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e8c:	4944      	ldr	r1, [pc, #272]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0310 	and.w	r3, r3, #16
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003ea4:	4b3f      	ldr	r3, [pc, #252]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003ea6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00a      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003eb4:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	4937      	ldr	r1, [pc, #220]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ed6:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003edc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ee4:	492e      	ldr	r1, [pc, #184]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d011      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ef8:	4b29      	ldr	r3, [pc, #164]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003efe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	4926      	ldr	r1, [pc, #152]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f16:	d101      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	491a      	ldr	r1, [pc, #104]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d011      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003f4a:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f50:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f58:	4911      	ldr	r1, [pc, #68]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f68:	d101      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d005      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7c:	f040 80ff 	bne.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f86:	f7fe f943 	bl	8002210 <HAL_GetTick>
 8003f8a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f8c:	e00e      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f8e:	f7fe f93f 	bl	8002210 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d907      	bls.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e188      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	424711e0 	.word	0x424711e0
 8003fa8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fac:	4b7e      	ldr	r3, [pc, #504]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1ea      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d028      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d124      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003fe0:	4b71      	ldr	r3, [pc, #452]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe6:	0c1b      	lsrs	r3, r3, #16
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	3301      	adds	r3, #1
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ff2:	4b6d      	ldr	r3, [pc, #436]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff8:	0e1b      	lsrs	r3, r3, #24
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	019b      	lsls	r3, r3, #6
 800400a:	431a      	orrs	r2, r3
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	085b      	lsrs	r3, r3, #1
 8004010:	3b01      	subs	r3, #1
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	431a      	orrs	r2, r3
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	071b      	lsls	r3, r3, #28
 8004022:	4961      	ldr	r1, [pc, #388]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	d004      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004048:	2b00      	cmp	r3, #0
 800404a:	d035      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004054:	d130      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004056:	4b54      	ldr	r3, [pc, #336]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004068:	4b4f      	ldr	r3, [pc, #316]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800406a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406e:	0f1b      	lsrs	r3, r3, #28
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	019b      	lsls	r3, r3, #6
 8004080:	431a      	orrs	r2, r3
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	3b01      	subs	r3, #1
 8004088:	041b      	lsls	r3, r3, #16
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	061b      	lsls	r3, r3, #24
 8004092:	431a      	orrs	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	071b      	lsls	r3, r3, #28
 8004098:	4943      	ldr	r1, [pc, #268]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040a0:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a6:	f023 021f 	bic.w	r2, r3, #31
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	3b01      	subs	r3, #1
 80040b0:	493d      	ldr	r1, [pc, #244]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d029      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040cc:	d124      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040e0:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040e6:	0f1b      	lsrs	r3, r3, #28
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	019b      	lsls	r3, r3, #6
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	085b      	lsrs	r3, r3, #1
 8004100:	3b01      	subs	r3, #1
 8004102:	041b      	lsls	r3, r3, #16
 8004104:	431a      	orrs	r2, r3
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	431a      	orrs	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	071b      	lsls	r3, r3, #28
 8004110:	4925      	ldr	r1, [pc, #148]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004120:	2b00      	cmp	r3, #0
 8004122:	d016      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	019b      	lsls	r3, r3, #6
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	085b      	lsrs	r3, r3, #1
 8004136:	3b01      	subs	r3, #1
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	061b      	lsls	r3, r3, #24
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	071b      	lsls	r3, r3, #28
 800414a:	4917      	ldr	r1, [pc, #92]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004152:	4b16      	ldr	r3, [pc, #88]	; (80041ac <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004154:	2201      	movs	r2, #1
 8004156:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004158:	f7fe f85a 	bl	8002210 <HAL_GetTick>
 800415c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004160:	f7fe f856 	bl	8002210 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e09f      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004172:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	2b01      	cmp	r3, #1
 8004182:	f040 8095 	bne.w	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004186:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800418c:	f7fe f840 	bl	8002210 <HAL_GetTick>
 8004190:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004192:	e00f      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004194:	f7fe f83c 	bl	8002210 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d908      	bls.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e085      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	42470068 	.word	0x42470068
 80041b0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041b4:	4b41      	ldr	r3, [pc, #260]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c0:	d0e8      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02b      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d127      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80041ea:	4b34      	ldr	r3, [pc, #208]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699a      	ldr	r2, [r3, #24]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	019b      	lsls	r3, r3, #6
 8004206:	431a      	orrs	r2, r3
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	3b01      	subs	r3, #1
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	431a      	orrs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	061b      	lsls	r3, r3, #24
 8004218:	4928      	ldr	r1, [pc, #160]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004220:	4b26      	ldr	r3, [pc, #152]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004226:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	3b01      	subs	r3, #1
 8004230:	021b      	lsls	r3, r3, #8
 8004232:	4922      	ldr	r1, [pc, #136]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d01d      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800424e:	d118      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	0e1b      	lsrs	r3, r3, #24
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699a      	ldr	r2, [r3, #24]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	019b      	lsls	r3, r3, #6
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	085b      	lsrs	r3, r3, #1
 8004270:	3b01      	subs	r3, #1
 8004272:	041b      	lsls	r3, r3, #16
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	061b      	lsls	r3, r3, #24
 800427a:	4910      	ldr	r1, [pc, #64]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004282:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004284:	2201      	movs	r2, #1
 8004286:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004288:	f7fd ffc2 	bl	8002210 <HAL_GetTick>
 800428c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800428e:	e008      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004290:	f7fd ffbe 	bl	8002210 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e007      	b.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042a2:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ae:	d1ef      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3730      	adds	r7, #48	; 0x30
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	42470070 	.word	0x42470070

080042c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b087      	sub	sp, #28
 80042c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80042d6:	2300      	movs	r3, #0
 80042d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042de:	4bc6      	ldr	r3, [pc, #792]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x334>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b0c      	cmp	r3, #12
 80042e8:	f200 817e 	bhi.w	80045e8 <HAL_RCC_GetSysClockFreq+0x324>
 80042ec:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <HAL_RCC_GetSysClockFreq+0x30>)
 80042ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f2:	bf00      	nop
 80042f4:	08004329 	.word	0x08004329
 80042f8:	080045e9 	.word	0x080045e9
 80042fc:	080045e9 	.word	0x080045e9
 8004300:	080045e9 	.word	0x080045e9
 8004304:	0800432f 	.word	0x0800432f
 8004308:	080045e9 	.word	0x080045e9
 800430c:	080045e9 	.word	0x080045e9
 8004310:	080045e9 	.word	0x080045e9
 8004314:	08004335 	.word	0x08004335
 8004318:	080045e9 	.word	0x080045e9
 800431c:	080045e9 	.word	0x080045e9
 8004320:	080045e9 	.word	0x080045e9
 8004324:	08004491 	.word	0x08004491
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004328:	4bb4      	ldr	r3, [pc, #720]	; (80045fc <HAL_RCC_GetSysClockFreq+0x338>)
 800432a:	613b      	str	r3, [r7, #16]
       break;
 800432c:	e15f      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800432e:	4bb4      	ldr	r3, [pc, #720]	; (8004600 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004330:	613b      	str	r3, [r7, #16]
      break;
 8004332:	e15c      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004334:	4bb0      	ldr	r3, [pc, #704]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800433c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800433e:	4bae      	ldr	r3, [pc, #696]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d04a      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434a:	4bab      	ldr	r3, [pc, #684]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x334>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	099b      	lsrs	r3, r3, #6
 8004350:	f04f 0400 	mov.w	r4, #0
 8004354:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	ea03 0501 	and.w	r5, r3, r1
 8004360:	ea04 0602 	and.w	r6, r4, r2
 8004364:	4629      	mov	r1, r5
 8004366:	4632      	mov	r2, r6
 8004368:	f04f 0300 	mov.w	r3, #0
 800436c:	f04f 0400 	mov.w	r4, #0
 8004370:	0154      	lsls	r4, r2, #5
 8004372:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004376:	014b      	lsls	r3, r1, #5
 8004378:	4619      	mov	r1, r3
 800437a:	4622      	mov	r2, r4
 800437c:	1b49      	subs	r1, r1, r5
 800437e:	eb62 0206 	sbc.w	r2, r2, r6
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	f04f 0400 	mov.w	r4, #0
 800438a:	0194      	lsls	r4, r2, #6
 800438c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004390:	018b      	lsls	r3, r1, #6
 8004392:	1a5b      	subs	r3, r3, r1
 8004394:	eb64 0402 	sbc.w	r4, r4, r2
 8004398:	f04f 0100 	mov.w	r1, #0
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	00e2      	lsls	r2, r4, #3
 80043a2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043a6:	00d9      	lsls	r1, r3, #3
 80043a8:	460b      	mov	r3, r1
 80043aa:	4614      	mov	r4, r2
 80043ac:	195b      	adds	r3, r3, r5
 80043ae:	eb44 0406 	adc.w	r4, r4, r6
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	0262      	lsls	r2, r4, #9
 80043bc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80043c0:	0259      	lsls	r1, r3, #9
 80043c2:	460b      	mov	r3, r1
 80043c4:	4614      	mov	r4, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	4621      	mov	r1, r4
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f04f 0400 	mov.w	r4, #0
 80043d0:	461a      	mov	r2, r3
 80043d2:	4623      	mov	r3, r4
 80043d4:	f7fc fc28 	bl	8000c28 <__aeabi_uldivmod>
 80043d8:	4603      	mov	r3, r0
 80043da:	460c      	mov	r4, r1
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	e049      	b.n	8004474 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e0:	4b85      	ldr	r3, [pc, #532]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x334>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	099b      	lsrs	r3, r3, #6
 80043e6:	f04f 0400 	mov.w	r4, #0
 80043ea:	f240 11ff 	movw	r1, #511	; 0x1ff
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	ea03 0501 	and.w	r5, r3, r1
 80043f6:	ea04 0602 	and.w	r6, r4, r2
 80043fa:	4629      	mov	r1, r5
 80043fc:	4632      	mov	r2, r6
 80043fe:	f04f 0300 	mov.w	r3, #0
 8004402:	f04f 0400 	mov.w	r4, #0
 8004406:	0154      	lsls	r4, r2, #5
 8004408:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800440c:	014b      	lsls	r3, r1, #5
 800440e:	4619      	mov	r1, r3
 8004410:	4622      	mov	r2, r4
 8004412:	1b49      	subs	r1, r1, r5
 8004414:	eb62 0206 	sbc.w	r2, r2, r6
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	f04f 0400 	mov.w	r4, #0
 8004420:	0194      	lsls	r4, r2, #6
 8004422:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004426:	018b      	lsls	r3, r1, #6
 8004428:	1a5b      	subs	r3, r3, r1
 800442a:	eb64 0402 	sbc.w	r4, r4, r2
 800442e:	f04f 0100 	mov.w	r1, #0
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	00e2      	lsls	r2, r4, #3
 8004438:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800443c:	00d9      	lsls	r1, r3, #3
 800443e:	460b      	mov	r3, r1
 8004440:	4614      	mov	r4, r2
 8004442:	195b      	adds	r3, r3, r5
 8004444:	eb44 0406 	adc.w	r4, r4, r6
 8004448:	f04f 0100 	mov.w	r1, #0
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	02a2      	lsls	r2, r4, #10
 8004452:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004456:	0299      	lsls	r1, r3, #10
 8004458:	460b      	mov	r3, r1
 800445a:	4614      	mov	r4, r2
 800445c:	4618      	mov	r0, r3
 800445e:	4621      	mov	r1, r4
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f04f 0400 	mov.w	r4, #0
 8004466:	461a      	mov	r2, r3
 8004468:	4623      	mov	r3, r4
 800446a:	f7fc fbdd 	bl	8000c28 <__aeabi_uldivmod>
 800446e:	4603      	mov	r3, r0
 8004470:	460c      	mov	r4, r1
 8004472:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004474:	4b60      	ldr	r3, [pc, #384]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	0c1b      	lsrs	r3, r3, #16
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	3301      	adds	r3, #1
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	613b      	str	r3, [r7, #16]
      break;
 800448e:	e0ae      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004490:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x334>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004498:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800449a:	4b57      	ldr	r3, [pc, #348]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x334>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d04a      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a6:	4b54      	ldr	r3, [pc, #336]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x334>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	099b      	lsrs	r3, r3, #6
 80044ac:	f04f 0400 	mov.w	r4, #0
 80044b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	ea03 0501 	and.w	r5, r3, r1
 80044bc:	ea04 0602 	and.w	r6, r4, r2
 80044c0:	4629      	mov	r1, r5
 80044c2:	4632      	mov	r2, r6
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	f04f 0400 	mov.w	r4, #0
 80044cc:	0154      	lsls	r4, r2, #5
 80044ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044d2:	014b      	lsls	r3, r1, #5
 80044d4:	4619      	mov	r1, r3
 80044d6:	4622      	mov	r2, r4
 80044d8:	1b49      	subs	r1, r1, r5
 80044da:	eb62 0206 	sbc.w	r2, r2, r6
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	f04f 0400 	mov.w	r4, #0
 80044e6:	0194      	lsls	r4, r2, #6
 80044e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044ec:	018b      	lsls	r3, r1, #6
 80044ee:	1a5b      	subs	r3, r3, r1
 80044f0:	eb64 0402 	sbc.w	r4, r4, r2
 80044f4:	f04f 0100 	mov.w	r1, #0
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	00e2      	lsls	r2, r4, #3
 80044fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004502:	00d9      	lsls	r1, r3, #3
 8004504:	460b      	mov	r3, r1
 8004506:	4614      	mov	r4, r2
 8004508:	195b      	adds	r3, r3, r5
 800450a:	eb44 0406 	adc.w	r4, r4, r6
 800450e:	f04f 0100 	mov.w	r1, #0
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	0262      	lsls	r2, r4, #9
 8004518:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800451c:	0259      	lsls	r1, r3, #9
 800451e:	460b      	mov	r3, r1
 8004520:	4614      	mov	r4, r2
 8004522:	4618      	mov	r0, r3
 8004524:	4621      	mov	r1, r4
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f04f 0400 	mov.w	r4, #0
 800452c:	461a      	mov	r2, r3
 800452e:	4623      	mov	r3, r4
 8004530:	f7fc fb7a 	bl	8000c28 <__aeabi_uldivmod>
 8004534:	4603      	mov	r3, r0
 8004536:	460c      	mov	r4, r1
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	e049      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453c:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x334>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	099b      	lsrs	r3, r3, #6
 8004542:	f04f 0400 	mov.w	r4, #0
 8004546:	f240 11ff 	movw	r1, #511	; 0x1ff
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	ea03 0501 	and.w	r5, r3, r1
 8004552:	ea04 0602 	and.w	r6, r4, r2
 8004556:	4629      	mov	r1, r5
 8004558:	4632      	mov	r2, r6
 800455a:	f04f 0300 	mov.w	r3, #0
 800455e:	f04f 0400 	mov.w	r4, #0
 8004562:	0154      	lsls	r4, r2, #5
 8004564:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004568:	014b      	lsls	r3, r1, #5
 800456a:	4619      	mov	r1, r3
 800456c:	4622      	mov	r2, r4
 800456e:	1b49      	subs	r1, r1, r5
 8004570:	eb62 0206 	sbc.w	r2, r2, r6
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	f04f 0400 	mov.w	r4, #0
 800457c:	0194      	lsls	r4, r2, #6
 800457e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004582:	018b      	lsls	r3, r1, #6
 8004584:	1a5b      	subs	r3, r3, r1
 8004586:	eb64 0402 	sbc.w	r4, r4, r2
 800458a:	f04f 0100 	mov.w	r1, #0
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	00e2      	lsls	r2, r4, #3
 8004594:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004598:	00d9      	lsls	r1, r3, #3
 800459a:	460b      	mov	r3, r1
 800459c:	4614      	mov	r4, r2
 800459e:	195b      	adds	r3, r3, r5
 80045a0:	eb44 0406 	adc.w	r4, r4, r6
 80045a4:	f04f 0100 	mov.w	r1, #0
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	02a2      	lsls	r2, r4, #10
 80045ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045b2:	0299      	lsls	r1, r3, #10
 80045b4:	460b      	mov	r3, r1
 80045b6:	4614      	mov	r4, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	4621      	mov	r1, r4
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f04f 0400 	mov.w	r4, #0
 80045c2:	461a      	mov	r2, r3
 80045c4:	4623      	mov	r3, r4
 80045c6:	f7fc fb2f 	bl	8000c28 <__aeabi_uldivmod>
 80045ca:	4603      	mov	r3, r0
 80045cc:	460c      	mov	r4, r1
 80045ce:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x334>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	0f1b      	lsrs	r3, r3, #28
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	613b      	str	r3, [r7, #16]
      break;
 80045e6:	e002      	b.n	80045ee <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <HAL_RCC_GetSysClockFreq+0x338>)
 80045ea:	613b      	str	r3, [r7, #16]
      break;
 80045ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ee:	693b      	ldr	r3, [r7, #16]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f8:	40023800 	.word	0x40023800
 80045fc:	00f42400 	.word	0x00f42400
 8004600:	007a1200 	.word	0x007a1200

08004604 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8083 	beq.w	8004724 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800461e:	4b95      	ldr	r3, [pc, #596]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 030c 	and.w	r3, r3, #12
 8004626:	2b04      	cmp	r3, #4
 8004628:	d019      	beq.n	800465e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800462a:	4b92      	ldr	r3, [pc, #584]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004632:	2b08      	cmp	r3, #8
 8004634:	d106      	bne.n	8004644 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004636:	4b8f      	ldr	r3, [pc, #572]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004642:	d00c      	beq.n	800465e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004644:	4b8b      	ldr	r3, [pc, #556]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800464c:	2b0c      	cmp	r3, #12
 800464e:	d112      	bne.n	8004676 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004650:	4b88      	ldr	r3, [pc, #544]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800465c:	d10b      	bne.n	8004676 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465e:	4b85      	ldr	r3, [pc, #532]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d05b      	beq.n	8004722 <HAL_RCC_OscConfig+0x11e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d157      	bne.n	8004722 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e216      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x8a>
 8004680:	4b7c      	ldr	r3, [pc, #496]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a7b      	ldr	r2, [pc, #492]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	e01d      	b.n	80046ca <HAL_RCC_OscConfig+0xc6>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004696:	d10c      	bne.n	80046b2 <HAL_RCC_OscConfig+0xae>
 8004698:	4b76      	ldr	r3, [pc, #472]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a75      	ldr	r2, [pc, #468]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 800469e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	4b73      	ldr	r3, [pc, #460]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a72      	ldr	r2, [pc, #456]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 80046aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ae:	6013      	str	r3, [r2, #0]
 80046b0:	e00b      	b.n	80046ca <HAL_RCC_OscConfig+0xc6>
 80046b2:	4b70      	ldr	r3, [pc, #448]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a6f      	ldr	r2, [pc, #444]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 80046b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b6d      	ldr	r3, [pc, #436]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6c      	ldr	r2, [pc, #432]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 80046c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d013      	beq.n	80046fa <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fd fd9d 	bl	8002210 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046da:	f7fd fd99 	bl	8002210 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b64      	cmp	r3, #100	; 0x64
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e1db      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ec:	4b61      	ldr	r3, [pc, #388]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0xd6>
 80046f8:	e014      	b.n	8004724 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fa:	f7fd fd89 	bl	8002210 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004702:	f7fd fd85 	bl	8002210 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b64      	cmp	r3, #100	; 0x64
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e1c7      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004714:	4b57      	ldr	r3, [pc, #348]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f0      	bne.n	8004702 <HAL_RCC_OscConfig+0xfe>
 8004720:	e000      	b.n	8004724 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004722:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d06f      	beq.n	8004810 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004730:	4b50      	ldr	r3, [pc, #320]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 030c 	and.w	r3, r3, #12
 8004738:	2b00      	cmp	r3, #0
 800473a:	d017      	beq.n	800476c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800473c:	4b4d      	ldr	r3, [pc, #308]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004744:	2b08      	cmp	r3, #8
 8004746:	d105      	bne.n	8004754 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004748:	4b4a      	ldr	r3, [pc, #296]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00b      	beq.n	800476c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004754:	4b47      	ldr	r3, [pc, #284]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800475c:	2b0c      	cmp	r3, #12
 800475e:	d11c      	bne.n	800479a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004760:	4b44      	ldr	r3, [pc, #272]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d116      	bne.n	800479a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800476c:	4b41      	ldr	r3, [pc, #260]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_RCC_OscConfig+0x180>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d001      	beq.n	8004784 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e18f      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004784:	4b3b      	ldr	r3, [pc, #236]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	4938      	ldr	r1, [pc, #224]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004794:	4313      	orrs	r3, r2
 8004796:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004798:	e03a      	b.n	8004810 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d020      	beq.n	80047e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047a2:	4b35      	ldr	r3, [pc, #212]	; (8004878 <HAL_RCC_OscConfig+0x274>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fd fd32 	bl	8002210 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b0:	f7fd fd2e 	bl	8002210 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e170      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c2:	4b2c      	ldr	r3, [pc, #176]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ce:	4b29      	ldr	r3, [pc, #164]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	4925      	ldr	r1, [pc, #148]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	600b      	str	r3, [r1, #0]
 80047e2:	e015      	b.n	8004810 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e4:	4b24      	ldr	r3, [pc, #144]	; (8004878 <HAL_RCC_OscConfig+0x274>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ea:	f7fd fd11 	bl	8002210 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047f2:	f7fd fd0d 	bl	8002210 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e14f      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004804:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f0      	bne.n	80047f2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d037      	beq.n	800488c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d016      	beq.n	8004852 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004824:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_RCC_OscConfig+0x278>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482a:	f7fd fcf1 	bl	8002210 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004832:	f7fd fced 	bl	8002210 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e12f      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004844:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <HAL_RCC_OscConfig+0x270>)
 8004846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x22e>
 8004850:	e01c      	b.n	800488c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <HAL_RCC_OscConfig+0x278>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fd fcda 	bl	8002210 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800485e:	e00f      	b.n	8004880 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004860:	f7fd fcd6 	bl	8002210 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d908      	bls.n	8004880 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e118      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	42470000 	.word	0x42470000
 800487c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004880:	4b8a      	ldr	r3, [pc, #552]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1e9      	bne.n	8004860 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8097 	beq.w	80049c8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800489a:	2300      	movs	r3, #0
 800489c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489e:	4b83      	ldr	r3, [pc, #524]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10f      	bne.n	80048ca <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	4b7f      	ldr	r3, [pc, #508]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a7e      	ldr	r2, [pc, #504]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b7c      	ldr	r3, [pc, #496]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048c6:	2301      	movs	r3, #1
 80048c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ca:	4b79      	ldr	r3, [pc, #484]	; (8004ab0 <HAL_RCC_OscConfig+0x4ac>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d118      	bne.n	8004908 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048d6:	4b76      	ldr	r3, [pc, #472]	; (8004ab0 <HAL_RCC_OscConfig+0x4ac>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a75      	ldr	r2, [pc, #468]	; (8004ab0 <HAL_RCC_OscConfig+0x4ac>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e2:	f7fd fc95 	bl	8002210 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ea:	f7fd fc91 	bl	8002210 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0d3      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	4b6c      	ldr	r3, [pc, #432]	; (8004ab0 <HAL_RCC_OscConfig+0x4ac>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d106      	bne.n	800491e <HAL_RCC_OscConfig+0x31a>
 8004910:	4b66      	ldr	r3, [pc, #408]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	4a65      	ldr	r2, [pc, #404]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6713      	str	r3, [r2, #112]	; 0x70
 800491c:	e01c      	b.n	8004958 <HAL_RCC_OscConfig+0x354>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b05      	cmp	r3, #5
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x33c>
 8004926:	4b61      	ldr	r3, [pc, #388]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	4a60      	ldr	r2, [pc, #384]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 800492c:	f043 0304 	orr.w	r3, r3, #4
 8004930:	6713      	str	r3, [r2, #112]	; 0x70
 8004932:	4b5e      	ldr	r3, [pc, #376]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	4a5d      	ldr	r2, [pc, #372]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	6713      	str	r3, [r2, #112]	; 0x70
 800493e:	e00b      	b.n	8004958 <HAL_RCC_OscConfig+0x354>
 8004940:	4b5a      	ldr	r3, [pc, #360]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	4a59      	ldr	r2, [pc, #356]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	6713      	str	r3, [r2, #112]	; 0x70
 800494c:	4b57      	ldr	r3, [pc, #348]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 800494e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004950:	4a56      	ldr	r2, [pc, #344]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004952:	f023 0304 	bic.w	r3, r3, #4
 8004956:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d015      	beq.n	800498c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fd fc56 	bl	8002210 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004966:	e00a      	b.n	800497e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004968:	f7fd fc52 	bl	8002210 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	f241 3288 	movw	r2, #5000	; 0x1388
 8004976:	4293      	cmp	r3, r2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e092      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497e:	4b4b      	ldr	r3, [pc, #300]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0ee      	beq.n	8004968 <HAL_RCC_OscConfig+0x364>
 800498a:	e014      	b.n	80049b6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498c:	f7fd fc40 	bl	8002210 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004992:	e00a      	b.n	80049aa <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004994:	f7fd fc3c 	bl	8002210 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e07c      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049aa:	4b40      	ldr	r3, [pc, #256]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1ee      	bne.n	8004994 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d105      	bne.n	80049c8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049bc:	4b3b      	ldr	r3, [pc, #236]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 80049c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d068      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049d0:	4b36      	ldr	r3, [pc, #216]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d060      	beq.n	8004a9e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d145      	bne.n	8004a70 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e4:	4b33      	ldr	r3, [pc, #204]	; (8004ab4 <HAL_RCC_OscConfig+0x4b0>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ea:	f7fd fc11 	bl	8002210 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049f2:	f7fd fc0d 	bl	8002210 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e04f      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a04:	4b29      	ldr	r3, [pc, #164]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f0      	bne.n	80049f2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	019b      	lsls	r3, r3, #6
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	041b      	lsls	r3, r3, #16
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	061b      	lsls	r3, r3, #24
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	071b      	lsls	r3, r3, #28
 8004a3c:	491b      	ldr	r1, [pc, #108]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a42:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <HAL_RCC_OscConfig+0x4b0>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fd fbe2 	bl	8002210 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fd fbde 	bl	8002210 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e020      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a62:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x44c>
 8004a6e:	e018      	b.n	8004aa2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a70:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <HAL_RCC_OscConfig+0x4b0>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a76:	f7fd fbcb 	bl	8002210 <HAL_GetTick>
 8004a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a7e:	f7fd fbc7 	bl	8002210 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e009      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a90:	4b06      	ldr	r3, [pc, #24]	; (8004aac <HAL_RCC_OscConfig+0x4a8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1f0      	bne.n	8004a7e <HAL_RCC_OscConfig+0x47a>
 8004a9c:	e001      	b.n	8004aa2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40023800 	.word	0x40023800
 8004ab0:	40007000 	.word	0x40007000
 8004ab4:	42470060 	.word	0x42470060

08004ab8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e083      	b.n	8004bd2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	7f5b      	ldrb	r3, [r3, #29]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d105      	bne.n	8004ae0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7fc ffca 	bl	8001a74 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	22ca      	movs	r2, #202	; 0xca
 8004aec:	625a      	str	r2, [r3, #36]	; 0x24
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2253      	movs	r2, #83	; 0x53
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 faa8 	bl	800504c <RTC_EnterInitMode>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	22ff      	movs	r2, #255	; 0xff
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e05e      	b.n	8004bd2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b26:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6899      	ldr	r1, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	695b      	ldr	r3, [r3, #20]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68d2      	ldr	r2, [r2, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6919      	ldr	r1, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	041a      	lsls	r2, r3, #16
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b72:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10e      	bne.n	8004ba0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa3a 	bl	8004ffc <HAL_RTC_WaitForSynchro>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	22ff      	movs	r2, #255	; 0xff
 8004b94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e018      	b.n	8004bd2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bae:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	22ff      	movs	r2, #255	; 0xff
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
  }
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004bda:	b590      	push	{r4, r7, lr}
 8004bdc:	b087      	sub	sp, #28
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	7f1b      	ldrb	r3, [r3, #28]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_RTC_SetTime+0x1c>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e0aa      	b.n	8004d4c <HAL_RTC_SetTime+0x172>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d126      	bne.n	8004c56 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fa3f 	bl	80050a4 <RTC_ByteToBcd2>
 8004c26:	4603      	mov	r3, r0
 8004c28:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	785b      	ldrb	r3, [r3, #1]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fa38 	bl	80050a4 <RTC_ByteToBcd2>
 8004c34:	4603      	mov	r3, r0
 8004c36:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c38:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	789b      	ldrb	r3, [r3, #2]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fa30 	bl	80050a4 <RTC_ByteToBcd2>
 8004c44:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c46:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	78db      	ldrb	r3, [r3, #3]
 8004c4e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	e018      	b.n	8004c88 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d102      	bne.n	8004c6a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2200      	movs	r2, #0
 8004c68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c76:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c7c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	78db      	ldrb	r3, [r3, #3]
 8004c82:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	22ca      	movs	r2, #202	; 0xca
 8004c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2253      	movs	r2, #83	; 0x53
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 f9d7 	bl	800504c <RTC_EnterInitMode>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00b      	beq.n	8004cbc <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	22ff      	movs	r2, #255	; 0xff
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e047      	b.n	8004d4c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004cc6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004cca:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689a      	ldr	r2, [r3, #8]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cda:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6899      	ldr	r1, [r3, #8]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d02:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d111      	bne.n	8004d36 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f972 	bl	8004ffc <HAL_RTC_WaitForSynchro>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	22ff      	movs	r2, #255	; 0xff
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e00a      	b.n	8004d4c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	22ff      	movs	r2, #255	; 0xff
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
  }
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	371c      	adds	r7, #28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd90      	pop	{r4, r7, pc}

08004d54 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d86:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	0c1b      	lsrs	r3, r3, #16
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da6:	b2da      	uxtb	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	0c1b      	lsrs	r3, r3, #16
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	b2da      	uxtb	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d11a      	bne.n	8004e06 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f983 	bl	80050e0 <RTC_Bcd2ToByte>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	785b      	ldrb	r3, [r3, #1]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f97a 	bl	80050e0 <RTC_Bcd2ToByte>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	789b      	ldrb	r3, [r3, #2]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f971 	bl	80050e0 <RTC_Bcd2ToByte>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	461a      	mov	r2, r3
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	7f1b      	ldrb	r3, [r3, #28]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d101      	bne.n	8004e2c <HAL_RTC_SetDate+0x1c>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e094      	b.n	8004f56 <HAL_RTC_SetDate+0x146>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2202      	movs	r2, #2
 8004e36:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10e      	bne.n	8004e5c <HAL_RTC_SetDate+0x4c>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	785b      	ldrb	r3, [r3, #1]
 8004e4e:	f023 0310 	bic.w	r3, r3, #16
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	330a      	adds	r3, #10
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d11c      	bne.n	8004e9c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	78db      	ldrb	r3, [r3, #3]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 f91c 	bl	80050a4 <RTC_ByteToBcd2>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 f915 	bl	80050a4 <RTC_ByteToBcd2>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e7e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	789b      	ldrb	r3, [r3, #2]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 f90d 	bl	80050a4 <RTC_ByteToBcd2>
 8004e8a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004e8c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	e00e      	b.n	8004eba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	78db      	ldrb	r3, [r3, #3]
 8004ea0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ea8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004eae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	22ca      	movs	r2, #202	; 0xca
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2253      	movs	r2, #83	; 0x53
 8004ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f8be 	bl	800504c <RTC_EnterInitMode>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00b      	beq.n	8004eee <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	22ff      	movs	r2, #255	; 0xff
 8004edc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e033      	b.n	8004f56 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ef8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004efc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68da      	ldr	r2, [r3, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f0c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 0320 	and.w	r3, r3, #32
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d111      	bne.n	8004f40 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f86d 	bl	8004ffc <HAL_RTC_WaitForSynchro>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00b      	beq.n	8004f40 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	22ff      	movs	r2, #255	; 0xff
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2204      	movs	r2, #4
 8004f34:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e00a      	b.n	8004f56 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	22ff      	movs	r2, #255	; 0xff
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004f54:	2300      	movs	r3, #0
  }
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd90      	pop	{r4, r7, pc}

08004f5e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	f003 031f 	and.w	r3, r3, #31
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	0b5b      	lsrs	r3, r3, #13
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	f003 0307 	and.w	r3, r3, #7
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d11a      	bne.n	8004ff2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	78db      	ldrb	r3, [r3, #3]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 f88d 	bl	80050e0 <RTC_Bcd2ToByte>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	785b      	ldrb	r3, [r3, #1]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 f884 	bl	80050e0 <RTC_Bcd2ToByte>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	789b      	ldrb	r3, [r3, #2]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 f87b 	bl	80050e0 <RTC_Bcd2ToByte>
 8004fea:	4603      	mov	r3, r0
 8004fec:	461a      	mov	r2, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005016:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005018:	f7fd f8fa 	bl	8002210 <HAL_GetTick>
 800501c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800501e:	e009      	b.n	8005034 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005020:	f7fd f8f6 	bl	8002210 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800502e:	d901      	bls.n	8005034 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e007      	b.n	8005044 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0ee      	beq.n	8005020 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d119      	bne.n	800509a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800506e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005070:	f7fd f8ce 	bl	8002210 <HAL_GetTick>
 8005074:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005076:	e009      	b.n	800508c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005078:	f7fd f8ca 	bl	8002210 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005086:	d901      	bls.n	800508c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e007      	b.n	800509c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0ee      	beq.n	8005078 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80050b2:	e005      	b.n	80050c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3301      	adds	r3, #1
 80050b8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	3b0a      	subs	r3, #10
 80050be:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	2b09      	cmp	r3, #9
 80050c4:	d8f6      	bhi.n	80050b4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	b2db      	uxtb	r3, r3
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	4603      	mov	r3, r0
 80050e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	091b      	lsrs	r3, r3, #4
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	b2da      	uxtb	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	4413      	add	r3, r2
 800510e:	b2db      	uxtb	r3, r3
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3350      	adds	r3, #80	; 0x50
 8005132:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4413      	add	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	371c      	adds	r7, #28
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e01d      	b.n	800519e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fc fc92 	bl	8001aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f000 f82e 	bl	80051f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3708      	adds	r7, #8
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b085      	sub	sp, #20
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b06      	cmp	r3, #6
 80051c6:	d007      	beq.n	80051d8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a40      	ldr	r2, [pc, #256]	; (8005304 <TIM_Base_SetConfig+0x114>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d013      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520e:	d00f      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a3d      	ldr	r2, [pc, #244]	; (8005308 <TIM_Base_SetConfig+0x118>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00b      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a3c      	ldr	r2, [pc, #240]	; (800530c <TIM_Base_SetConfig+0x11c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d007      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a3b      	ldr	r2, [pc, #236]	; (8005310 <TIM_Base_SetConfig+0x120>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d003      	beq.n	8005230 <TIM_Base_SetConfig+0x40>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a3a      	ldr	r2, [pc, #232]	; (8005314 <TIM_Base_SetConfig+0x124>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d108      	bne.n	8005242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a2f      	ldr	r2, [pc, #188]	; (8005304 <TIM_Base_SetConfig+0x114>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d02b      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d027      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2c      	ldr	r2, [pc, #176]	; (8005308 <TIM_Base_SetConfig+0x118>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d023      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2b      	ldr	r2, [pc, #172]	; (800530c <TIM_Base_SetConfig+0x11c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01f      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2a      	ldr	r2, [pc, #168]	; (8005310 <TIM_Base_SetConfig+0x120>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d01b      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a29      	ldr	r2, [pc, #164]	; (8005314 <TIM_Base_SetConfig+0x124>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d017      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a28      	ldr	r2, [pc, #160]	; (8005318 <TIM_Base_SetConfig+0x128>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a27      	ldr	r2, [pc, #156]	; (800531c <TIM_Base_SetConfig+0x12c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00f      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <TIM_Base_SetConfig+0x130>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00b      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a25      	ldr	r2, [pc, #148]	; (8005324 <TIM_Base_SetConfig+0x134>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d007      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a24      	ldr	r2, [pc, #144]	; (8005328 <TIM_Base_SetConfig+0x138>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d003      	beq.n	80052a2 <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a23      	ldr	r2, [pc, #140]	; (800532c <TIM_Base_SetConfig+0x13c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d108      	bne.n	80052b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	689a      	ldr	r2, [r3, #8]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <TIM_Base_SetConfig+0x114>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_Base_SetConfig+0xf8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a0c      	ldr	r2, [pc, #48]	; (8005314 <TIM_Base_SetConfig+0x124>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d103      	bne.n	80052f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	615a      	str	r2, [r3, #20]
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40010000 	.word	0x40010000
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40010400 	.word	0x40010400
 8005318:	40014000 	.word	0x40014000
 800531c:	40014400 	.word	0x40014400
 8005320:	40014800 	.word	0x40014800
 8005324:	40001800 	.word	0x40001800
 8005328:	40001c00 	.word	0x40001c00
 800532c:	40002000 	.word	0x40002000

08005330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005344:	2302      	movs	r3, #2
 8005346:	e05a      	b.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	4313      	orrs	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a21      	ldr	r2, [pc, #132]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d022      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005394:	d01d      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1d      	ldr	r2, [pc, #116]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d018      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a1b      	ldr	r2, [pc, #108]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1a      	ldr	r2, [pc, #104]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a18      	ldr	r2, [pc, #96]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a17      	ldr	r2, [pc, #92]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d10c      	bne.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000
 8005410:	40000400 	.word	0x40000400
 8005414:	40000800 	.word	0x40000800
 8005418:	40000c00 	.word	0x40000c00
 800541c:	40010400 	.word	0x40010400
 8005420:	40014000 	.word	0x40014000
 8005424:	40001800 	.word	0x40001800

08005428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e03f      	b.n	80054ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc fb74 	bl	8001b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2224      	movs	r2, #36	; 0x24
 8005458:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68da      	ldr	r2, [r3, #12]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800546a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fbf1 	bl	8005c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695a      	ldr	r2, [r3, #20]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2220      	movs	r2, #32
 80054b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b088      	sub	sp, #32
 80054c6:	af02      	add	r7, sp, #8
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b20      	cmp	r3, #32
 80054e0:	f040 8083 	bne.w	80055ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d002      	beq.n	80054f0 <HAL_UART_Transmit+0x2e>
 80054ea:	88fb      	ldrh	r3, [r7, #6]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d101      	bne.n	80054f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e07b      	b.n	80055ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d101      	bne.n	8005502 <HAL_UART_Transmit+0x40>
 80054fe:	2302      	movs	r3, #2
 8005500:	e074      	b.n	80055ec <HAL_UART_Transmit+0x12a>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2221      	movs	r2, #33	; 0x21
 8005514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005518:	f7fc fe7a 	bl	8002210 <HAL_GetTick>
 800551c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	88fa      	ldrh	r2, [r7, #6]
 8005522:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	88fa      	ldrh	r2, [r7, #6]
 8005528:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005532:	e042      	b.n	80055ba <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554a:	d122      	bne.n	8005592 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	2200      	movs	r2, #0
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f000 fa10 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e042      	b.n	80055ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005578:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	3302      	adds	r3, #2
 8005586:	60bb      	str	r3, [r7, #8]
 8005588:	e017      	b.n	80055ba <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	3301      	adds	r3, #1
 800558e:	60bb      	str	r3, [r7, #8]
 8005590:	e013      	b.n	80055ba <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	2200      	movs	r2, #0
 800559a:	2180      	movs	r1, #128	; 0x80
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f9ed 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e01f      	b.n	80055ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	60ba      	str	r2, [r7, #8]
 80055b2:	781a      	ldrb	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1b7      	bne.n	8005534 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	9300      	str	r3, [sp, #0]
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2200      	movs	r2, #0
 80055cc:	2140      	movs	r1, #64	; 0x40
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f9d4 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e006      	b.n	80055ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e000      	b.n	80055ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80055ea:	2302      	movs	r3, #2
  }
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af02      	add	r7, sp, #8
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	4613      	mov	r3, r2
 8005602:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b20      	cmp	r3, #32
 8005612:	f040 8090 	bne.w	8005736 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_UART_Receive+0x2e>
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e088      	b.n	8005738 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800562c:	2b01      	cmp	r3, #1
 800562e:	d101      	bne.n	8005634 <HAL_UART_Receive+0x40>
 8005630:	2302      	movs	r3, #2
 8005632:	e081      	b.n	8005738 <HAL_UART_Receive+0x144>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2222      	movs	r2, #34	; 0x22
 8005646:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800564a:	f7fc fde1 	bl	8002210 <HAL_GetTick>
 800564e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	88fa      	ldrh	r2, [r7, #6]
 800565a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005664:	e05c      	b.n	8005720 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800567c:	d12b      	bne.n	80056d6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	2120      	movs	r1, #32
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f977 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e04f      	b.n	8005738 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10c      	bne.n	80056be <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	3302      	adds	r3, #2
 80056ba:	60bb      	str	r3, [r7, #8]
 80056bc:	e030      	b.n	8005720 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	3301      	adds	r3, #1
 80056d2:	60bb      	str	r3, [r7, #8]
 80056d4:	e024      	b.n	8005720 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	2200      	movs	r2, #0
 80056de:	2120      	movs	r1, #32
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f94b 	bl	800597c <UART_WaitOnFlagUntilTimeout>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e023      	b.n	8005738 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d108      	bne.n	800570a <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	60ba      	str	r2, [r7, #8]
 8005704:	b2ca      	uxtb	r2, r1
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	e00a      	b.n	8005720 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	1c59      	adds	r1, r3, #1
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800571c:	b2d2      	uxtb	r2, r2
 800571e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d19d      	bne.n	8005666 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	e000      	b.n	8005738 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005736:	2302      	movs	r3, #2
  }
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b088      	sub	sp, #32
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f003 030f 	and.w	r3, r3, #15
 800576e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b00      	cmp	r3, #0
 800577e:	d008      	beq.n	8005792 <HAL_UART_IRQHandler+0x52>
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f9e0 	bl	8005b50 <UART_Receive_IT>
      return;
 8005790:	e0d1      	b.n	8005936 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80b0 	beq.w	80058fa <HAL_UART_IRQHandler+0x1ba>
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d105      	bne.n	80057b0 <HAL_UART_IRQHandler+0x70>
 80057a4:	69bb      	ldr	r3, [r7, #24]
 80057a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f000 80a5 	beq.w	80058fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <HAL_UART_IRQHandler+0x90>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c8:	f043 0201 	orr.w	r2, r3, #1
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	f003 0304 	and.w	r3, r3, #4
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_UART_IRQHandler+0xb0>
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e8:	f043 0202 	orr.w	r2, r3, #2
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	f003 0302 	and.w	r3, r3, #2
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <HAL_UART_IRQHandler+0xd0>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	f043 0204 	orr.w	r2, r3, #4
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00f      	beq.n	800583a <HAL_UART_IRQHandler+0xfa>
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	f003 0320 	and.w	r3, r3, #32
 8005820:	2b00      	cmp	r3, #0
 8005822:	d104      	bne.n	800582e <HAL_UART_IRQHandler+0xee>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	f043 0208 	orr.w	r2, r3, #8
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d078      	beq.n	8005934 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d007      	beq.n	800585c <HAL_UART_IRQHandler+0x11c>
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f97a 	bl	8005b50 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b40      	cmp	r3, #64	; 0x40
 8005868:	bf0c      	ite	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	2300      	movne	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d102      	bne.n	8005884 <HAL_UART_IRQHandler+0x144>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d031      	beq.n	80058e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f8c3 	bl	8005a10 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d123      	bne.n	80058e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695a      	ldr	r2, [r3, #20]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d013      	beq.n	80058d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	4a21      	ldr	r2, [pc, #132]	; (800593c <HAL_UART_IRQHandler+0x1fc>)
 80058b6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058bc:	4618      	mov	r0, r3
 80058be:	f7fd fc6f 	bl	80031a0 <HAL_DMA_Abort_IT>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d016      	beq.n	80058f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058d2:	4610      	mov	r0, r2
 80058d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d6:	e00e      	b.n	80058f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f845 	bl	8005968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058de:	e00a      	b.n	80058f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f841 	bl	8005968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e6:	e006      	b.n	80058f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f83d 	bl	8005968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80058f4:	e01e      	b.n	8005934 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f6:	bf00      	nop
    return;
 80058f8:	e01c      	b.n	8005934 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	2b00      	cmp	r3, #0
 8005902:	d008      	beq.n	8005916 <HAL_UART_IRQHandler+0x1d6>
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8b0 	bl	8005a74 <UART_Transmit_IT>
    return;
 8005914:	e00f      	b.n	8005936 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_UART_IRQHandler+0x1f6>
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d005      	beq.n	8005936 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f8f8 	bl	8005b20 <UART_EndTransmit_IT>
    return;
 8005930:	bf00      	nop
 8005932:	e000      	b.n	8005936 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005934:	bf00      	nop
  }
}
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	08005a4d 	.word	0x08005a4d

08005940 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	4613      	mov	r3, r2
 800598a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598c:	e02c      	b.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005994:	d028      	beq.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d007      	beq.n	80059ac <UART_WaitOnFlagUntilTimeout+0x30>
 800599c:	f7fc fc38 	bl	8002210 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d21d      	bcs.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68da      	ldr	r2, [r3, #12]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e00f      	b.n	8005a08 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4013      	ands	r3, r2
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	79fb      	ldrb	r3, [r7, #7]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d0c3      	beq.n	800598e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a26:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	695a      	ldr	r2, [r3, #20]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0201 	bic.w	r2, r2, #1
 8005a36:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f7ff ff7e 	bl	8005968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b21      	cmp	r3, #33	; 0x21
 8005a86:	d144      	bne.n	8005b12 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a90:	d11a      	bne.n	8005ac8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d105      	bne.n	8005abc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	1c9a      	adds	r2, r3, #2
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	621a      	str	r2, [r3, #32]
 8005aba:	e00e      	b.n	8005ada <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]
 8005ac6:	e008      	b.n	8005ada <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	1c59      	adds	r1, r3, #1
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	6211      	str	r1, [r2, #32]
 8005ad2:	781a      	ldrb	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10f      	bne.n	8005b0e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005afc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b0c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e000      	b.n	8005b14 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b12:	2302      	movs	r3, #2
  }
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b36:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff fefd 	bl	8005940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b22      	cmp	r3, #34	; 0x22
 8005b62:	d171      	bne.n	8005c48 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6c:	d123      	bne.n	8005bb6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10e      	bne.n	8005b9a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	1c9a      	adds	r2, r3, #2
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	629a      	str	r2, [r3, #40]	; 0x28
 8005b98:	e029      	b.n	8005bee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8005bb4:	e01b      	b.n	8005bee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6858      	ldr	r0, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	1c59      	adds	r1, r3, #1
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	6291      	str	r1, [r2, #40]	; 0x28
 8005bce:	b2c2      	uxtb	r2, r0
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	e00c      	b.n	8005bee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	1c58      	adds	r0, r3, #1
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	6288      	str	r0, [r1, #40]	; 0x28
 8005be6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bea:	b2d2      	uxtb	r2, r2
 8005bec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d120      	bne.n	8005c44 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0220 	bic.w	r2, r2, #32
 8005c10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	695a      	ldr	r2, [r3, #20]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fe8a 	bl	8005954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	e002      	b.n	8005c4a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005c44:	2300      	movs	r3, #0
 8005c46:	e000      	b.n	8005c4a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005c48:	2302      	movs	r3, #2
  }
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c58:	b085      	sub	sp, #20
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c96:	f023 030c 	bic.w	r3, r3, #12
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	68f9      	ldr	r1, [r7, #12]
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc2:	f040 818b 	bne.w	8005fdc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4ac1      	ldr	r2, [pc, #772]	; (8005fd0 <UART_SetConfig+0x37c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d005      	beq.n	8005cdc <UART_SetConfig+0x88>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4abf      	ldr	r2, [pc, #764]	; (8005fd4 <UART_SetConfig+0x380>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f040 80bd 	bne.w	8005e56 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cdc:	f7fd ffb4 	bl	8003c48 <HAL_RCC_GetPCLK2Freq>
 8005ce0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	461d      	mov	r5, r3
 8005ce6:	f04f 0600 	mov.w	r6, #0
 8005cea:	46a8      	mov	r8, r5
 8005cec:	46b1      	mov	r9, r6
 8005cee:	eb18 0308 	adds.w	r3, r8, r8
 8005cf2:	eb49 0409 	adc.w	r4, r9, r9
 8005cf6:	4698      	mov	r8, r3
 8005cf8:	46a1      	mov	r9, r4
 8005cfa:	eb18 0805 	adds.w	r8, r8, r5
 8005cfe:	eb49 0906 	adc.w	r9, r9, r6
 8005d02:	f04f 0100 	mov.w	r1, #0
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d16:	4688      	mov	r8, r1
 8005d18:	4691      	mov	r9, r2
 8005d1a:	eb18 0005 	adds.w	r0, r8, r5
 8005d1e:	eb49 0106 	adc.w	r1, r9, r6
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	461d      	mov	r5, r3
 8005d28:	f04f 0600 	mov.w	r6, #0
 8005d2c:	196b      	adds	r3, r5, r5
 8005d2e:	eb46 0406 	adc.w	r4, r6, r6
 8005d32:	461a      	mov	r2, r3
 8005d34:	4623      	mov	r3, r4
 8005d36:	f7fa ff77 	bl	8000c28 <__aeabi_uldivmod>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4ba5      	ldr	r3, [pc, #660]	; (8005fd8 <UART_SetConfig+0x384>)
 8005d42:	fba3 2302 	umull	r2, r3, r3, r2
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	461d      	mov	r5, r3
 8005d50:	f04f 0600 	mov.w	r6, #0
 8005d54:	46a9      	mov	r9, r5
 8005d56:	46b2      	mov	sl, r6
 8005d58:	eb19 0309 	adds.w	r3, r9, r9
 8005d5c:	eb4a 040a 	adc.w	r4, sl, sl
 8005d60:	4699      	mov	r9, r3
 8005d62:	46a2      	mov	sl, r4
 8005d64:	eb19 0905 	adds.w	r9, r9, r5
 8005d68:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d6c:	f04f 0100 	mov.w	r1, #0
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d80:	4689      	mov	r9, r1
 8005d82:	4692      	mov	sl, r2
 8005d84:	eb19 0005 	adds.w	r0, r9, r5
 8005d88:	eb4a 0106 	adc.w	r1, sl, r6
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	461d      	mov	r5, r3
 8005d92:	f04f 0600 	mov.w	r6, #0
 8005d96:	196b      	adds	r3, r5, r5
 8005d98:	eb46 0406 	adc.w	r4, r6, r6
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4623      	mov	r3, r4
 8005da0:	f7fa ff42 	bl	8000c28 <__aeabi_uldivmod>
 8005da4:	4603      	mov	r3, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	461a      	mov	r2, r3
 8005daa:	4b8b      	ldr	r3, [pc, #556]	; (8005fd8 <UART_SetConfig+0x384>)
 8005dac:	fba3 1302 	umull	r1, r3, r3, r2
 8005db0:	095b      	lsrs	r3, r3, #5
 8005db2:	2164      	movs	r1, #100	; 0x64
 8005db4:	fb01 f303 	mul.w	r3, r1, r3
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	3332      	adds	r3, #50	; 0x32
 8005dbe:	4a86      	ldr	r2, [pc, #536]	; (8005fd8 <UART_SetConfig+0x384>)
 8005dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005dcc:	4498      	add	r8, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	461d      	mov	r5, r3
 8005dd2:	f04f 0600 	mov.w	r6, #0
 8005dd6:	46a9      	mov	r9, r5
 8005dd8:	46b2      	mov	sl, r6
 8005dda:	eb19 0309 	adds.w	r3, r9, r9
 8005dde:	eb4a 040a 	adc.w	r4, sl, sl
 8005de2:	4699      	mov	r9, r3
 8005de4:	46a2      	mov	sl, r4
 8005de6:	eb19 0905 	adds.w	r9, r9, r5
 8005dea:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dee:	f04f 0100 	mov.w	r1, #0
 8005df2:	f04f 0200 	mov.w	r2, #0
 8005df6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dfa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dfe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e02:	4689      	mov	r9, r1
 8005e04:	4692      	mov	sl, r2
 8005e06:	eb19 0005 	adds.w	r0, r9, r5
 8005e0a:	eb4a 0106 	adc.w	r1, sl, r6
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	461d      	mov	r5, r3
 8005e14:	f04f 0600 	mov.w	r6, #0
 8005e18:	196b      	adds	r3, r5, r5
 8005e1a:	eb46 0406 	adc.w	r4, r6, r6
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4623      	mov	r3, r4
 8005e22:	f7fa ff01 	bl	8000c28 <__aeabi_uldivmod>
 8005e26:	4603      	mov	r3, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4b6a      	ldr	r3, [pc, #424]	; (8005fd8 <UART_SetConfig+0x384>)
 8005e2e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2164      	movs	r1, #100	; 0x64
 8005e36:	fb01 f303 	mul.w	r3, r1, r3
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	3332      	adds	r3, #50	; 0x32
 8005e40:	4a65      	ldr	r2, [pc, #404]	; (8005fd8 <UART_SetConfig+0x384>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	f003 0207 	and.w	r2, r3, #7
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4442      	add	r2, r8
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	e26f      	b.n	8006336 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e56:	f7fd fee3 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8005e5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	461d      	mov	r5, r3
 8005e60:	f04f 0600 	mov.w	r6, #0
 8005e64:	46a8      	mov	r8, r5
 8005e66:	46b1      	mov	r9, r6
 8005e68:	eb18 0308 	adds.w	r3, r8, r8
 8005e6c:	eb49 0409 	adc.w	r4, r9, r9
 8005e70:	4698      	mov	r8, r3
 8005e72:	46a1      	mov	r9, r4
 8005e74:	eb18 0805 	adds.w	r8, r8, r5
 8005e78:	eb49 0906 	adc.w	r9, r9, r6
 8005e7c:	f04f 0100 	mov.w	r1, #0
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e90:	4688      	mov	r8, r1
 8005e92:	4691      	mov	r9, r2
 8005e94:	eb18 0005 	adds.w	r0, r8, r5
 8005e98:	eb49 0106 	adc.w	r1, r9, r6
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	461d      	mov	r5, r3
 8005ea2:	f04f 0600 	mov.w	r6, #0
 8005ea6:	196b      	adds	r3, r5, r5
 8005ea8:	eb46 0406 	adc.w	r4, r6, r6
 8005eac:	461a      	mov	r2, r3
 8005eae:	4623      	mov	r3, r4
 8005eb0:	f7fa feba 	bl	8000c28 <__aeabi_uldivmod>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b47      	ldr	r3, [pc, #284]	; (8005fd8 <UART_SetConfig+0x384>)
 8005ebc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	461d      	mov	r5, r3
 8005eca:	f04f 0600 	mov.w	r6, #0
 8005ece:	46a9      	mov	r9, r5
 8005ed0:	46b2      	mov	sl, r6
 8005ed2:	eb19 0309 	adds.w	r3, r9, r9
 8005ed6:	eb4a 040a 	adc.w	r4, sl, sl
 8005eda:	4699      	mov	r9, r3
 8005edc:	46a2      	mov	sl, r4
 8005ede:	eb19 0905 	adds.w	r9, r9, r5
 8005ee2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ee6:	f04f 0100 	mov.w	r1, #0
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ef6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005efa:	4689      	mov	r9, r1
 8005efc:	4692      	mov	sl, r2
 8005efe:	eb19 0005 	adds.w	r0, r9, r5
 8005f02:	eb4a 0106 	adc.w	r1, sl, r6
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	461d      	mov	r5, r3
 8005f0c:	f04f 0600 	mov.w	r6, #0
 8005f10:	196b      	adds	r3, r5, r5
 8005f12:	eb46 0406 	adc.w	r4, r6, r6
 8005f16:	461a      	mov	r2, r3
 8005f18:	4623      	mov	r3, r4
 8005f1a:	f7fa fe85 	bl	8000c28 <__aeabi_uldivmod>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	460c      	mov	r4, r1
 8005f22:	461a      	mov	r2, r3
 8005f24:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <UART_SetConfig+0x384>)
 8005f26:	fba3 1302 	umull	r1, r3, r3, r2
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	2164      	movs	r1, #100	; 0x64
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	3332      	adds	r3, #50	; 0x32
 8005f38:	4a27      	ldr	r2, [pc, #156]	; (8005fd8 <UART_SetConfig+0x384>)
 8005f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f46:	4498      	add	r8, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	461d      	mov	r5, r3
 8005f4c:	f04f 0600 	mov.w	r6, #0
 8005f50:	46a9      	mov	r9, r5
 8005f52:	46b2      	mov	sl, r6
 8005f54:	eb19 0309 	adds.w	r3, r9, r9
 8005f58:	eb4a 040a 	adc.w	r4, sl, sl
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	46a2      	mov	sl, r4
 8005f60:	eb19 0905 	adds.w	r9, r9, r5
 8005f64:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f7c:	4689      	mov	r9, r1
 8005f7e:	4692      	mov	sl, r2
 8005f80:	eb19 0005 	adds.w	r0, r9, r5
 8005f84:	eb4a 0106 	adc.w	r1, sl, r6
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	461d      	mov	r5, r3
 8005f8e:	f04f 0600 	mov.w	r6, #0
 8005f92:	196b      	adds	r3, r5, r5
 8005f94:	eb46 0406 	adc.w	r4, r6, r6
 8005f98:	461a      	mov	r2, r3
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	f7fa fe44 	bl	8000c28 <__aeabi_uldivmod>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4b0c      	ldr	r3, [pc, #48]	; (8005fd8 <UART_SetConfig+0x384>)
 8005fa8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fac:	095b      	lsrs	r3, r3, #5
 8005fae:	2164      	movs	r1, #100	; 0x64
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	3332      	adds	r3, #50	; 0x32
 8005fba:	4a07      	ldr	r2, [pc, #28]	; (8005fd8 <UART_SetConfig+0x384>)
 8005fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc0:	095b      	lsrs	r3, r3, #5
 8005fc2:	f003 0207 	and.w	r2, r3, #7
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4442      	add	r2, r8
 8005fcc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005fce:	e1b2      	b.n	8006336 <UART_SetConfig+0x6e2>
 8005fd0:	40011000 	.word	0x40011000
 8005fd4:	40011400 	.word	0x40011400
 8005fd8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4ad7      	ldr	r2, [pc, #860]	; (8006340 <UART_SetConfig+0x6ec>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d005      	beq.n	8005ff2 <UART_SetConfig+0x39e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4ad6      	ldr	r2, [pc, #856]	; (8006344 <UART_SetConfig+0x6f0>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	f040 80d1 	bne.w	8006194 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ff2:	f7fd fe29 	bl	8003c48 <HAL_RCC_GetPCLK2Freq>
 8005ff6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	469a      	mov	sl, r3
 8005ffc:	f04f 0b00 	mov.w	fp, #0
 8006000:	46d0      	mov	r8, sl
 8006002:	46d9      	mov	r9, fp
 8006004:	eb18 0308 	adds.w	r3, r8, r8
 8006008:	eb49 0409 	adc.w	r4, r9, r9
 800600c:	4698      	mov	r8, r3
 800600e:	46a1      	mov	r9, r4
 8006010:	eb18 080a 	adds.w	r8, r8, sl
 8006014:	eb49 090b 	adc.w	r9, r9, fp
 8006018:	f04f 0100 	mov.w	r1, #0
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006024:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006028:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800602c:	4688      	mov	r8, r1
 800602e:	4691      	mov	r9, r2
 8006030:	eb1a 0508 	adds.w	r5, sl, r8
 8006034:	eb4b 0609 	adc.w	r6, fp, r9
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	4619      	mov	r1, r3
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	f04f 0400 	mov.w	r4, #0
 800604a:	0094      	lsls	r4, r2, #2
 800604c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006050:	008b      	lsls	r3, r1, #2
 8006052:	461a      	mov	r2, r3
 8006054:	4623      	mov	r3, r4
 8006056:	4628      	mov	r0, r5
 8006058:	4631      	mov	r1, r6
 800605a:	f7fa fde5 	bl	8000c28 <__aeabi_uldivmod>
 800605e:	4603      	mov	r3, r0
 8006060:	460c      	mov	r4, r1
 8006062:	461a      	mov	r2, r3
 8006064:	4bb8      	ldr	r3, [pc, #736]	; (8006348 <UART_SetConfig+0x6f4>)
 8006066:	fba3 2302 	umull	r2, r3, r3, r2
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	469b      	mov	fp, r3
 8006074:	f04f 0c00 	mov.w	ip, #0
 8006078:	46d9      	mov	r9, fp
 800607a:	46e2      	mov	sl, ip
 800607c:	eb19 0309 	adds.w	r3, r9, r9
 8006080:	eb4a 040a 	adc.w	r4, sl, sl
 8006084:	4699      	mov	r9, r3
 8006086:	46a2      	mov	sl, r4
 8006088:	eb19 090b 	adds.w	r9, r9, fp
 800608c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006090:	f04f 0100 	mov.w	r1, #0
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800609c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060a4:	4689      	mov	r9, r1
 80060a6:	4692      	mov	sl, r2
 80060a8:	eb1b 0509 	adds.w	r5, fp, r9
 80060ac:	eb4c 060a 	adc.w	r6, ip, sl
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	4619      	mov	r1, r3
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	f04f 0300 	mov.w	r3, #0
 80060be:	f04f 0400 	mov.w	r4, #0
 80060c2:	0094      	lsls	r4, r2, #2
 80060c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060c8:	008b      	lsls	r3, r1, #2
 80060ca:	461a      	mov	r2, r3
 80060cc:	4623      	mov	r3, r4
 80060ce:	4628      	mov	r0, r5
 80060d0:	4631      	mov	r1, r6
 80060d2:	f7fa fda9 	bl	8000c28 <__aeabi_uldivmod>
 80060d6:	4603      	mov	r3, r0
 80060d8:	460c      	mov	r4, r1
 80060da:	461a      	mov	r2, r3
 80060dc:	4b9a      	ldr	r3, [pc, #616]	; (8006348 <UART_SetConfig+0x6f4>)
 80060de:	fba3 1302 	umull	r1, r3, r3, r2
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	2164      	movs	r1, #100	; 0x64
 80060e6:	fb01 f303 	mul.w	r3, r1, r3
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	3332      	adds	r3, #50	; 0x32
 80060f0:	4a95      	ldr	r2, [pc, #596]	; (8006348 <UART_SetConfig+0x6f4>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060fc:	4498      	add	r8, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	469b      	mov	fp, r3
 8006102:	f04f 0c00 	mov.w	ip, #0
 8006106:	46d9      	mov	r9, fp
 8006108:	46e2      	mov	sl, ip
 800610a:	eb19 0309 	adds.w	r3, r9, r9
 800610e:	eb4a 040a 	adc.w	r4, sl, sl
 8006112:	4699      	mov	r9, r3
 8006114:	46a2      	mov	sl, r4
 8006116:	eb19 090b 	adds.w	r9, r9, fp
 800611a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800611e:	f04f 0100 	mov.w	r1, #0
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800612a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800612e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006132:	4689      	mov	r9, r1
 8006134:	4692      	mov	sl, r2
 8006136:	eb1b 0509 	adds.w	r5, fp, r9
 800613a:	eb4c 060a 	adc.w	r6, ip, sl
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	4619      	mov	r1, r3
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	f04f 0400 	mov.w	r4, #0
 8006150:	0094      	lsls	r4, r2, #2
 8006152:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006156:	008b      	lsls	r3, r1, #2
 8006158:	461a      	mov	r2, r3
 800615a:	4623      	mov	r3, r4
 800615c:	4628      	mov	r0, r5
 800615e:	4631      	mov	r1, r6
 8006160:	f7fa fd62 	bl	8000c28 <__aeabi_uldivmod>
 8006164:	4603      	mov	r3, r0
 8006166:	460c      	mov	r4, r1
 8006168:	461a      	mov	r2, r3
 800616a:	4b77      	ldr	r3, [pc, #476]	; (8006348 <UART_SetConfig+0x6f4>)
 800616c:	fba3 1302 	umull	r1, r3, r3, r2
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	2164      	movs	r1, #100	; 0x64
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	3332      	adds	r3, #50	; 0x32
 800617e:	4a72      	ldr	r2, [pc, #456]	; (8006348 <UART_SetConfig+0x6f4>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	f003 020f 	and.w	r2, r3, #15
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4442      	add	r2, r8
 8006190:	609a      	str	r2, [r3, #8]
 8006192:	e0d0      	b.n	8006336 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006194:	f7fd fd44 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8006198:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	469a      	mov	sl, r3
 800619e:	f04f 0b00 	mov.w	fp, #0
 80061a2:	46d0      	mov	r8, sl
 80061a4:	46d9      	mov	r9, fp
 80061a6:	eb18 0308 	adds.w	r3, r8, r8
 80061aa:	eb49 0409 	adc.w	r4, r9, r9
 80061ae:	4698      	mov	r8, r3
 80061b0:	46a1      	mov	r9, r4
 80061b2:	eb18 080a 	adds.w	r8, r8, sl
 80061b6:	eb49 090b 	adc.w	r9, r9, fp
 80061ba:	f04f 0100 	mov.w	r1, #0
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061ce:	4688      	mov	r8, r1
 80061d0:	4691      	mov	r9, r2
 80061d2:	eb1a 0508 	adds.w	r5, sl, r8
 80061d6:	eb4b 0609 	adc.w	r6, fp, r9
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	4619      	mov	r1, r3
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	f04f 0300 	mov.w	r3, #0
 80061e8:	f04f 0400 	mov.w	r4, #0
 80061ec:	0094      	lsls	r4, r2, #2
 80061ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061f2:	008b      	lsls	r3, r1, #2
 80061f4:	461a      	mov	r2, r3
 80061f6:	4623      	mov	r3, r4
 80061f8:	4628      	mov	r0, r5
 80061fa:	4631      	mov	r1, r6
 80061fc:	f7fa fd14 	bl	8000c28 <__aeabi_uldivmod>
 8006200:	4603      	mov	r3, r0
 8006202:	460c      	mov	r4, r1
 8006204:	461a      	mov	r2, r3
 8006206:	4b50      	ldr	r3, [pc, #320]	; (8006348 <UART_SetConfig+0x6f4>)
 8006208:	fba3 2302 	umull	r2, r3, r3, r2
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	469b      	mov	fp, r3
 8006216:	f04f 0c00 	mov.w	ip, #0
 800621a:	46d9      	mov	r9, fp
 800621c:	46e2      	mov	sl, ip
 800621e:	eb19 0309 	adds.w	r3, r9, r9
 8006222:	eb4a 040a 	adc.w	r4, sl, sl
 8006226:	4699      	mov	r9, r3
 8006228:	46a2      	mov	sl, r4
 800622a:	eb19 090b 	adds.w	r9, r9, fp
 800622e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006232:	f04f 0100 	mov.w	r1, #0
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800623e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006246:	4689      	mov	r9, r1
 8006248:	4692      	mov	sl, r2
 800624a:	eb1b 0509 	adds.w	r5, fp, r9
 800624e:	eb4c 060a 	adc.w	r6, ip, sl
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	4619      	mov	r1, r3
 8006258:	f04f 0200 	mov.w	r2, #0
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	f04f 0400 	mov.w	r4, #0
 8006264:	0094      	lsls	r4, r2, #2
 8006266:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800626a:	008b      	lsls	r3, r1, #2
 800626c:	461a      	mov	r2, r3
 800626e:	4623      	mov	r3, r4
 8006270:	4628      	mov	r0, r5
 8006272:	4631      	mov	r1, r6
 8006274:	f7fa fcd8 	bl	8000c28 <__aeabi_uldivmod>
 8006278:	4603      	mov	r3, r0
 800627a:	460c      	mov	r4, r1
 800627c:	461a      	mov	r2, r3
 800627e:	4b32      	ldr	r3, [pc, #200]	; (8006348 <UART_SetConfig+0x6f4>)
 8006280:	fba3 1302 	umull	r1, r3, r3, r2
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	2164      	movs	r1, #100	; 0x64
 8006288:	fb01 f303 	mul.w	r3, r1, r3
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	3332      	adds	r3, #50	; 0x32
 8006292:	4a2d      	ldr	r2, [pc, #180]	; (8006348 <UART_SetConfig+0x6f4>)
 8006294:	fba2 2303 	umull	r2, r3, r2, r3
 8006298:	095b      	lsrs	r3, r3, #5
 800629a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800629e:	4498      	add	r8, r3
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	469b      	mov	fp, r3
 80062a4:	f04f 0c00 	mov.w	ip, #0
 80062a8:	46d9      	mov	r9, fp
 80062aa:	46e2      	mov	sl, ip
 80062ac:	eb19 0309 	adds.w	r3, r9, r9
 80062b0:	eb4a 040a 	adc.w	r4, sl, sl
 80062b4:	4699      	mov	r9, r3
 80062b6:	46a2      	mov	sl, r4
 80062b8:	eb19 090b 	adds.w	r9, r9, fp
 80062bc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062c0:	f04f 0100 	mov.w	r1, #0
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062d4:	4689      	mov	r9, r1
 80062d6:	4692      	mov	sl, r2
 80062d8:	eb1b 0509 	adds.w	r5, fp, r9
 80062dc:	eb4c 060a 	adc.w	r6, ip, sl
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4619      	mov	r1, r3
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	f04f 0300 	mov.w	r3, #0
 80062ee:	f04f 0400 	mov.w	r4, #0
 80062f2:	0094      	lsls	r4, r2, #2
 80062f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062f8:	008b      	lsls	r3, r1, #2
 80062fa:	461a      	mov	r2, r3
 80062fc:	4623      	mov	r3, r4
 80062fe:	4628      	mov	r0, r5
 8006300:	4631      	mov	r1, r6
 8006302:	f7fa fc91 	bl	8000c28 <__aeabi_uldivmod>
 8006306:	4603      	mov	r3, r0
 8006308:	460c      	mov	r4, r1
 800630a:	461a      	mov	r2, r3
 800630c:	4b0e      	ldr	r3, [pc, #56]	; (8006348 <UART_SetConfig+0x6f4>)
 800630e:	fba3 1302 	umull	r1, r3, r3, r2
 8006312:	095b      	lsrs	r3, r3, #5
 8006314:	2164      	movs	r1, #100	; 0x64
 8006316:	fb01 f303 	mul.w	r3, r1, r3
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	3332      	adds	r3, #50	; 0x32
 8006320:	4a09      	ldr	r2, [pc, #36]	; (8006348 <UART_SetConfig+0x6f4>)
 8006322:	fba2 2303 	umull	r2, r3, r2, r3
 8006326:	095b      	lsrs	r3, r3, #5
 8006328:	f003 020f 	and.w	r2, r3, #15
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4442      	add	r2, r8
 8006332:	609a      	str	r2, [r3, #8]
}
 8006334:	e7ff      	b.n	8006336 <UART_SetConfig+0x6e2>
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006340:	40011000 	.word	0x40011000
 8006344:	40011400 	.word	0x40011400
 8006348:	51eb851f 	.word	0x51eb851f

0800634c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006350:	4904      	ldr	r1, [pc, #16]	; (8006364 <MX_FATFS_Init+0x18>)
 8006352:	4805      	ldr	r0, [pc, #20]	; (8006368 <MX_FATFS_Init+0x1c>)
 8006354:	f000 f8b0 	bl	80064b8 <FATFS_LinkDriver>
 8006358:	4603      	mov	r3, r0
 800635a:	461a      	mov	r2, r3
 800635c:	4b03      	ldr	r3, [pc, #12]	; (800636c <MX_FATFS_Init+0x20>)
 800635e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006360:	bf00      	nop
 8006362:	bd80      	pop	{r7, pc}
 8006364:	200005e4 	.word	0x200005e4
 8006368:	2000001c 	.word	0x2000001c
 800636c:	200005e8 	.word	0x200005e8

08006370 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	4603      	mov	r3, r0
 8006378:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 800637a:	4b06      	ldr	r3, [pc, #24]	; (8006394 <USER_initialize+0x24>)
 800637c:	2201      	movs	r2, #1
 800637e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006380:	4b04      	ldr	r3, [pc, #16]	; (8006394 <USER_initialize+0x24>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006386:	4618      	mov	r0, r3
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000019 	.word	0x20000019

08006398 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80063a2:	4b06      	ldr	r3, [pc, #24]	; (80063bc <USER_status+0x24>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80063a8:	4b04      	ldr	r3, [pc, #16]	; (80063bc <USER_status+0x24>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000019 	.word	0x20000019

080063c0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	607a      	str	r2, [r7, #4]
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80063d0:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3714      	adds	r7, #20
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	4603      	mov	r3, r0
 80063ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80063ee:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3714      	adds	r7, #20
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	603a      	str	r2, [r7, #0]
 8006406:	71fb      	strb	r3, [r7, #7]
 8006408:	460b      	mov	r3, r1
 800640a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	73fb      	strb	r3, [r7, #15]
    return res;
 8006410:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	4613      	mov	r3, r2
 800642c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800642e:	2301      	movs	r3, #1
 8006430:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006432:	2300      	movs	r3, #0
 8006434:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006436:	4b1f      	ldr	r3, [pc, #124]	; (80064b4 <FATFS_LinkDriverEx+0x94>)
 8006438:	7a5b      	ldrb	r3, [r3, #9]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b00      	cmp	r3, #0
 800643e:	d131      	bne.n	80064a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006440:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <FATFS_LinkDriverEx+0x94>)
 8006442:	7a5b      	ldrb	r3, [r3, #9]
 8006444:	b2db      	uxtb	r3, r3
 8006446:	461a      	mov	r2, r3
 8006448:	4b1a      	ldr	r3, [pc, #104]	; (80064b4 <FATFS_LinkDriverEx+0x94>)
 800644a:	2100      	movs	r1, #0
 800644c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800644e:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <FATFS_LinkDriverEx+0x94>)
 8006450:	7a5b      	ldrb	r3, [r3, #9]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	4a17      	ldr	r2, [pc, #92]	; (80064b4 <FATFS_LinkDriverEx+0x94>)
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800645e:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <FATFS_LinkDriverEx+0x94>)
 8006460:	7a5b      	ldrb	r3, [r3, #9]
 8006462:	b2db      	uxtb	r3, r3
 8006464:	461a      	mov	r2, r3
 8006466:	4b13      	ldr	r3, [pc, #76]	; (80064b4 <FATFS_LinkDriverEx+0x94>)
 8006468:	4413      	add	r3, r2
 800646a:	79fa      	ldrb	r2, [r7, #7]
 800646c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800646e:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <FATFS_LinkDriverEx+0x94>)
 8006470:	7a5b      	ldrb	r3, [r3, #9]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	b2d1      	uxtb	r1, r2
 8006478:	4a0e      	ldr	r2, [pc, #56]	; (80064b4 <FATFS_LinkDriverEx+0x94>)
 800647a:	7251      	strb	r1, [r2, #9]
 800647c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800647e:	7dbb      	ldrb	r3, [r7, #22]
 8006480:	3330      	adds	r3, #48	; 0x30
 8006482:	b2da      	uxtb	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	3301      	adds	r3, #1
 800648c:	223a      	movs	r2, #58	; 0x3a
 800648e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	3302      	adds	r3, #2
 8006494:	222f      	movs	r2, #47	; 0x2f
 8006496:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	3303      	adds	r3, #3
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	371c      	adds	r7, #28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	20000224 	.word	0x20000224

080064b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80064c2:	2200      	movs	r2, #0
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff ffaa 	bl	8006420 <FATFS_LinkDriverEx>
 80064cc:	4603      	mov	r3, r0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <__errno>:
 80064d8:	4b01      	ldr	r3, [pc, #4]	; (80064e0 <__errno+0x8>)
 80064da:	6818      	ldr	r0, [r3, #0]
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	20000030 	.word	0x20000030

080064e4 <__libc_init_array>:
 80064e4:	b570      	push	{r4, r5, r6, lr}
 80064e6:	4e0d      	ldr	r6, [pc, #52]	; (800651c <__libc_init_array+0x38>)
 80064e8:	4c0d      	ldr	r4, [pc, #52]	; (8006520 <__libc_init_array+0x3c>)
 80064ea:	1ba4      	subs	r4, r4, r6
 80064ec:	10a4      	asrs	r4, r4, #2
 80064ee:	2500      	movs	r5, #0
 80064f0:	42a5      	cmp	r5, r4
 80064f2:	d109      	bne.n	8006508 <__libc_init_array+0x24>
 80064f4:	4e0b      	ldr	r6, [pc, #44]	; (8006524 <__libc_init_array+0x40>)
 80064f6:	4c0c      	ldr	r4, [pc, #48]	; (8006528 <__libc_init_array+0x44>)
 80064f8:	f003 faf8 	bl	8009aec <_init>
 80064fc:	1ba4      	subs	r4, r4, r6
 80064fe:	10a4      	asrs	r4, r4, #2
 8006500:	2500      	movs	r5, #0
 8006502:	42a5      	cmp	r5, r4
 8006504:	d105      	bne.n	8006512 <__libc_init_array+0x2e>
 8006506:	bd70      	pop	{r4, r5, r6, pc}
 8006508:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800650c:	4798      	blx	r3
 800650e:	3501      	adds	r5, #1
 8006510:	e7ee      	b.n	80064f0 <__libc_init_array+0xc>
 8006512:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006516:	4798      	blx	r3
 8006518:	3501      	adds	r5, #1
 800651a:	e7f2      	b.n	8006502 <__libc_init_array+0x1e>
 800651c:	08009e50 	.word	0x08009e50
 8006520:	08009e50 	.word	0x08009e50
 8006524:	08009e50 	.word	0x08009e50
 8006528:	08009e54 	.word	0x08009e54

0800652c <memset>:
 800652c:	4402      	add	r2, r0
 800652e:	4603      	mov	r3, r0
 8006530:	4293      	cmp	r3, r2
 8006532:	d100      	bne.n	8006536 <memset+0xa>
 8006534:	4770      	bx	lr
 8006536:	f803 1b01 	strb.w	r1, [r3], #1
 800653a:	e7f9      	b.n	8006530 <memset+0x4>

0800653c <__cvt>:
 800653c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006540:	ec55 4b10 	vmov	r4, r5, d0
 8006544:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006546:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800654a:	2d00      	cmp	r5, #0
 800654c:	460e      	mov	r6, r1
 800654e:	4691      	mov	r9, r2
 8006550:	4619      	mov	r1, r3
 8006552:	bfb8      	it	lt
 8006554:	4622      	movlt	r2, r4
 8006556:	462b      	mov	r3, r5
 8006558:	f027 0720 	bic.w	r7, r7, #32
 800655c:	bfbb      	ittet	lt
 800655e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006562:	461d      	movlt	r5, r3
 8006564:	2300      	movge	r3, #0
 8006566:	232d      	movlt	r3, #45	; 0x2d
 8006568:	bfb8      	it	lt
 800656a:	4614      	movlt	r4, r2
 800656c:	2f46      	cmp	r7, #70	; 0x46
 800656e:	700b      	strb	r3, [r1, #0]
 8006570:	d004      	beq.n	800657c <__cvt+0x40>
 8006572:	2f45      	cmp	r7, #69	; 0x45
 8006574:	d100      	bne.n	8006578 <__cvt+0x3c>
 8006576:	3601      	adds	r6, #1
 8006578:	2102      	movs	r1, #2
 800657a:	e000      	b.n	800657e <__cvt+0x42>
 800657c:	2103      	movs	r1, #3
 800657e:	ab03      	add	r3, sp, #12
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	ab02      	add	r3, sp, #8
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4632      	mov	r2, r6
 8006588:	4653      	mov	r3, sl
 800658a:	ec45 4b10 	vmov	d0, r4, r5
 800658e:	f000 fcef 	bl	8006f70 <_dtoa_r>
 8006592:	2f47      	cmp	r7, #71	; 0x47
 8006594:	4680      	mov	r8, r0
 8006596:	d102      	bne.n	800659e <__cvt+0x62>
 8006598:	f019 0f01 	tst.w	r9, #1
 800659c:	d026      	beq.n	80065ec <__cvt+0xb0>
 800659e:	2f46      	cmp	r7, #70	; 0x46
 80065a0:	eb08 0906 	add.w	r9, r8, r6
 80065a4:	d111      	bne.n	80065ca <__cvt+0x8e>
 80065a6:	f898 3000 	ldrb.w	r3, [r8]
 80065aa:	2b30      	cmp	r3, #48	; 0x30
 80065ac:	d10a      	bne.n	80065c4 <__cvt+0x88>
 80065ae:	2200      	movs	r2, #0
 80065b0:	2300      	movs	r3, #0
 80065b2:	4620      	mov	r0, r4
 80065b4:	4629      	mov	r1, r5
 80065b6:	f7fa faa7 	bl	8000b08 <__aeabi_dcmpeq>
 80065ba:	b918      	cbnz	r0, 80065c4 <__cvt+0x88>
 80065bc:	f1c6 0601 	rsb	r6, r6, #1
 80065c0:	f8ca 6000 	str.w	r6, [sl]
 80065c4:	f8da 3000 	ldr.w	r3, [sl]
 80065c8:	4499      	add	r9, r3
 80065ca:	2200      	movs	r2, #0
 80065cc:	2300      	movs	r3, #0
 80065ce:	4620      	mov	r0, r4
 80065d0:	4629      	mov	r1, r5
 80065d2:	f7fa fa99 	bl	8000b08 <__aeabi_dcmpeq>
 80065d6:	b938      	cbnz	r0, 80065e8 <__cvt+0xac>
 80065d8:	2230      	movs	r2, #48	; 0x30
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	454b      	cmp	r3, r9
 80065de:	d205      	bcs.n	80065ec <__cvt+0xb0>
 80065e0:	1c59      	adds	r1, r3, #1
 80065e2:	9103      	str	r1, [sp, #12]
 80065e4:	701a      	strb	r2, [r3, #0]
 80065e6:	e7f8      	b.n	80065da <__cvt+0x9e>
 80065e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065f0:	eba3 0308 	sub.w	r3, r3, r8
 80065f4:	4640      	mov	r0, r8
 80065f6:	6013      	str	r3, [r2, #0]
 80065f8:	b004      	add	sp, #16
 80065fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080065fe <__exponent>:
 80065fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006600:	2900      	cmp	r1, #0
 8006602:	4604      	mov	r4, r0
 8006604:	bfba      	itte	lt
 8006606:	4249      	neglt	r1, r1
 8006608:	232d      	movlt	r3, #45	; 0x2d
 800660a:	232b      	movge	r3, #43	; 0x2b
 800660c:	2909      	cmp	r1, #9
 800660e:	f804 2b02 	strb.w	r2, [r4], #2
 8006612:	7043      	strb	r3, [r0, #1]
 8006614:	dd20      	ble.n	8006658 <__exponent+0x5a>
 8006616:	f10d 0307 	add.w	r3, sp, #7
 800661a:	461f      	mov	r7, r3
 800661c:	260a      	movs	r6, #10
 800661e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006622:	fb06 1115 	mls	r1, r6, r5, r1
 8006626:	3130      	adds	r1, #48	; 0x30
 8006628:	2d09      	cmp	r5, #9
 800662a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800662e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8006632:	4629      	mov	r1, r5
 8006634:	dc09      	bgt.n	800664a <__exponent+0x4c>
 8006636:	3130      	adds	r1, #48	; 0x30
 8006638:	3b02      	subs	r3, #2
 800663a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800663e:	42bb      	cmp	r3, r7
 8006640:	4622      	mov	r2, r4
 8006642:	d304      	bcc.n	800664e <__exponent+0x50>
 8006644:	1a10      	subs	r0, r2, r0
 8006646:	b003      	add	sp, #12
 8006648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664a:	4613      	mov	r3, r2
 800664c:	e7e7      	b.n	800661e <__exponent+0x20>
 800664e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006652:	f804 2b01 	strb.w	r2, [r4], #1
 8006656:	e7f2      	b.n	800663e <__exponent+0x40>
 8006658:	2330      	movs	r3, #48	; 0x30
 800665a:	4419      	add	r1, r3
 800665c:	7083      	strb	r3, [r0, #2]
 800665e:	1d02      	adds	r2, r0, #4
 8006660:	70c1      	strb	r1, [r0, #3]
 8006662:	e7ef      	b.n	8006644 <__exponent+0x46>

08006664 <_printf_float>:
 8006664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006668:	b08d      	sub	sp, #52	; 0x34
 800666a:	460c      	mov	r4, r1
 800666c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006670:	4616      	mov	r6, r2
 8006672:	461f      	mov	r7, r3
 8006674:	4605      	mov	r5, r0
 8006676:	f001 fa33 	bl	8007ae0 <_localeconv_r>
 800667a:	6803      	ldr	r3, [r0, #0]
 800667c:	9304      	str	r3, [sp, #16]
 800667e:	4618      	mov	r0, r3
 8006680:	f7f9 fdc6 	bl	8000210 <strlen>
 8006684:	2300      	movs	r3, #0
 8006686:	930a      	str	r3, [sp, #40]	; 0x28
 8006688:	f8d8 3000 	ldr.w	r3, [r8]
 800668c:	9005      	str	r0, [sp, #20]
 800668e:	3307      	adds	r3, #7
 8006690:	f023 0307 	bic.w	r3, r3, #7
 8006694:	f103 0208 	add.w	r2, r3, #8
 8006698:	f894 a018 	ldrb.w	sl, [r4, #24]
 800669c:	f8d4 b000 	ldr.w	fp, [r4]
 80066a0:	f8c8 2000 	str.w	r2, [r8]
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066ac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066b4:	9307      	str	r3, [sp, #28]
 80066b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80066ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066be:	4ba7      	ldr	r3, [pc, #668]	; (800695c <_printf_float+0x2f8>)
 80066c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c4:	f7fa fa52 	bl	8000b6c <__aeabi_dcmpun>
 80066c8:	bb70      	cbnz	r0, 8006728 <_printf_float+0xc4>
 80066ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066ce:	4ba3      	ldr	r3, [pc, #652]	; (800695c <_printf_float+0x2f8>)
 80066d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066d4:	f7fa fa2c 	bl	8000b30 <__aeabi_dcmple>
 80066d8:	bb30      	cbnz	r0, 8006728 <_printf_float+0xc4>
 80066da:	2200      	movs	r2, #0
 80066dc:	2300      	movs	r3, #0
 80066de:	4640      	mov	r0, r8
 80066e0:	4649      	mov	r1, r9
 80066e2:	f7fa fa1b 	bl	8000b1c <__aeabi_dcmplt>
 80066e6:	b110      	cbz	r0, 80066ee <_printf_float+0x8a>
 80066e8:	232d      	movs	r3, #45	; 0x2d
 80066ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ee:	4a9c      	ldr	r2, [pc, #624]	; (8006960 <_printf_float+0x2fc>)
 80066f0:	4b9c      	ldr	r3, [pc, #624]	; (8006964 <_printf_float+0x300>)
 80066f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80066f6:	bf8c      	ite	hi
 80066f8:	4690      	movhi	r8, r2
 80066fa:	4698      	movls	r8, r3
 80066fc:	2303      	movs	r3, #3
 80066fe:	f02b 0204 	bic.w	r2, fp, #4
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	6022      	str	r2, [r4, #0]
 8006706:	f04f 0900 	mov.w	r9, #0
 800670a:	9700      	str	r7, [sp, #0]
 800670c:	4633      	mov	r3, r6
 800670e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006710:	4621      	mov	r1, r4
 8006712:	4628      	mov	r0, r5
 8006714:	f000 f9e6 	bl	8006ae4 <_printf_common>
 8006718:	3001      	adds	r0, #1
 800671a:	f040 808d 	bne.w	8006838 <_printf_float+0x1d4>
 800671e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006722:	b00d      	add	sp, #52	; 0x34
 8006724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006728:	4642      	mov	r2, r8
 800672a:	464b      	mov	r3, r9
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7fa fa1c 	bl	8000b6c <__aeabi_dcmpun>
 8006734:	b110      	cbz	r0, 800673c <_printf_float+0xd8>
 8006736:	4a8c      	ldr	r2, [pc, #560]	; (8006968 <_printf_float+0x304>)
 8006738:	4b8c      	ldr	r3, [pc, #560]	; (800696c <_printf_float+0x308>)
 800673a:	e7da      	b.n	80066f2 <_printf_float+0x8e>
 800673c:	6861      	ldr	r1, [r4, #4]
 800673e:	1c4b      	adds	r3, r1, #1
 8006740:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006744:	a80a      	add	r0, sp, #40	; 0x28
 8006746:	d13e      	bne.n	80067c6 <_printf_float+0x162>
 8006748:	2306      	movs	r3, #6
 800674a:	6063      	str	r3, [r4, #4]
 800674c:	2300      	movs	r3, #0
 800674e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006752:	ab09      	add	r3, sp, #36	; 0x24
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	ec49 8b10 	vmov	d0, r8, r9
 800675a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800675e:	6022      	str	r2, [r4, #0]
 8006760:	f8cd a004 	str.w	sl, [sp, #4]
 8006764:	6861      	ldr	r1, [r4, #4]
 8006766:	4628      	mov	r0, r5
 8006768:	f7ff fee8 	bl	800653c <__cvt>
 800676c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006770:	2b47      	cmp	r3, #71	; 0x47
 8006772:	4680      	mov	r8, r0
 8006774:	d109      	bne.n	800678a <_printf_float+0x126>
 8006776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006778:	1cd8      	adds	r0, r3, #3
 800677a:	db02      	blt.n	8006782 <_printf_float+0x11e>
 800677c:	6862      	ldr	r2, [r4, #4]
 800677e:	4293      	cmp	r3, r2
 8006780:	dd47      	ble.n	8006812 <_printf_float+0x1ae>
 8006782:	f1aa 0a02 	sub.w	sl, sl, #2
 8006786:	fa5f fa8a 	uxtb.w	sl, sl
 800678a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800678e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006790:	d824      	bhi.n	80067dc <_printf_float+0x178>
 8006792:	3901      	subs	r1, #1
 8006794:	4652      	mov	r2, sl
 8006796:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800679a:	9109      	str	r1, [sp, #36]	; 0x24
 800679c:	f7ff ff2f 	bl	80065fe <__exponent>
 80067a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067a2:	1813      	adds	r3, r2, r0
 80067a4:	2a01      	cmp	r2, #1
 80067a6:	4681      	mov	r9, r0
 80067a8:	6123      	str	r3, [r4, #16]
 80067aa:	dc02      	bgt.n	80067b2 <_printf_float+0x14e>
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	07d1      	lsls	r1, r2, #31
 80067b0:	d501      	bpl.n	80067b6 <_printf_float+0x152>
 80067b2:	3301      	adds	r3, #1
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0a5      	beq.n	800670a <_printf_float+0xa6>
 80067be:	232d      	movs	r3, #45	; 0x2d
 80067c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c4:	e7a1      	b.n	800670a <_printf_float+0xa6>
 80067c6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80067ca:	f000 8177 	beq.w	8006abc <_printf_float+0x458>
 80067ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80067d2:	d1bb      	bne.n	800674c <_printf_float+0xe8>
 80067d4:	2900      	cmp	r1, #0
 80067d6:	d1b9      	bne.n	800674c <_printf_float+0xe8>
 80067d8:	2301      	movs	r3, #1
 80067da:	e7b6      	b.n	800674a <_printf_float+0xe6>
 80067dc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80067e0:	d119      	bne.n	8006816 <_printf_float+0x1b2>
 80067e2:	2900      	cmp	r1, #0
 80067e4:	6863      	ldr	r3, [r4, #4]
 80067e6:	dd0c      	ble.n	8006802 <_printf_float+0x19e>
 80067e8:	6121      	str	r1, [r4, #16]
 80067ea:	b913      	cbnz	r3, 80067f2 <_printf_float+0x18e>
 80067ec:	6822      	ldr	r2, [r4, #0]
 80067ee:	07d2      	lsls	r2, r2, #31
 80067f0:	d502      	bpl.n	80067f8 <_printf_float+0x194>
 80067f2:	3301      	adds	r3, #1
 80067f4:	440b      	add	r3, r1
 80067f6:	6123      	str	r3, [r4, #16]
 80067f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80067fc:	f04f 0900 	mov.w	r9, #0
 8006800:	e7d9      	b.n	80067b6 <_printf_float+0x152>
 8006802:	b913      	cbnz	r3, 800680a <_printf_float+0x1a6>
 8006804:	6822      	ldr	r2, [r4, #0]
 8006806:	07d0      	lsls	r0, r2, #31
 8006808:	d501      	bpl.n	800680e <_printf_float+0x1aa>
 800680a:	3302      	adds	r3, #2
 800680c:	e7f3      	b.n	80067f6 <_printf_float+0x192>
 800680e:	2301      	movs	r3, #1
 8006810:	e7f1      	b.n	80067f6 <_printf_float+0x192>
 8006812:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006816:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800681a:	4293      	cmp	r3, r2
 800681c:	db05      	blt.n	800682a <_printf_float+0x1c6>
 800681e:	6822      	ldr	r2, [r4, #0]
 8006820:	6123      	str	r3, [r4, #16]
 8006822:	07d1      	lsls	r1, r2, #31
 8006824:	d5e8      	bpl.n	80067f8 <_printf_float+0x194>
 8006826:	3301      	adds	r3, #1
 8006828:	e7e5      	b.n	80067f6 <_printf_float+0x192>
 800682a:	2b00      	cmp	r3, #0
 800682c:	bfd4      	ite	le
 800682e:	f1c3 0302 	rsble	r3, r3, #2
 8006832:	2301      	movgt	r3, #1
 8006834:	4413      	add	r3, r2
 8006836:	e7de      	b.n	80067f6 <_printf_float+0x192>
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	055a      	lsls	r2, r3, #21
 800683c:	d407      	bmi.n	800684e <_printf_float+0x1ea>
 800683e:	6923      	ldr	r3, [r4, #16]
 8006840:	4642      	mov	r2, r8
 8006842:	4631      	mov	r1, r6
 8006844:	4628      	mov	r0, r5
 8006846:	47b8      	blx	r7
 8006848:	3001      	adds	r0, #1
 800684a:	d12b      	bne.n	80068a4 <_printf_float+0x240>
 800684c:	e767      	b.n	800671e <_printf_float+0xba>
 800684e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006852:	f240 80dc 	bls.w	8006a0e <_printf_float+0x3aa>
 8006856:	2200      	movs	r2, #0
 8006858:	2300      	movs	r3, #0
 800685a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800685e:	f7fa f953 	bl	8000b08 <__aeabi_dcmpeq>
 8006862:	2800      	cmp	r0, #0
 8006864:	d033      	beq.n	80068ce <_printf_float+0x26a>
 8006866:	2301      	movs	r3, #1
 8006868:	4a41      	ldr	r2, [pc, #260]	; (8006970 <_printf_float+0x30c>)
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	f43f af54 	beq.w	800671e <_printf_float+0xba>
 8006876:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800687a:	429a      	cmp	r2, r3
 800687c:	db02      	blt.n	8006884 <_printf_float+0x220>
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	07d8      	lsls	r0, r3, #31
 8006882:	d50f      	bpl.n	80068a4 <_printf_float+0x240>
 8006884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	f43f af45 	beq.w	800671e <_printf_float+0xba>
 8006894:	f04f 0800 	mov.w	r8, #0
 8006898:	f104 091a 	add.w	r9, r4, #26
 800689c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800689e:	3b01      	subs	r3, #1
 80068a0:	4543      	cmp	r3, r8
 80068a2:	dc09      	bgt.n	80068b8 <_printf_float+0x254>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	079b      	lsls	r3, r3, #30
 80068a8:	f100 8103 	bmi.w	8006ab2 <_printf_float+0x44e>
 80068ac:	68e0      	ldr	r0, [r4, #12]
 80068ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068b0:	4298      	cmp	r0, r3
 80068b2:	bfb8      	it	lt
 80068b4:	4618      	movlt	r0, r3
 80068b6:	e734      	b.n	8006722 <_printf_float+0xbe>
 80068b8:	2301      	movs	r3, #1
 80068ba:	464a      	mov	r2, r9
 80068bc:	4631      	mov	r1, r6
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	f43f af2b 	beq.w	800671e <_printf_float+0xba>
 80068c8:	f108 0801 	add.w	r8, r8, #1
 80068cc:	e7e6      	b.n	800689c <_printf_float+0x238>
 80068ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dc2b      	bgt.n	800692c <_printf_float+0x2c8>
 80068d4:	2301      	movs	r3, #1
 80068d6:	4a26      	ldr	r2, [pc, #152]	; (8006970 <_printf_float+0x30c>)
 80068d8:	4631      	mov	r1, r6
 80068da:	4628      	mov	r0, r5
 80068dc:	47b8      	blx	r7
 80068de:	3001      	adds	r0, #1
 80068e0:	f43f af1d 	beq.w	800671e <_printf_float+0xba>
 80068e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e6:	b923      	cbnz	r3, 80068f2 <_printf_float+0x28e>
 80068e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ea:	b913      	cbnz	r3, 80068f2 <_printf_float+0x28e>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	07d9      	lsls	r1, r3, #31
 80068f0:	d5d8      	bpl.n	80068a4 <_printf_float+0x240>
 80068f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	f43f af0e 	beq.w	800671e <_printf_float+0xba>
 8006902:	f04f 0900 	mov.w	r9, #0
 8006906:	f104 0a1a 	add.w	sl, r4, #26
 800690a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800690c:	425b      	negs	r3, r3
 800690e:	454b      	cmp	r3, r9
 8006910:	dc01      	bgt.n	8006916 <_printf_float+0x2b2>
 8006912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006914:	e794      	b.n	8006840 <_printf_float+0x1dc>
 8006916:	2301      	movs	r3, #1
 8006918:	4652      	mov	r2, sl
 800691a:	4631      	mov	r1, r6
 800691c:	4628      	mov	r0, r5
 800691e:	47b8      	blx	r7
 8006920:	3001      	adds	r0, #1
 8006922:	f43f aefc 	beq.w	800671e <_printf_float+0xba>
 8006926:	f109 0901 	add.w	r9, r9, #1
 800692a:	e7ee      	b.n	800690a <_printf_float+0x2a6>
 800692c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800692e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006930:	429a      	cmp	r2, r3
 8006932:	bfa8      	it	ge
 8006934:	461a      	movge	r2, r3
 8006936:	2a00      	cmp	r2, #0
 8006938:	4691      	mov	r9, r2
 800693a:	dd07      	ble.n	800694c <_printf_float+0x2e8>
 800693c:	4613      	mov	r3, r2
 800693e:	4631      	mov	r1, r6
 8006940:	4642      	mov	r2, r8
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	f43f aee9 	beq.w	800671e <_printf_float+0xba>
 800694c:	f104 031a 	add.w	r3, r4, #26
 8006950:	f04f 0b00 	mov.w	fp, #0
 8006954:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006958:	9306      	str	r3, [sp, #24]
 800695a:	e015      	b.n	8006988 <_printf_float+0x324>
 800695c:	7fefffff 	.word	0x7fefffff
 8006960:	08009ba8 	.word	0x08009ba8
 8006964:	08009ba4 	.word	0x08009ba4
 8006968:	08009bb0 	.word	0x08009bb0
 800696c:	08009bac 	.word	0x08009bac
 8006970:	08009bb4 	.word	0x08009bb4
 8006974:	2301      	movs	r3, #1
 8006976:	9a06      	ldr	r2, [sp, #24]
 8006978:	4631      	mov	r1, r6
 800697a:	4628      	mov	r0, r5
 800697c:	47b8      	blx	r7
 800697e:	3001      	adds	r0, #1
 8006980:	f43f aecd 	beq.w	800671e <_printf_float+0xba>
 8006984:	f10b 0b01 	add.w	fp, fp, #1
 8006988:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800698c:	ebaa 0309 	sub.w	r3, sl, r9
 8006990:	455b      	cmp	r3, fp
 8006992:	dcef      	bgt.n	8006974 <_printf_float+0x310>
 8006994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006998:	429a      	cmp	r2, r3
 800699a:	44d0      	add	r8, sl
 800699c:	db15      	blt.n	80069ca <_printf_float+0x366>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	07da      	lsls	r2, r3, #31
 80069a2:	d412      	bmi.n	80069ca <_printf_float+0x366>
 80069a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069a8:	eba3 020a 	sub.w	r2, r3, sl
 80069ac:	eba3 0a01 	sub.w	sl, r3, r1
 80069b0:	4592      	cmp	sl, r2
 80069b2:	bfa8      	it	ge
 80069b4:	4692      	movge	sl, r2
 80069b6:	f1ba 0f00 	cmp.w	sl, #0
 80069ba:	dc0e      	bgt.n	80069da <_printf_float+0x376>
 80069bc:	f04f 0800 	mov.w	r8, #0
 80069c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069c4:	f104 091a 	add.w	r9, r4, #26
 80069c8:	e019      	b.n	80069fe <_printf_float+0x39a>
 80069ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ce:	4631      	mov	r1, r6
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b8      	blx	r7
 80069d4:	3001      	adds	r0, #1
 80069d6:	d1e5      	bne.n	80069a4 <_printf_float+0x340>
 80069d8:	e6a1      	b.n	800671e <_printf_float+0xba>
 80069da:	4653      	mov	r3, sl
 80069dc:	4642      	mov	r2, r8
 80069de:	4631      	mov	r1, r6
 80069e0:	4628      	mov	r0, r5
 80069e2:	47b8      	blx	r7
 80069e4:	3001      	adds	r0, #1
 80069e6:	d1e9      	bne.n	80069bc <_printf_float+0x358>
 80069e8:	e699      	b.n	800671e <_printf_float+0xba>
 80069ea:	2301      	movs	r3, #1
 80069ec:	464a      	mov	r2, r9
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b8      	blx	r7
 80069f4:	3001      	adds	r0, #1
 80069f6:	f43f ae92 	beq.w	800671e <_printf_float+0xba>
 80069fa:	f108 0801 	add.w	r8, r8, #1
 80069fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a02:	1a9b      	subs	r3, r3, r2
 8006a04:	eba3 030a 	sub.w	r3, r3, sl
 8006a08:	4543      	cmp	r3, r8
 8006a0a:	dcee      	bgt.n	80069ea <_printf_float+0x386>
 8006a0c:	e74a      	b.n	80068a4 <_printf_float+0x240>
 8006a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a10:	2a01      	cmp	r2, #1
 8006a12:	dc01      	bgt.n	8006a18 <_printf_float+0x3b4>
 8006a14:	07db      	lsls	r3, r3, #31
 8006a16:	d53a      	bpl.n	8006a8e <_printf_float+0x42a>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	4642      	mov	r2, r8
 8006a1c:	4631      	mov	r1, r6
 8006a1e:	4628      	mov	r0, r5
 8006a20:	47b8      	blx	r7
 8006a22:	3001      	adds	r0, #1
 8006a24:	f43f ae7b 	beq.w	800671e <_printf_float+0xba>
 8006a28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a2c:	4631      	mov	r1, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	47b8      	blx	r7
 8006a32:	3001      	adds	r0, #1
 8006a34:	f108 0801 	add.w	r8, r8, #1
 8006a38:	f43f ae71 	beq.w	800671e <_printf_float+0xba>
 8006a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006a44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f7fa f85d 	bl	8000b08 <__aeabi_dcmpeq>
 8006a4e:	b9c8      	cbnz	r0, 8006a84 <_printf_float+0x420>
 8006a50:	4653      	mov	r3, sl
 8006a52:	4642      	mov	r2, r8
 8006a54:	4631      	mov	r1, r6
 8006a56:	4628      	mov	r0, r5
 8006a58:	47b8      	blx	r7
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d10e      	bne.n	8006a7c <_printf_float+0x418>
 8006a5e:	e65e      	b.n	800671e <_printf_float+0xba>
 8006a60:	2301      	movs	r3, #1
 8006a62:	4652      	mov	r2, sl
 8006a64:	4631      	mov	r1, r6
 8006a66:	4628      	mov	r0, r5
 8006a68:	47b8      	blx	r7
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	f43f ae57 	beq.w	800671e <_printf_float+0xba>
 8006a70:	f108 0801 	add.w	r8, r8, #1
 8006a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a76:	3b01      	subs	r3, #1
 8006a78:	4543      	cmp	r3, r8
 8006a7a:	dcf1      	bgt.n	8006a60 <_printf_float+0x3fc>
 8006a7c:	464b      	mov	r3, r9
 8006a7e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a82:	e6de      	b.n	8006842 <_printf_float+0x1de>
 8006a84:	f04f 0800 	mov.w	r8, #0
 8006a88:	f104 0a1a 	add.w	sl, r4, #26
 8006a8c:	e7f2      	b.n	8006a74 <_printf_float+0x410>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e7df      	b.n	8006a52 <_printf_float+0x3ee>
 8006a92:	2301      	movs	r3, #1
 8006a94:	464a      	mov	r2, r9
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f ae3e 	beq.w	800671e <_printf_float+0xba>
 8006aa2:	f108 0801 	add.w	r8, r8, #1
 8006aa6:	68e3      	ldr	r3, [r4, #12]
 8006aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006aaa:	1a9b      	subs	r3, r3, r2
 8006aac:	4543      	cmp	r3, r8
 8006aae:	dcf0      	bgt.n	8006a92 <_printf_float+0x42e>
 8006ab0:	e6fc      	b.n	80068ac <_printf_float+0x248>
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	f104 0919 	add.w	r9, r4, #25
 8006aba:	e7f4      	b.n	8006aa6 <_printf_float+0x442>
 8006abc:	2900      	cmp	r1, #0
 8006abe:	f43f ae8b 	beq.w	80067d8 <_printf_float+0x174>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006ac8:	ab09      	add	r3, sp, #36	; 0x24
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	ec49 8b10 	vmov	d0, r8, r9
 8006ad0:	6022      	str	r2, [r4, #0]
 8006ad2:	f8cd a004 	str.w	sl, [sp, #4]
 8006ad6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ada:	4628      	mov	r0, r5
 8006adc:	f7ff fd2e 	bl	800653c <__cvt>
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	e648      	b.n	8006776 <_printf_float+0x112>

08006ae4 <_printf_common>:
 8006ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ae8:	4691      	mov	r9, r2
 8006aea:	461f      	mov	r7, r3
 8006aec:	688a      	ldr	r2, [r1, #8]
 8006aee:	690b      	ldr	r3, [r1, #16]
 8006af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006af4:	4293      	cmp	r3, r2
 8006af6:	bfb8      	it	lt
 8006af8:	4613      	movlt	r3, r2
 8006afa:	f8c9 3000 	str.w	r3, [r9]
 8006afe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b02:	4606      	mov	r6, r0
 8006b04:	460c      	mov	r4, r1
 8006b06:	b112      	cbz	r2, 8006b0e <_printf_common+0x2a>
 8006b08:	3301      	adds	r3, #1
 8006b0a:	f8c9 3000 	str.w	r3, [r9]
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	0699      	lsls	r1, r3, #26
 8006b12:	bf42      	ittt	mi
 8006b14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b18:	3302      	addmi	r3, #2
 8006b1a:	f8c9 3000 	strmi.w	r3, [r9]
 8006b1e:	6825      	ldr	r5, [r4, #0]
 8006b20:	f015 0506 	ands.w	r5, r5, #6
 8006b24:	d107      	bne.n	8006b36 <_printf_common+0x52>
 8006b26:	f104 0a19 	add.w	sl, r4, #25
 8006b2a:	68e3      	ldr	r3, [r4, #12]
 8006b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	42ab      	cmp	r3, r5
 8006b34:	dc28      	bgt.n	8006b88 <_printf_common+0xa4>
 8006b36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	3300      	adds	r3, #0
 8006b3e:	bf18      	it	ne
 8006b40:	2301      	movne	r3, #1
 8006b42:	0692      	lsls	r2, r2, #26
 8006b44:	d42d      	bmi.n	8006ba2 <_printf_common+0xbe>
 8006b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b4a:	4639      	mov	r1, r7
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	47c0      	blx	r8
 8006b50:	3001      	adds	r0, #1
 8006b52:	d020      	beq.n	8006b96 <_printf_common+0xb2>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	68e5      	ldr	r5, [r4, #12]
 8006b58:	f8d9 2000 	ldr.w	r2, [r9]
 8006b5c:	f003 0306 	and.w	r3, r3, #6
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	bf08      	it	eq
 8006b64:	1aad      	subeq	r5, r5, r2
 8006b66:	68a3      	ldr	r3, [r4, #8]
 8006b68:	6922      	ldr	r2, [r4, #16]
 8006b6a:	bf0c      	ite	eq
 8006b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b70:	2500      	movne	r5, #0
 8006b72:	4293      	cmp	r3, r2
 8006b74:	bfc4      	itt	gt
 8006b76:	1a9b      	subgt	r3, r3, r2
 8006b78:	18ed      	addgt	r5, r5, r3
 8006b7a:	f04f 0900 	mov.w	r9, #0
 8006b7e:	341a      	adds	r4, #26
 8006b80:	454d      	cmp	r5, r9
 8006b82:	d11a      	bne.n	8006bba <_printf_common+0xd6>
 8006b84:	2000      	movs	r0, #0
 8006b86:	e008      	b.n	8006b9a <_printf_common+0xb6>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	4639      	mov	r1, r7
 8006b8e:	4630      	mov	r0, r6
 8006b90:	47c0      	blx	r8
 8006b92:	3001      	adds	r0, #1
 8006b94:	d103      	bne.n	8006b9e <_printf_common+0xba>
 8006b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b9e:	3501      	adds	r5, #1
 8006ba0:	e7c3      	b.n	8006b2a <_printf_common+0x46>
 8006ba2:	18e1      	adds	r1, r4, r3
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	2030      	movs	r0, #48	; 0x30
 8006ba8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bac:	4422      	add	r2, r4
 8006bae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bb6:	3302      	adds	r3, #2
 8006bb8:	e7c5      	b.n	8006b46 <_printf_common+0x62>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	47c0      	blx	r8
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d0e6      	beq.n	8006b96 <_printf_common+0xb2>
 8006bc8:	f109 0901 	add.w	r9, r9, #1
 8006bcc:	e7d8      	b.n	8006b80 <_printf_common+0x9c>
	...

08006bd0 <_printf_i>:
 8006bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006bd8:	460c      	mov	r4, r1
 8006bda:	7e09      	ldrb	r1, [r1, #24]
 8006bdc:	b085      	sub	sp, #20
 8006bde:	296e      	cmp	r1, #110	; 0x6e
 8006be0:	4617      	mov	r7, r2
 8006be2:	4606      	mov	r6, r0
 8006be4:	4698      	mov	r8, r3
 8006be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006be8:	f000 80b3 	beq.w	8006d52 <_printf_i+0x182>
 8006bec:	d822      	bhi.n	8006c34 <_printf_i+0x64>
 8006bee:	2963      	cmp	r1, #99	; 0x63
 8006bf0:	d036      	beq.n	8006c60 <_printf_i+0x90>
 8006bf2:	d80a      	bhi.n	8006c0a <_printf_i+0x3a>
 8006bf4:	2900      	cmp	r1, #0
 8006bf6:	f000 80b9 	beq.w	8006d6c <_printf_i+0x19c>
 8006bfa:	2958      	cmp	r1, #88	; 0x58
 8006bfc:	f000 8083 	beq.w	8006d06 <_printf_i+0x136>
 8006c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c08:	e032      	b.n	8006c70 <_printf_i+0xa0>
 8006c0a:	2964      	cmp	r1, #100	; 0x64
 8006c0c:	d001      	beq.n	8006c12 <_printf_i+0x42>
 8006c0e:	2969      	cmp	r1, #105	; 0x69
 8006c10:	d1f6      	bne.n	8006c00 <_printf_i+0x30>
 8006c12:	6820      	ldr	r0, [r4, #0]
 8006c14:	6813      	ldr	r3, [r2, #0]
 8006c16:	0605      	lsls	r5, r0, #24
 8006c18:	f103 0104 	add.w	r1, r3, #4
 8006c1c:	d52a      	bpl.n	8006c74 <_printf_i+0xa4>
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6011      	str	r1, [r2, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	da03      	bge.n	8006c2e <_printf_i+0x5e>
 8006c26:	222d      	movs	r2, #45	; 0x2d
 8006c28:	425b      	negs	r3, r3
 8006c2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c2e:	486f      	ldr	r0, [pc, #444]	; (8006dec <_printf_i+0x21c>)
 8006c30:	220a      	movs	r2, #10
 8006c32:	e039      	b.n	8006ca8 <_printf_i+0xd8>
 8006c34:	2973      	cmp	r1, #115	; 0x73
 8006c36:	f000 809d 	beq.w	8006d74 <_printf_i+0x1a4>
 8006c3a:	d808      	bhi.n	8006c4e <_printf_i+0x7e>
 8006c3c:	296f      	cmp	r1, #111	; 0x6f
 8006c3e:	d020      	beq.n	8006c82 <_printf_i+0xb2>
 8006c40:	2970      	cmp	r1, #112	; 0x70
 8006c42:	d1dd      	bne.n	8006c00 <_printf_i+0x30>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	f043 0320 	orr.w	r3, r3, #32
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	e003      	b.n	8006c56 <_printf_i+0x86>
 8006c4e:	2975      	cmp	r1, #117	; 0x75
 8006c50:	d017      	beq.n	8006c82 <_printf_i+0xb2>
 8006c52:	2978      	cmp	r1, #120	; 0x78
 8006c54:	d1d4      	bne.n	8006c00 <_printf_i+0x30>
 8006c56:	2378      	movs	r3, #120	; 0x78
 8006c58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c5c:	4864      	ldr	r0, [pc, #400]	; (8006df0 <_printf_i+0x220>)
 8006c5e:	e055      	b.n	8006d0c <_printf_i+0x13c>
 8006c60:	6813      	ldr	r3, [r2, #0]
 8006c62:	1d19      	adds	r1, r3, #4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6011      	str	r1, [r2, #0]
 8006c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c70:	2301      	movs	r3, #1
 8006c72:	e08c      	b.n	8006d8e <_printf_i+0x1be>
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6011      	str	r1, [r2, #0]
 8006c78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c7c:	bf18      	it	ne
 8006c7e:	b21b      	sxthne	r3, r3
 8006c80:	e7cf      	b.n	8006c22 <_printf_i+0x52>
 8006c82:	6813      	ldr	r3, [r2, #0]
 8006c84:	6825      	ldr	r5, [r4, #0]
 8006c86:	1d18      	adds	r0, r3, #4
 8006c88:	6010      	str	r0, [r2, #0]
 8006c8a:	0628      	lsls	r0, r5, #24
 8006c8c:	d501      	bpl.n	8006c92 <_printf_i+0xc2>
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	e002      	b.n	8006c98 <_printf_i+0xc8>
 8006c92:	0668      	lsls	r0, r5, #25
 8006c94:	d5fb      	bpl.n	8006c8e <_printf_i+0xbe>
 8006c96:	881b      	ldrh	r3, [r3, #0]
 8006c98:	4854      	ldr	r0, [pc, #336]	; (8006dec <_printf_i+0x21c>)
 8006c9a:	296f      	cmp	r1, #111	; 0x6f
 8006c9c:	bf14      	ite	ne
 8006c9e:	220a      	movne	r2, #10
 8006ca0:	2208      	moveq	r2, #8
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ca8:	6865      	ldr	r5, [r4, #4]
 8006caa:	60a5      	str	r5, [r4, #8]
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	f2c0 8095 	blt.w	8006ddc <_printf_i+0x20c>
 8006cb2:	6821      	ldr	r1, [r4, #0]
 8006cb4:	f021 0104 	bic.w	r1, r1, #4
 8006cb8:	6021      	str	r1, [r4, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d13d      	bne.n	8006d3a <_printf_i+0x16a>
 8006cbe:	2d00      	cmp	r5, #0
 8006cc0:	f040 808e 	bne.w	8006de0 <_printf_i+0x210>
 8006cc4:	4665      	mov	r5, ip
 8006cc6:	2a08      	cmp	r2, #8
 8006cc8:	d10b      	bne.n	8006ce2 <_printf_i+0x112>
 8006cca:	6823      	ldr	r3, [r4, #0]
 8006ccc:	07db      	lsls	r3, r3, #31
 8006cce:	d508      	bpl.n	8006ce2 <_printf_i+0x112>
 8006cd0:	6923      	ldr	r3, [r4, #16]
 8006cd2:	6862      	ldr	r2, [r4, #4]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	bfde      	ittt	le
 8006cd8:	2330      	movle	r3, #48	; 0x30
 8006cda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cde:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ce2:	ebac 0305 	sub.w	r3, ip, r5
 8006ce6:	6123      	str	r3, [r4, #16]
 8006ce8:	f8cd 8000 	str.w	r8, [sp]
 8006cec:	463b      	mov	r3, r7
 8006cee:	aa03      	add	r2, sp, #12
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	f7ff fef6 	bl	8006ae4 <_printf_common>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d14d      	bne.n	8006d98 <_printf_i+0x1c8>
 8006cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d00:	b005      	add	sp, #20
 8006d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d06:	4839      	ldr	r0, [pc, #228]	; (8006dec <_printf_i+0x21c>)
 8006d08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d0c:	6813      	ldr	r3, [r2, #0]
 8006d0e:	6821      	ldr	r1, [r4, #0]
 8006d10:	1d1d      	adds	r5, r3, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6015      	str	r5, [r2, #0]
 8006d16:	060a      	lsls	r2, r1, #24
 8006d18:	d50b      	bpl.n	8006d32 <_printf_i+0x162>
 8006d1a:	07ca      	lsls	r2, r1, #31
 8006d1c:	bf44      	itt	mi
 8006d1e:	f041 0120 	orrmi.w	r1, r1, #32
 8006d22:	6021      	strmi	r1, [r4, #0]
 8006d24:	b91b      	cbnz	r3, 8006d2e <_printf_i+0x15e>
 8006d26:	6822      	ldr	r2, [r4, #0]
 8006d28:	f022 0220 	bic.w	r2, r2, #32
 8006d2c:	6022      	str	r2, [r4, #0]
 8006d2e:	2210      	movs	r2, #16
 8006d30:	e7b7      	b.n	8006ca2 <_printf_i+0xd2>
 8006d32:	064d      	lsls	r5, r1, #25
 8006d34:	bf48      	it	mi
 8006d36:	b29b      	uxthmi	r3, r3
 8006d38:	e7ef      	b.n	8006d1a <_printf_i+0x14a>
 8006d3a:	4665      	mov	r5, ip
 8006d3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d40:	fb02 3311 	mls	r3, r2, r1, r3
 8006d44:	5cc3      	ldrb	r3, [r0, r3]
 8006d46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	d1f5      	bne.n	8006d3c <_printf_i+0x16c>
 8006d50:	e7b9      	b.n	8006cc6 <_printf_i+0xf6>
 8006d52:	6813      	ldr	r3, [r2, #0]
 8006d54:	6825      	ldr	r5, [r4, #0]
 8006d56:	6961      	ldr	r1, [r4, #20]
 8006d58:	1d18      	adds	r0, r3, #4
 8006d5a:	6010      	str	r0, [r2, #0]
 8006d5c:	0628      	lsls	r0, r5, #24
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	d501      	bpl.n	8006d66 <_printf_i+0x196>
 8006d62:	6019      	str	r1, [r3, #0]
 8006d64:	e002      	b.n	8006d6c <_printf_i+0x19c>
 8006d66:	066a      	lsls	r2, r5, #25
 8006d68:	d5fb      	bpl.n	8006d62 <_printf_i+0x192>
 8006d6a:	8019      	strh	r1, [r3, #0]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	6123      	str	r3, [r4, #16]
 8006d70:	4665      	mov	r5, ip
 8006d72:	e7b9      	b.n	8006ce8 <_printf_i+0x118>
 8006d74:	6813      	ldr	r3, [r2, #0]
 8006d76:	1d19      	adds	r1, r3, #4
 8006d78:	6011      	str	r1, [r2, #0]
 8006d7a:	681d      	ldr	r5, [r3, #0]
 8006d7c:	6862      	ldr	r2, [r4, #4]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4628      	mov	r0, r5
 8006d82:	f7f9 fa4d 	bl	8000220 <memchr>
 8006d86:	b108      	cbz	r0, 8006d8c <_printf_i+0x1bc>
 8006d88:	1b40      	subs	r0, r0, r5
 8006d8a:	6060      	str	r0, [r4, #4]
 8006d8c:	6863      	ldr	r3, [r4, #4]
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	2300      	movs	r3, #0
 8006d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d96:	e7a7      	b.n	8006ce8 <_printf_i+0x118>
 8006d98:	6923      	ldr	r3, [r4, #16]
 8006d9a:	462a      	mov	r2, r5
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	4630      	mov	r0, r6
 8006da0:	47c0      	blx	r8
 8006da2:	3001      	adds	r0, #1
 8006da4:	d0aa      	beq.n	8006cfc <_printf_i+0x12c>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	079b      	lsls	r3, r3, #30
 8006daa:	d413      	bmi.n	8006dd4 <_printf_i+0x204>
 8006dac:	68e0      	ldr	r0, [r4, #12]
 8006dae:	9b03      	ldr	r3, [sp, #12]
 8006db0:	4298      	cmp	r0, r3
 8006db2:	bfb8      	it	lt
 8006db4:	4618      	movlt	r0, r3
 8006db6:	e7a3      	b.n	8006d00 <_printf_i+0x130>
 8006db8:	2301      	movs	r3, #1
 8006dba:	464a      	mov	r2, r9
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	47c0      	blx	r8
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	d09a      	beq.n	8006cfc <_printf_i+0x12c>
 8006dc6:	3501      	adds	r5, #1
 8006dc8:	68e3      	ldr	r3, [r4, #12]
 8006dca:	9a03      	ldr	r2, [sp, #12]
 8006dcc:	1a9b      	subs	r3, r3, r2
 8006dce:	42ab      	cmp	r3, r5
 8006dd0:	dcf2      	bgt.n	8006db8 <_printf_i+0x1e8>
 8006dd2:	e7eb      	b.n	8006dac <_printf_i+0x1dc>
 8006dd4:	2500      	movs	r5, #0
 8006dd6:	f104 0919 	add.w	r9, r4, #25
 8006dda:	e7f5      	b.n	8006dc8 <_printf_i+0x1f8>
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1ac      	bne.n	8006d3a <_printf_i+0x16a>
 8006de0:	7803      	ldrb	r3, [r0, #0]
 8006de2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006de6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dea:	e76c      	b.n	8006cc6 <_printf_i+0xf6>
 8006dec:	08009bb6 	.word	0x08009bb6
 8006df0:	08009bc7 	.word	0x08009bc7

08006df4 <siprintf>:
 8006df4:	b40e      	push	{r1, r2, r3}
 8006df6:	b500      	push	{lr}
 8006df8:	b09c      	sub	sp, #112	; 0x70
 8006dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8006dfc:	9002      	str	r0, [sp, #8]
 8006dfe:	9006      	str	r0, [sp, #24]
 8006e00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e04:	4809      	ldr	r0, [pc, #36]	; (8006e2c <siprintf+0x38>)
 8006e06:	9107      	str	r1, [sp, #28]
 8006e08:	9104      	str	r1, [sp, #16]
 8006e0a:	4909      	ldr	r1, [pc, #36]	; (8006e30 <siprintf+0x3c>)
 8006e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e10:	9105      	str	r1, [sp, #20]
 8006e12:	6800      	ldr	r0, [r0, #0]
 8006e14:	9301      	str	r3, [sp, #4]
 8006e16:	a902      	add	r1, sp, #8
 8006e18:	f001 fa6e 	bl	80082f8 <_svfiprintf_r>
 8006e1c:	9b02      	ldr	r3, [sp, #8]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	b01c      	add	sp, #112	; 0x70
 8006e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e28:	b003      	add	sp, #12
 8006e2a:	4770      	bx	lr
 8006e2c:	20000030 	.word	0x20000030
 8006e30:	ffff0208 	.word	0xffff0208

08006e34 <strcat>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	4603      	mov	r3, r0
 8006e38:	781a      	ldrb	r2, [r3, #0]
 8006e3a:	1c5c      	adds	r4, r3, #1
 8006e3c:	b93a      	cbnz	r2, 8006e4e <strcat+0x1a>
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e48:	2a00      	cmp	r2, #0
 8006e4a:	d1f9      	bne.n	8006e40 <strcat+0xc>
 8006e4c:	bd10      	pop	{r4, pc}
 8006e4e:	4623      	mov	r3, r4
 8006e50:	e7f2      	b.n	8006e38 <strcat+0x4>

08006e52 <quorem>:
 8006e52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e56:	6903      	ldr	r3, [r0, #16]
 8006e58:	690c      	ldr	r4, [r1, #16]
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	f2c0 8082 	blt.w	8006f66 <quorem+0x114>
 8006e62:	3c01      	subs	r4, #1
 8006e64:	f101 0714 	add.w	r7, r1, #20
 8006e68:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006e6c:	f100 0614 	add.w	r6, r0, #20
 8006e70:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006e74:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006e78:	eb06 030c 	add.w	r3, r6, ip
 8006e7c:	3501      	adds	r5, #1
 8006e7e:	eb07 090c 	add.w	r9, r7, ip
 8006e82:	9301      	str	r3, [sp, #4]
 8006e84:	fbb0 f5f5 	udiv	r5, r0, r5
 8006e88:	b395      	cbz	r5, 8006ef0 <quorem+0x9e>
 8006e8a:	f04f 0a00 	mov.w	sl, #0
 8006e8e:	4638      	mov	r0, r7
 8006e90:	46b6      	mov	lr, r6
 8006e92:	46d3      	mov	fp, sl
 8006e94:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e98:	b293      	uxth	r3, r2
 8006e9a:	fb05 a303 	mla	r3, r5, r3, sl
 8006e9e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	ebab 0303 	sub.w	r3, fp, r3
 8006ea8:	0c12      	lsrs	r2, r2, #16
 8006eaa:	f8de b000 	ldr.w	fp, [lr]
 8006eae:	fb05 a202 	mla	r2, r5, r2, sl
 8006eb2:	fa13 f38b 	uxtah	r3, r3, fp
 8006eb6:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006eba:	fa1f fb82 	uxth.w	fp, r2
 8006ebe:	f8de 2000 	ldr.w	r2, [lr]
 8006ec2:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006ec6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ed0:	4581      	cmp	r9, r0
 8006ed2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006ed6:	f84e 3b04 	str.w	r3, [lr], #4
 8006eda:	d2db      	bcs.n	8006e94 <quorem+0x42>
 8006edc:	f856 300c 	ldr.w	r3, [r6, ip]
 8006ee0:	b933      	cbnz	r3, 8006ef0 <quorem+0x9e>
 8006ee2:	9b01      	ldr	r3, [sp, #4]
 8006ee4:	3b04      	subs	r3, #4
 8006ee6:	429e      	cmp	r6, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	d330      	bcc.n	8006f4e <quorem+0xfc>
 8006eec:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	f001 f82b 	bl	8007f4c <__mcmp>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	db25      	blt.n	8006f46 <quorem+0xf4>
 8006efa:	3501      	adds	r5, #1
 8006efc:	4630      	mov	r0, r6
 8006efe:	f04f 0c00 	mov.w	ip, #0
 8006f02:	f857 2b04 	ldr.w	r2, [r7], #4
 8006f06:	f8d0 e000 	ldr.w	lr, [r0]
 8006f0a:	b293      	uxth	r3, r2
 8006f0c:	ebac 0303 	sub.w	r3, ip, r3
 8006f10:	0c12      	lsrs	r2, r2, #16
 8006f12:	fa13 f38e 	uxtah	r3, r3, lr
 8006f16:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f24:	45b9      	cmp	r9, r7
 8006f26:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f2a:	f840 3b04 	str.w	r3, [r0], #4
 8006f2e:	d2e8      	bcs.n	8006f02 <quorem+0xb0>
 8006f30:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f34:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006f38:	b92a      	cbnz	r2, 8006f46 <quorem+0xf4>
 8006f3a:	3b04      	subs	r3, #4
 8006f3c:	429e      	cmp	r6, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	d30b      	bcc.n	8006f5a <quorem+0x108>
 8006f42:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f46:	4628      	mov	r0, r5
 8006f48:	b003      	add	sp, #12
 8006f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	3b04      	subs	r3, #4
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	d1ca      	bne.n	8006eec <quorem+0x9a>
 8006f56:	3c01      	subs	r4, #1
 8006f58:	e7c5      	b.n	8006ee6 <quorem+0x94>
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	3b04      	subs	r3, #4
 8006f5e:	2a00      	cmp	r2, #0
 8006f60:	d1ef      	bne.n	8006f42 <quorem+0xf0>
 8006f62:	3c01      	subs	r4, #1
 8006f64:	e7ea      	b.n	8006f3c <quorem+0xea>
 8006f66:	2000      	movs	r0, #0
 8006f68:	e7ee      	b.n	8006f48 <quorem+0xf6>
 8006f6a:	0000      	movs	r0, r0
 8006f6c:	0000      	movs	r0, r0
	...

08006f70 <_dtoa_r>:
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	ec57 6b10 	vmov	r6, r7, d0
 8006f78:	b097      	sub	sp, #92	; 0x5c
 8006f7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f7c:	9106      	str	r1, [sp, #24]
 8006f7e:	4604      	mov	r4, r0
 8006f80:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f82:	9312      	str	r3, [sp, #72]	; 0x48
 8006f84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f88:	e9cd 6700 	strd	r6, r7, [sp]
 8006f8c:	b93d      	cbnz	r5, 8006f9e <_dtoa_r+0x2e>
 8006f8e:	2010      	movs	r0, #16
 8006f90:	f000 fdb4 	bl	8007afc <malloc>
 8006f94:	6260      	str	r0, [r4, #36]	; 0x24
 8006f96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f9a:	6005      	str	r5, [r0, #0]
 8006f9c:	60c5      	str	r5, [r0, #12]
 8006f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fa0:	6819      	ldr	r1, [r3, #0]
 8006fa2:	b151      	cbz	r1, 8006fba <_dtoa_r+0x4a>
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	604a      	str	r2, [r1, #4]
 8006fa8:	2301      	movs	r3, #1
 8006faa:	4093      	lsls	r3, r2
 8006fac:	608b      	str	r3, [r1, #8]
 8006fae:	4620      	mov	r0, r4
 8006fb0:	f000 fdeb 	bl	8007b8a <_Bfree>
 8006fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	1e3b      	subs	r3, r7, #0
 8006fbc:	bfbb      	ittet	lt
 8006fbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006fc2:	9301      	strlt	r3, [sp, #4]
 8006fc4:	2300      	movge	r3, #0
 8006fc6:	2201      	movlt	r2, #1
 8006fc8:	bfac      	ite	ge
 8006fca:	f8c8 3000 	strge.w	r3, [r8]
 8006fce:	f8c8 2000 	strlt.w	r2, [r8]
 8006fd2:	4baf      	ldr	r3, [pc, #700]	; (8007290 <_dtoa_r+0x320>)
 8006fd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006fd8:	ea33 0308 	bics.w	r3, r3, r8
 8006fdc:	d114      	bne.n	8007008 <_dtoa_r+0x98>
 8006fde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fe0:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	9b00      	ldr	r3, [sp, #0]
 8006fe8:	b923      	cbnz	r3, 8006ff4 <_dtoa_r+0x84>
 8006fea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f000 8542 	beq.w	8007a78 <_dtoa_r+0xb08>
 8006ff4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ff6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80072a4 <_dtoa_r+0x334>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 8544 	beq.w	8007a88 <_dtoa_r+0xb18>
 8007000:	f10b 0303 	add.w	r3, fp, #3
 8007004:	f000 bd3e 	b.w	8007a84 <_dtoa_r+0xb14>
 8007008:	e9dd 6700 	ldrd	r6, r7, [sp]
 800700c:	2200      	movs	r2, #0
 800700e:	2300      	movs	r3, #0
 8007010:	4630      	mov	r0, r6
 8007012:	4639      	mov	r1, r7
 8007014:	f7f9 fd78 	bl	8000b08 <__aeabi_dcmpeq>
 8007018:	4681      	mov	r9, r0
 800701a:	b168      	cbz	r0, 8007038 <_dtoa_r+0xc8>
 800701c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800701e:	2301      	movs	r3, #1
 8007020:	6013      	str	r3, [r2, #0]
 8007022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007024:	2b00      	cmp	r3, #0
 8007026:	f000 8524 	beq.w	8007a72 <_dtoa_r+0xb02>
 800702a:	4b9a      	ldr	r3, [pc, #616]	; (8007294 <_dtoa_r+0x324>)
 800702c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800702e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	f000 bd28 	b.w	8007a88 <_dtoa_r+0xb18>
 8007038:	aa14      	add	r2, sp, #80	; 0x50
 800703a:	a915      	add	r1, sp, #84	; 0x54
 800703c:	ec47 6b10 	vmov	d0, r6, r7
 8007040:	4620      	mov	r0, r4
 8007042:	f000 fffa 	bl	800803a <__d2b>
 8007046:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800704a:	9004      	str	r0, [sp, #16]
 800704c:	2d00      	cmp	r5, #0
 800704e:	d07c      	beq.n	800714a <_dtoa_r+0x1da>
 8007050:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007054:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007058:	46b2      	mov	sl, r6
 800705a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800705e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007062:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007066:	2200      	movs	r2, #0
 8007068:	4b8b      	ldr	r3, [pc, #556]	; (8007298 <_dtoa_r+0x328>)
 800706a:	4650      	mov	r0, sl
 800706c:	4659      	mov	r1, fp
 800706e:	f7f9 f92b 	bl	80002c8 <__aeabi_dsub>
 8007072:	a381      	add	r3, pc, #516	; (adr r3, 8007278 <_dtoa_r+0x308>)
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	f7f9 fade 	bl	8000638 <__aeabi_dmul>
 800707c:	a380      	add	r3, pc, #512	; (adr r3, 8007280 <_dtoa_r+0x310>)
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	f7f9 f923 	bl	80002cc <__adddf3>
 8007086:	4606      	mov	r6, r0
 8007088:	4628      	mov	r0, r5
 800708a:	460f      	mov	r7, r1
 800708c:	f7f9 fa6a 	bl	8000564 <__aeabi_i2d>
 8007090:	a37d      	add	r3, pc, #500	; (adr r3, 8007288 <_dtoa_r+0x318>)
 8007092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007096:	f7f9 facf 	bl	8000638 <__aeabi_dmul>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	4630      	mov	r0, r6
 80070a0:	4639      	mov	r1, r7
 80070a2:	f7f9 f913 	bl	80002cc <__adddf3>
 80070a6:	4606      	mov	r6, r0
 80070a8:	460f      	mov	r7, r1
 80070aa:	f7f9 fd75 	bl	8000b98 <__aeabi_d2iz>
 80070ae:	2200      	movs	r2, #0
 80070b0:	4682      	mov	sl, r0
 80070b2:	2300      	movs	r3, #0
 80070b4:	4630      	mov	r0, r6
 80070b6:	4639      	mov	r1, r7
 80070b8:	f7f9 fd30 	bl	8000b1c <__aeabi_dcmplt>
 80070bc:	b148      	cbz	r0, 80070d2 <_dtoa_r+0x162>
 80070be:	4650      	mov	r0, sl
 80070c0:	f7f9 fa50 	bl	8000564 <__aeabi_i2d>
 80070c4:	4632      	mov	r2, r6
 80070c6:	463b      	mov	r3, r7
 80070c8:	f7f9 fd1e 	bl	8000b08 <__aeabi_dcmpeq>
 80070cc:	b908      	cbnz	r0, 80070d2 <_dtoa_r+0x162>
 80070ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80070d2:	f1ba 0f16 	cmp.w	sl, #22
 80070d6:	d859      	bhi.n	800718c <_dtoa_r+0x21c>
 80070d8:	4970      	ldr	r1, [pc, #448]	; (800729c <_dtoa_r+0x32c>)
 80070da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80070de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070e6:	f7f9 fd37 	bl	8000b58 <__aeabi_dcmpgt>
 80070ea:	2800      	cmp	r0, #0
 80070ec:	d050      	beq.n	8007190 <_dtoa_r+0x220>
 80070ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80070f2:	2300      	movs	r3, #0
 80070f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80070f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070f8:	1b5d      	subs	r5, r3, r5
 80070fa:	f1b5 0801 	subs.w	r8, r5, #1
 80070fe:	bf49      	itett	mi
 8007100:	f1c5 0301 	rsbmi	r3, r5, #1
 8007104:	2300      	movpl	r3, #0
 8007106:	9305      	strmi	r3, [sp, #20]
 8007108:	f04f 0800 	movmi.w	r8, #0
 800710c:	bf58      	it	pl
 800710e:	9305      	strpl	r3, [sp, #20]
 8007110:	f1ba 0f00 	cmp.w	sl, #0
 8007114:	db3e      	blt.n	8007194 <_dtoa_r+0x224>
 8007116:	2300      	movs	r3, #0
 8007118:	44d0      	add	r8, sl
 800711a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800711e:	9307      	str	r3, [sp, #28]
 8007120:	9b06      	ldr	r3, [sp, #24]
 8007122:	2b09      	cmp	r3, #9
 8007124:	f200 8090 	bhi.w	8007248 <_dtoa_r+0x2d8>
 8007128:	2b05      	cmp	r3, #5
 800712a:	bfc4      	itt	gt
 800712c:	3b04      	subgt	r3, #4
 800712e:	9306      	strgt	r3, [sp, #24]
 8007130:	9b06      	ldr	r3, [sp, #24]
 8007132:	f1a3 0302 	sub.w	r3, r3, #2
 8007136:	bfcc      	ite	gt
 8007138:	2500      	movgt	r5, #0
 800713a:	2501      	movle	r5, #1
 800713c:	2b03      	cmp	r3, #3
 800713e:	f200 808f 	bhi.w	8007260 <_dtoa_r+0x2f0>
 8007142:	e8df f003 	tbb	[pc, r3]
 8007146:	7f7d      	.short	0x7f7d
 8007148:	7131      	.short	0x7131
 800714a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800714e:	441d      	add	r5, r3
 8007150:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007154:	2820      	cmp	r0, #32
 8007156:	dd13      	ble.n	8007180 <_dtoa_r+0x210>
 8007158:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800715c:	9b00      	ldr	r3, [sp, #0]
 800715e:	fa08 f800 	lsl.w	r8, r8, r0
 8007162:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007166:	fa23 f000 	lsr.w	r0, r3, r0
 800716a:	ea48 0000 	orr.w	r0, r8, r0
 800716e:	f7f9 f9e9 	bl	8000544 <__aeabi_ui2d>
 8007172:	2301      	movs	r3, #1
 8007174:	4682      	mov	sl, r0
 8007176:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800717a:	3d01      	subs	r5, #1
 800717c:	9313      	str	r3, [sp, #76]	; 0x4c
 800717e:	e772      	b.n	8007066 <_dtoa_r+0xf6>
 8007180:	9b00      	ldr	r3, [sp, #0]
 8007182:	f1c0 0020 	rsb	r0, r0, #32
 8007186:	fa03 f000 	lsl.w	r0, r3, r0
 800718a:	e7f0      	b.n	800716e <_dtoa_r+0x1fe>
 800718c:	2301      	movs	r3, #1
 800718e:	e7b1      	b.n	80070f4 <_dtoa_r+0x184>
 8007190:	900f      	str	r0, [sp, #60]	; 0x3c
 8007192:	e7b0      	b.n	80070f6 <_dtoa_r+0x186>
 8007194:	9b05      	ldr	r3, [sp, #20]
 8007196:	eba3 030a 	sub.w	r3, r3, sl
 800719a:	9305      	str	r3, [sp, #20]
 800719c:	f1ca 0300 	rsb	r3, sl, #0
 80071a0:	9307      	str	r3, [sp, #28]
 80071a2:	2300      	movs	r3, #0
 80071a4:	930e      	str	r3, [sp, #56]	; 0x38
 80071a6:	e7bb      	b.n	8007120 <_dtoa_r+0x1b0>
 80071a8:	2301      	movs	r3, #1
 80071aa:	930a      	str	r3, [sp, #40]	; 0x28
 80071ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	dd59      	ble.n	8007266 <_dtoa_r+0x2f6>
 80071b2:	9302      	str	r3, [sp, #8]
 80071b4:	4699      	mov	r9, r3
 80071b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071b8:	2200      	movs	r2, #0
 80071ba:	6072      	str	r2, [r6, #4]
 80071bc:	2204      	movs	r2, #4
 80071be:	f102 0014 	add.w	r0, r2, #20
 80071c2:	4298      	cmp	r0, r3
 80071c4:	6871      	ldr	r1, [r6, #4]
 80071c6:	d953      	bls.n	8007270 <_dtoa_r+0x300>
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 fcaa 	bl	8007b22 <_Balloc>
 80071ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d0:	6030      	str	r0, [r6, #0]
 80071d2:	f1b9 0f0e 	cmp.w	r9, #14
 80071d6:	f8d3 b000 	ldr.w	fp, [r3]
 80071da:	f200 80e6 	bhi.w	80073aa <_dtoa_r+0x43a>
 80071de:	2d00      	cmp	r5, #0
 80071e0:	f000 80e3 	beq.w	80073aa <_dtoa_r+0x43a>
 80071e4:	ed9d 7b00 	vldr	d7, [sp]
 80071e8:	f1ba 0f00 	cmp.w	sl, #0
 80071ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80071f0:	dd74      	ble.n	80072dc <_dtoa_r+0x36c>
 80071f2:	4a2a      	ldr	r2, [pc, #168]	; (800729c <_dtoa_r+0x32c>)
 80071f4:	f00a 030f 	and.w	r3, sl, #15
 80071f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071fc:	ed93 7b00 	vldr	d7, [r3]
 8007200:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007204:	06f0      	lsls	r0, r6, #27
 8007206:	ed8d 7b08 	vstr	d7, [sp, #32]
 800720a:	d565      	bpl.n	80072d8 <_dtoa_r+0x368>
 800720c:	4b24      	ldr	r3, [pc, #144]	; (80072a0 <_dtoa_r+0x330>)
 800720e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007212:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007216:	f7f9 fb39 	bl	800088c <__aeabi_ddiv>
 800721a:	e9cd 0100 	strd	r0, r1, [sp]
 800721e:	f006 060f 	and.w	r6, r6, #15
 8007222:	2503      	movs	r5, #3
 8007224:	4f1e      	ldr	r7, [pc, #120]	; (80072a0 <_dtoa_r+0x330>)
 8007226:	e04c      	b.n	80072c2 <_dtoa_r+0x352>
 8007228:	2301      	movs	r3, #1
 800722a:	930a      	str	r3, [sp, #40]	; 0x28
 800722c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800722e:	4453      	add	r3, sl
 8007230:	f103 0901 	add.w	r9, r3, #1
 8007234:	9302      	str	r3, [sp, #8]
 8007236:	464b      	mov	r3, r9
 8007238:	2b01      	cmp	r3, #1
 800723a:	bfb8      	it	lt
 800723c:	2301      	movlt	r3, #1
 800723e:	e7ba      	b.n	80071b6 <_dtoa_r+0x246>
 8007240:	2300      	movs	r3, #0
 8007242:	e7b2      	b.n	80071aa <_dtoa_r+0x23a>
 8007244:	2300      	movs	r3, #0
 8007246:	e7f0      	b.n	800722a <_dtoa_r+0x2ba>
 8007248:	2501      	movs	r5, #1
 800724a:	2300      	movs	r3, #0
 800724c:	9306      	str	r3, [sp, #24]
 800724e:	950a      	str	r5, [sp, #40]	; 0x28
 8007250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007254:	9302      	str	r3, [sp, #8]
 8007256:	4699      	mov	r9, r3
 8007258:	2200      	movs	r2, #0
 800725a:	2312      	movs	r3, #18
 800725c:	920b      	str	r2, [sp, #44]	; 0x2c
 800725e:	e7aa      	b.n	80071b6 <_dtoa_r+0x246>
 8007260:	2301      	movs	r3, #1
 8007262:	930a      	str	r3, [sp, #40]	; 0x28
 8007264:	e7f4      	b.n	8007250 <_dtoa_r+0x2e0>
 8007266:	2301      	movs	r3, #1
 8007268:	9302      	str	r3, [sp, #8]
 800726a:	4699      	mov	r9, r3
 800726c:	461a      	mov	r2, r3
 800726e:	e7f5      	b.n	800725c <_dtoa_r+0x2ec>
 8007270:	3101      	adds	r1, #1
 8007272:	6071      	str	r1, [r6, #4]
 8007274:	0052      	lsls	r2, r2, #1
 8007276:	e7a2      	b.n	80071be <_dtoa_r+0x24e>
 8007278:	636f4361 	.word	0x636f4361
 800727c:	3fd287a7 	.word	0x3fd287a7
 8007280:	8b60c8b3 	.word	0x8b60c8b3
 8007284:	3fc68a28 	.word	0x3fc68a28
 8007288:	509f79fb 	.word	0x509f79fb
 800728c:	3fd34413 	.word	0x3fd34413
 8007290:	7ff00000 	.word	0x7ff00000
 8007294:	08009bb5 	.word	0x08009bb5
 8007298:	3ff80000 	.word	0x3ff80000
 800729c:	08009c10 	.word	0x08009c10
 80072a0:	08009be8 	.word	0x08009be8
 80072a4:	08009be1 	.word	0x08009be1
 80072a8:	07f1      	lsls	r1, r6, #31
 80072aa:	d508      	bpl.n	80072be <_dtoa_r+0x34e>
 80072ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b4:	f7f9 f9c0 	bl	8000638 <__aeabi_dmul>
 80072b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072bc:	3501      	adds	r5, #1
 80072be:	1076      	asrs	r6, r6, #1
 80072c0:	3708      	adds	r7, #8
 80072c2:	2e00      	cmp	r6, #0
 80072c4:	d1f0      	bne.n	80072a8 <_dtoa_r+0x338>
 80072c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072ce:	f7f9 fadd 	bl	800088c <__aeabi_ddiv>
 80072d2:	e9cd 0100 	strd	r0, r1, [sp]
 80072d6:	e01a      	b.n	800730e <_dtoa_r+0x39e>
 80072d8:	2502      	movs	r5, #2
 80072da:	e7a3      	b.n	8007224 <_dtoa_r+0x2b4>
 80072dc:	f000 80a0 	beq.w	8007420 <_dtoa_r+0x4b0>
 80072e0:	f1ca 0600 	rsb	r6, sl, #0
 80072e4:	4b9f      	ldr	r3, [pc, #636]	; (8007564 <_dtoa_r+0x5f4>)
 80072e6:	4fa0      	ldr	r7, [pc, #640]	; (8007568 <_dtoa_r+0x5f8>)
 80072e8:	f006 020f 	and.w	r2, r6, #15
 80072ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072f8:	f7f9 f99e 	bl	8000638 <__aeabi_dmul>
 80072fc:	e9cd 0100 	strd	r0, r1, [sp]
 8007300:	1136      	asrs	r6, r6, #4
 8007302:	2300      	movs	r3, #0
 8007304:	2502      	movs	r5, #2
 8007306:	2e00      	cmp	r6, #0
 8007308:	d17f      	bne.n	800740a <_dtoa_r+0x49a>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e1      	bne.n	80072d2 <_dtoa_r+0x362>
 800730e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 8087 	beq.w	8007424 <_dtoa_r+0x4b4>
 8007316:	e9dd 6700 	ldrd	r6, r7, [sp]
 800731a:	2200      	movs	r2, #0
 800731c:	4b93      	ldr	r3, [pc, #588]	; (800756c <_dtoa_r+0x5fc>)
 800731e:	4630      	mov	r0, r6
 8007320:	4639      	mov	r1, r7
 8007322:	f7f9 fbfb 	bl	8000b1c <__aeabi_dcmplt>
 8007326:	2800      	cmp	r0, #0
 8007328:	d07c      	beq.n	8007424 <_dtoa_r+0x4b4>
 800732a:	f1b9 0f00 	cmp.w	r9, #0
 800732e:	d079      	beq.n	8007424 <_dtoa_r+0x4b4>
 8007330:	9b02      	ldr	r3, [sp, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	dd35      	ble.n	80073a2 <_dtoa_r+0x432>
 8007336:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800733a:	9308      	str	r3, [sp, #32]
 800733c:	4639      	mov	r1, r7
 800733e:	2200      	movs	r2, #0
 8007340:	4b8b      	ldr	r3, [pc, #556]	; (8007570 <_dtoa_r+0x600>)
 8007342:	4630      	mov	r0, r6
 8007344:	f7f9 f978 	bl	8000638 <__aeabi_dmul>
 8007348:	e9cd 0100 	strd	r0, r1, [sp]
 800734c:	9f02      	ldr	r7, [sp, #8]
 800734e:	3501      	adds	r5, #1
 8007350:	4628      	mov	r0, r5
 8007352:	f7f9 f907 	bl	8000564 <__aeabi_i2d>
 8007356:	e9dd 2300 	ldrd	r2, r3, [sp]
 800735a:	f7f9 f96d 	bl	8000638 <__aeabi_dmul>
 800735e:	2200      	movs	r2, #0
 8007360:	4b84      	ldr	r3, [pc, #528]	; (8007574 <_dtoa_r+0x604>)
 8007362:	f7f8 ffb3 	bl	80002cc <__adddf3>
 8007366:	4605      	mov	r5, r0
 8007368:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800736c:	2f00      	cmp	r7, #0
 800736e:	d15d      	bne.n	800742c <_dtoa_r+0x4bc>
 8007370:	2200      	movs	r2, #0
 8007372:	4b81      	ldr	r3, [pc, #516]	; (8007578 <_dtoa_r+0x608>)
 8007374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007378:	f7f8 ffa6 	bl	80002c8 <__aeabi_dsub>
 800737c:	462a      	mov	r2, r5
 800737e:	4633      	mov	r3, r6
 8007380:	e9cd 0100 	strd	r0, r1, [sp]
 8007384:	f7f9 fbe8 	bl	8000b58 <__aeabi_dcmpgt>
 8007388:	2800      	cmp	r0, #0
 800738a:	f040 8288 	bne.w	800789e <_dtoa_r+0x92e>
 800738e:	462a      	mov	r2, r5
 8007390:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007394:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007398:	f7f9 fbc0 	bl	8000b1c <__aeabi_dcmplt>
 800739c:	2800      	cmp	r0, #0
 800739e:	f040 827c 	bne.w	800789a <_dtoa_r+0x92a>
 80073a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073a6:	e9cd 2300 	strd	r2, r3, [sp]
 80073aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f2c0 8150 	blt.w	8007652 <_dtoa_r+0x6e2>
 80073b2:	f1ba 0f0e 	cmp.w	sl, #14
 80073b6:	f300 814c 	bgt.w	8007652 <_dtoa_r+0x6e2>
 80073ba:	4b6a      	ldr	r3, [pc, #424]	; (8007564 <_dtoa_r+0x5f4>)
 80073bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073c0:	ed93 7b00 	vldr	d7, [r3]
 80073c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073cc:	f280 80d8 	bge.w	8007580 <_dtoa_r+0x610>
 80073d0:	f1b9 0f00 	cmp.w	r9, #0
 80073d4:	f300 80d4 	bgt.w	8007580 <_dtoa_r+0x610>
 80073d8:	f040 825e 	bne.w	8007898 <_dtoa_r+0x928>
 80073dc:	2200      	movs	r2, #0
 80073de:	4b66      	ldr	r3, [pc, #408]	; (8007578 <_dtoa_r+0x608>)
 80073e0:	ec51 0b17 	vmov	r0, r1, d7
 80073e4:	f7f9 f928 	bl	8000638 <__aeabi_dmul>
 80073e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073ec:	f7f9 fbaa 	bl	8000b44 <__aeabi_dcmpge>
 80073f0:	464f      	mov	r7, r9
 80073f2:	464e      	mov	r6, r9
 80073f4:	2800      	cmp	r0, #0
 80073f6:	f040 8234 	bne.w	8007862 <_dtoa_r+0x8f2>
 80073fa:	2331      	movs	r3, #49	; 0x31
 80073fc:	f10b 0501 	add.w	r5, fp, #1
 8007400:	f88b 3000 	strb.w	r3, [fp]
 8007404:	f10a 0a01 	add.w	sl, sl, #1
 8007408:	e22f      	b.n	800786a <_dtoa_r+0x8fa>
 800740a:	07f2      	lsls	r2, r6, #31
 800740c:	d505      	bpl.n	800741a <_dtoa_r+0x4aa>
 800740e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007412:	f7f9 f911 	bl	8000638 <__aeabi_dmul>
 8007416:	3501      	adds	r5, #1
 8007418:	2301      	movs	r3, #1
 800741a:	1076      	asrs	r6, r6, #1
 800741c:	3708      	adds	r7, #8
 800741e:	e772      	b.n	8007306 <_dtoa_r+0x396>
 8007420:	2502      	movs	r5, #2
 8007422:	e774      	b.n	800730e <_dtoa_r+0x39e>
 8007424:	f8cd a020 	str.w	sl, [sp, #32]
 8007428:	464f      	mov	r7, r9
 800742a:	e791      	b.n	8007350 <_dtoa_r+0x3e0>
 800742c:	4b4d      	ldr	r3, [pc, #308]	; (8007564 <_dtoa_r+0x5f4>)
 800742e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007432:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007438:	2b00      	cmp	r3, #0
 800743a:	d047      	beq.n	80074cc <_dtoa_r+0x55c>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	2000      	movs	r0, #0
 8007442:	494e      	ldr	r1, [pc, #312]	; (800757c <_dtoa_r+0x60c>)
 8007444:	f7f9 fa22 	bl	800088c <__aeabi_ddiv>
 8007448:	462a      	mov	r2, r5
 800744a:	4633      	mov	r3, r6
 800744c:	f7f8 ff3c 	bl	80002c8 <__aeabi_dsub>
 8007450:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007454:	465d      	mov	r5, fp
 8007456:	e9dd 0100 	ldrd	r0, r1, [sp]
 800745a:	f7f9 fb9d 	bl	8000b98 <__aeabi_d2iz>
 800745e:	4606      	mov	r6, r0
 8007460:	f7f9 f880 	bl	8000564 <__aeabi_i2d>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	e9dd 0100 	ldrd	r0, r1, [sp]
 800746c:	f7f8 ff2c 	bl	80002c8 <__aeabi_dsub>
 8007470:	3630      	adds	r6, #48	; 0x30
 8007472:	f805 6b01 	strb.w	r6, [r5], #1
 8007476:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800747a:	e9cd 0100 	strd	r0, r1, [sp]
 800747e:	f7f9 fb4d 	bl	8000b1c <__aeabi_dcmplt>
 8007482:	2800      	cmp	r0, #0
 8007484:	d163      	bne.n	800754e <_dtoa_r+0x5de>
 8007486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800748a:	2000      	movs	r0, #0
 800748c:	4937      	ldr	r1, [pc, #220]	; (800756c <_dtoa_r+0x5fc>)
 800748e:	f7f8 ff1b 	bl	80002c8 <__aeabi_dsub>
 8007492:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007496:	f7f9 fb41 	bl	8000b1c <__aeabi_dcmplt>
 800749a:	2800      	cmp	r0, #0
 800749c:	f040 80b7 	bne.w	800760e <_dtoa_r+0x69e>
 80074a0:	eba5 030b 	sub.w	r3, r5, fp
 80074a4:	429f      	cmp	r7, r3
 80074a6:	f77f af7c 	ble.w	80073a2 <_dtoa_r+0x432>
 80074aa:	2200      	movs	r2, #0
 80074ac:	4b30      	ldr	r3, [pc, #192]	; (8007570 <_dtoa_r+0x600>)
 80074ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074b2:	f7f9 f8c1 	bl	8000638 <__aeabi_dmul>
 80074b6:	2200      	movs	r2, #0
 80074b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074bc:	4b2c      	ldr	r3, [pc, #176]	; (8007570 <_dtoa_r+0x600>)
 80074be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074c2:	f7f9 f8b9 	bl	8000638 <__aeabi_dmul>
 80074c6:	e9cd 0100 	strd	r0, r1, [sp]
 80074ca:	e7c4      	b.n	8007456 <_dtoa_r+0x4e6>
 80074cc:	462a      	mov	r2, r5
 80074ce:	4633      	mov	r3, r6
 80074d0:	f7f9 f8b2 	bl	8000638 <__aeabi_dmul>
 80074d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074d8:	eb0b 0507 	add.w	r5, fp, r7
 80074dc:	465e      	mov	r6, fp
 80074de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074e2:	f7f9 fb59 	bl	8000b98 <__aeabi_d2iz>
 80074e6:	4607      	mov	r7, r0
 80074e8:	f7f9 f83c 	bl	8000564 <__aeabi_i2d>
 80074ec:	3730      	adds	r7, #48	; 0x30
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074f6:	f7f8 fee7 	bl	80002c8 <__aeabi_dsub>
 80074fa:	f806 7b01 	strb.w	r7, [r6], #1
 80074fe:	42ae      	cmp	r6, r5
 8007500:	e9cd 0100 	strd	r0, r1, [sp]
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	d126      	bne.n	8007558 <_dtoa_r+0x5e8>
 800750a:	4b1c      	ldr	r3, [pc, #112]	; (800757c <_dtoa_r+0x60c>)
 800750c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007510:	f7f8 fedc 	bl	80002cc <__adddf3>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800751c:	f7f9 fb1c 	bl	8000b58 <__aeabi_dcmpgt>
 8007520:	2800      	cmp	r0, #0
 8007522:	d174      	bne.n	800760e <_dtoa_r+0x69e>
 8007524:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007528:	2000      	movs	r0, #0
 800752a:	4914      	ldr	r1, [pc, #80]	; (800757c <_dtoa_r+0x60c>)
 800752c:	f7f8 fecc 	bl	80002c8 <__aeabi_dsub>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007538:	f7f9 faf0 	bl	8000b1c <__aeabi_dcmplt>
 800753c:	2800      	cmp	r0, #0
 800753e:	f43f af30 	beq.w	80073a2 <_dtoa_r+0x432>
 8007542:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007546:	2b30      	cmp	r3, #48	; 0x30
 8007548:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800754c:	d002      	beq.n	8007554 <_dtoa_r+0x5e4>
 800754e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007552:	e04a      	b.n	80075ea <_dtoa_r+0x67a>
 8007554:	4615      	mov	r5, r2
 8007556:	e7f4      	b.n	8007542 <_dtoa_r+0x5d2>
 8007558:	4b05      	ldr	r3, [pc, #20]	; (8007570 <_dtoa_r+0x600>)
 800755a:	f7f9 f86d 	bl	8000638 <__aeabi_dmul>
 800755e:	e9cd 0100 	strd	r0, r1, [sp]
 8007562:	e7bc      	b.n	80074de <_dtoa_r+0x56e>
 8007564:	08009c10 	.word	0x08009c10
 8007568:	08009be8 	.word	0x08009be8
 800756c:	3ff00000 	.word	0x3ff00000
 8007570:	40240000 	.word	0x40240000
 8007574:	401c0000 	.word	0x401c0000
 8007578:	40140000 	.word	0x40140000
 800757c:	3fe00000 	.word	0x3fe00000
 8007580:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007584:	465d      	mov	r5, fp
 8007586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800758a:	4630      	mov	r0, r6
 800758c:	4639      	mov	r1, r7
 800758e:	f7f9 f97d 	bl	800088c <__aeabi_ddiv>
 8007592:	f7f9 fb01 	bl	8000b98 <__aeabi_d2iz>
 8007596:	4680      	mov	r8, r0
 8007598:	f7f8 ffe4 	bl	8000564 <__aeabi_i2d>
 800759c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a0:	f7f9 f84a 	bl	8000638 <__aeabi_dmul>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4630      	mov	r0, r6
 80075aa:	4639      	mov	r1, r7
 80075ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80075b0:	f7f8 fe8a 	bl	80002c8 <__aeabi_dsub>
 80075b4:	f805 6b01 	strb.w	r6, [r5], #1
 80075b8:	eba5 060b 	sub.w	r6, r5, fp
 80075bc:	45b1      	cmp	r9, r6
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	d139      	bne.n	8007638 <_dtoa_r+0x6c8>
 80075c4:	f7f8 fe82 	bl	80002cc <__adddf3>
 80075c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075cc:	4606      	mov	r6, r0
 80075ce:	460f      	mov	r7, r1
 80075d0:	f7f9 fac2 	bl	8000b58 <__aeabi_dcmpgt>
 80075d4:	b9c8      	cbnz	r0, 800760a <_dtoa_r+0x69a>
 80075d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075da:	4630      	mov	r0, r6
 80075dc:	4639      	mov	r1, r7
 80075de:	f7f9 fa93 	bl	8000b08 <__aeabi_dcmpeq>
 80075e2:	b110      	cbz	r0, 80075ea <_dtoa_r+0x67a>
 80075e4:	f018 0f01 	tst.w	r8, #1
 80075e8:	d10f      	bne.n	800760a <_dtoa_r+0x69a>
 80075ea:	9904      	ldr	r1, [sp, #16]
 80075ec:	4620      	mov	r0, r4
 80075ee:	f000 facc 	bl	8007b8a <_Bfree>
 80075f2:	2300      	movs	r3, #0
 80075f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075f6:	702b      	strb	r3, [r5, #0]
 80075f8:	f10a 0301 	add.w	r3, sl, #1
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 8241 	beq.w	8007a88 <_dtoa_r+0xb18>
 8007606:	601d      	str	r5, [r3, #0]
 8007608:	e23e      	b.n	8007a88 <_dtoa_r+0xb18>
 800760a:	f8cd a020 	str.w	sl, [sp, #32]
 800760e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007612:	2a39      	cmp	r2, #57	; 0x39
 8007614:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007618:	d108      	bne.n	800762c <_dtoa_r+0x6bc>
 800761a:	459b      	cmp	fp, r3
 800761c:	d10a      	bne.n	8007634 <_dtoa_r+0x6c4>
 800761e:	9b08      	ldr	r3, [sp, #32]
 8007620:	3301      	adds	r3, #1
 8007622:	9308      	str	r3, [sp, #32]
 8007624:	2330      	movs	r3, #48	; 0x30
 8007626:	f88b 3000 	strb.w	r3, [fp]
 800762a:	465b      	mov	r3, fp
 800762c:	781a      	ldrb	r2, [r3, #0]
 800762e:	3201      	adds	r2, #1
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	e78c      	b.n	800754e <_dtoa_r+0x5de>
 8007634:	461d      	mov	r5, r3
 8007636:	e7ea      	b.n	800760e <_dtoa_r+0x69e>
 8007638:	2200      	movs	r2, #0
 800763a:	4b9b      	ldr	r3, [pc, #620]	; (80078a8 <_dtoa_r+0x938>)
 800763c:	f7f8 fffc 	bl	8000638 <__aeabi_dmul>
 8007640:	2200      	movs	r2, #0
 8007642:	2300      	movs	r3, #0
 8007644:	4606      	mov	r6, r0
 8007646:	460f      	mov	r7, r1
 8007648:	f7f9 fa5e 	bl	8000b08 <__aeabi_dcmpeq>
 800764c:	2800      	cmp	r0, #0
 800764e:	d09a      	beq.n	8007586 <_dtoa_r+0x616>
 8007650:	e7cb      	b.n	80075ea <_dtoa_r+0x67a>
 8007652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007654:	2a00      	cmp	r2, #0
 8007656:	f000 808b 	beq.w	8007770 <_dtoa_r+0x800>
 800765a:	9a06      	ldr	r2, [sp, #24]
 800765c:	2a01      	cmp	r2, #1
 800765e:	dc6e      	bgt.n	800773e <_dtoa_r+0x7ce>
 8007660:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007662:	2a00      	cmp	r2, #0
 8007664:	d067      	beq.n	8007736 <_dtoa_r+0x7c6>
 8007666:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800766a:	9f07      	ldr	r7, [sp, #28]
 800766c:	9d05      	ldr	r5, [sp, #20]
 800766e:	9a05      	ldr	r2, [sp, #20]
 8007670:	2101      	movs	r1, #1
 8007672:	441a      	add	r2, r3
 8007674:	4620      	mov	r0, r4
 8007676:	9205      	str	r2, [sp, #20]
 8007678:	4498      	add	r8, r3
 800767a:	f000 fb26 	bl	8007cca <__i2b>
 800767e:	4606      	mov	r6, r0
 8007680:	2d00      	cmp	r5, #0
 8007682:	dd0c      	ble.n	800769e <_dtoa_r+0x72e>
 8007684:	f1b8 0f00 	cmp.w	r8, #0
 8007688:	dd09      	ble.n	800769e <_dtoa_r+0x72e>
 800768a:	4545      	cmp	r5, r8
 800768c:	9a05      	ldr	r2, [sp, #20]
 800768e:	462b      	mov	r3, r5
 8007690:	bfa8      	it	ge
 8007692:	4643      	movge	r3, r8
 8007694:	1ad2      	subs	r2, r2, r3
 8007696:	9205      	str	r2, [sp, #20]
 8007698:	1aed      	subs	r5, r5, r3
 800769a:	eba8 0803 	sub.w	r8, r8, r3
 800769e:	9b07      	ldr	r3, [sp, #28]
 80076a0:	b1eb      	cbz	r3, 80076de <_dtoa_r+0x76e>
 80076a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d067      	beq.n	8007778 <_dtoa_r+0x808>
 80076a8:	b18f      	cbz	r7, 80076ce <_dtoa_r+0x75e>
 80076aa:	4631      	mov	r1, r6
 80076ac:	463a      	mov	r2, r7
 80076ae:	4620      	mov	r0, r4
 80076b0:	f000 fbaa 	bl	8007e08 <__pow5mult>
 80076b4:	9a04      	ldr	r2, [sp, #16]
 80076b6:	4601      	mov	r1, r0
 80076b8:	4606      	mov	r6, r0
 80076ba:	4620      	mov	r0, r4
 80076bc:	f000 fb0e 	bl	8007cdc <__multiply>
 80076c0:	9904      	ldr	r1, [sp, #16]
 80076c2:	9008      	str	r0, [sp, #32]
 80076c4:	4620      	mov	r0, r4
 80076c6:	f000 fa60 	bl	8007b8a <_Bfree>
 80076ca:	9b08      	ldr	r3, [sp, #32]
 80076cc:	9304      	str	r3, [sp, #16]
 80076ce:	9b07      	ldr	r3, [sp, #28]
 80076d0:	1bda      	subs	r2, r3, r7
 80076d2:	d004      	beq.n	80076de <_dtoa_r+0x76e>
 80076d4:	9904      	ldr	r1, [sp, #16]
 80076d6:	4620      	mov	r0, r4
 80076d8:	f000 fb96 	bl	8007e08 <__pow5mult>
 80076dc:	9004      	str	r0, [sp, #16]
 80076de:	2101      	movs	r1, #1
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 faf2 	bl	8007cca <__i2b>
 80076e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076e8:	4607      	mov	r7, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 81d0 	beq.w	8007a90 <_dtoa_r+0xb20>
 80076f0:	461a      	mov	r2, r3
 80076f2:	4601      	mov	r1, r0
 80076f4:	4620      	mov	r0, r4
 80076f6:	f000 fb87 	bl	8007e08 <__pow5mult>
 80076fa:	9b06      	ldr	r3, [sp, #24]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	4607      	mov	r7, r0
 8007700:	dc40      	bgt.n	8007784 <_dtoa_r+0x814>
 8007702:	9b00      	ldr	r3, [sp, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d139      	bne.n	800777c <_dtoa_r+0x80c>
 8007708:	9b01      	ldr	r3, [sp, #4]
 800770a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800770e:	2b00      	cmp	r3, #0
 8007710:	d136      	bne.n	8007780 <_dtoa_r+0x810>
 8007712:	9b01      	ldr	r3, [sp, #4]
 8007714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007718:	0d1b      	lsrs	r3, r3, #20
 800771a:	051b      	lsls	r3, r3, #20
 800771c:	b12b      	cbz	r3, 800772a <_dtoa_r+0x7ba>
 800771e:	9b05      	ldr	r3, [sp, #20]
 8007720:	3301      	adds	r3, #1
 8007722:	9305      	str	r3, [sp, #20]
 8007724:	f108 0801 	add.w	r8, r8, #1
 8007728:	2301      	movs	r3, #1
 800772a:	9307      	str	r3, [sp, #28]
 800772c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800772e:	2b00      	cmp	r3, #0
 8007730:	d12a      	bne.n	8007788 <_dtoa_r+0x818>
 8007732:	2001      	movs	r0, #1
 8007734:	e030      	b.n	8007798 <_dtoa_r+0x828>
 8007736:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007738:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800773c:	e795      	b.n	800766a <_dtoa_r+0x6fa>
 800773e:	9b07      	ldr	r3, [sp, #28]
 8007740:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007744:	42bb      	cmp	r3, r7
 8007746:	bfbf      	itttt	lt
 8007748:	9b07      	ldrlt	r3, [sp, #28]
 800774a:	9707      	strlt	r7, [sp, #28]
 800774c:	1afa      	sublt	r2, r7, r3
 800774e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007750:	bfbb      	ittet	lt
 8007752:	189b      	addlt	r3, r3, r2
 8007754:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007756:	1bdf      	subge	r7, r3, r7
 8007758:	2700      	movlt	r7, #0
 800775a:	f1b9 0f00 	cmp.w	r9, #0
 800775e:	bfb5      	itete	lt
 8007760:	9b05      	ldrlt	r3, [sp, #20]
 8007762:	9d05      	ldrge	r5, [sp, #20]
 8007764:	eba3 0509 	sublt.w	r5, r3, r9
 8007768:	464b      	movge	r3, r9
 800776a:	bfb8      	it	lt
 800776c:	2300      	movlt	r3, #0
 800776e:	e77e      	b.n	800766e <_dtoa_r+0x6fe>
 8007770:	9f07      	ldr	r7, [sp, #28]
 8007772:	9d05      	ldr	r5, [sp, #20]
 8007774:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007776:	e783      	b.n	8007680 <_dtoa_r+0x710>
 8007778:	9a07      	ldr	r2, [sp, #28]
 800777a:	e7ab      	b.n	80076d4 <_dtoa_r+0x764>
 800777c:	2300      	movs	r3, #0
 800777e:	e7d4      	b.n	800772a <_dtoa_r+0x7ba>
 8007780:	9b00      	ldr	r3, [sp, #0]
 8007782:	e7d2      	b.n	800772a <_dtoa_r+0x7ba>
 8007784:	2300      	movs	r3, #0
 8007786:	9307      	str	r3, [sp, #28]
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800778e:	6918      	ldr	r0, [r3, #16]
 8007790:	f000 fa4d 	bl	8007c2e <__hi0bits>
 8007794:	f1c0 0020 	rsb	r0, r0, #32
 8007798:	4440      	add	r0, r8
 800779a:	f010 001f 	ands.w	r0, r0, #31
 800779e:	d047      	beq.n	8007830 <_dtoa_r+0x8c0>
 80077a0:	f1c0 0320 	rsb	r3, r0, #32
 80077a4:	2b04      	cmp	r3, #4
 80077a6:	dd3b      	ble.n	8007820 <_dtoa_r+0x8b0>
 80077a8:	9b05      	ldr	r3, [sp, #20]
 80077aa:	f1c0 001c 	rsb	r0, r0, #28
 80077ae:	4403      	add	r3, r0
 80077b0:	9305      	str	r3, [sp, #20]
 80077b2:	4405      	add	r5, r0
 80077b4:	4480      	add	r8, r0
 80077b6:	9b05      	ldr	r3, [sp, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	dd05      	ble.n	80077c8 <_dtoa_r+0x858>
 80077bc:	461a      	mov	r2, r3
 80077be:	9904      	ldr	r1, [sp, #16]
 80077c0:	4620      	mov	r0, r4
 80077c2:	f000 fb6f 	bl	8007ea4 <__lshift>
 80077c6:	9004      	str	r0, [sp, #16]
 80077c8:	f1b8 0f00 	cmp.w	r8, #0
 80077cc:	dd05      	ble.n	80077da <_dtoa_r+0x86a>
 80077ce:	4639      	mov	r1, r7
 80077d0:	4642      	mov	r2, r8
 80077d2:	4620      	mov	r0, r4
 80077d4:	f000 fb66 	bl	8007ea4 <__lshift>
 80077d8:	4607      	mov	r7, r0
 80077da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077dc:	b353      	cbz	r3, 8007834 <_dtoa_r+0x8c4>
 80077de:	4639      	mov	r1, r7
 80077e0:	9804      	ldr	r0, [sp, #16]
 80077e2:	f000 fbb3 	bl	8007f4c <__mcmp>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	da24      	bge.n	8007834 <_dtoa_r+0x8c4>
 80077ea:	2300      	movs	r3, #0
 80077ec:	220a      	movs	r2, #10
 80077ee:	9904      	ldr	r1, [sp, #16]
 80077f0:	4620      	mov	r0, r4
 80077f2:	f000 f9e1 	bl	8007bb8 <__multadd>
 80077f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f8:	9004      	str	r0, [sp, #16]
 80077fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 814d 	beq.w	8007a9e <_dtoa_r+0xb2e>
 8007804:	2300      	movs	r3, #0
 8007806:	4631      	mov	r1, r6
 8007808:	220a      	movs	r2, #10
 800780a:	4620      	mov	r0, r4
 800780c:	f000 f9d4 	bl	8007bb8 <__multadd>
 8007810:	9b02      	ldr	r3, [sp, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	4606      	mov	r6, r0
 8007816:	dc4f      	bgt.n	80078b8 <_dtoa_r+0x948>
 8007818:	9b06      	ldr	r3, [sp, #24]
 800781a:	2b02      	cmp	r3, #2
 800781c:	dd4c      	ble.n	80078b8 <_dtoa_r+0x948>
 800781e:	e011      	b.n	8007844 <_dtoa_r+0x8d4>
 8007820:	d0c9      	beq.n	80077b6 <_dtoa_r+0x846>
 8007822:	9a05      	ldr	r2, [sp, #20]
 8007824:	331c      	adds	r3, #28
 8007826:	441a      	add	r2, r3
 8007828:	9205      	str	r2, [sp, #20]
 800782a:	441d      	add	r5, r3
 800782c:	4498      	add	r8, r3
 800782e:	e7c2      	b.n	80077b6 <_dtoa_r+0x846>
 8007830:	4603      	mov	r3, r0
 8007832:	e7f6      	b.n	8007822 <_dtoa_r+0x8b2>
 8007834:	f1b9 0f00 	cmp.w	r9, #0
 8007838:	dc38      	bgt.n	80078ac <_dtoa_r+0x93c>
 800783a:	9b06      	ldr	r3, [sp, #24]
 800783c:	2b02      	cmp	r3, #2
 800783e:	dd35      	ble.n	80078ac <_dtoa_r+0x93c>
 8007840:	f8cd 9008 	str.w	r9, [sp, #8]
 8007844:	9b02      	ldr	r3, [sp, #8]
 8007846:	b963      	cbnz	r3, 8007862 <_dtoa_r+0x8f2>
 8007848:	4639      	mov	r1, r7
 800784a:	2205      	movs	r2, #5
 800784c:	4620      	mov	r0, r4
 800784e:	f000 f9b3 	bl	8007bb8 <__multadd>
 8007852:	4601      	mov	r1, r0
 8007854:	4607      	mov	r7, r0
 8007856:	9804      	ldr	r0, [sp, #16]
 8007858:	f000 fb78 	bl	8007f4c <__mcmp>
 800785c:	2800      	cmp	r0, #0
 800785e:	f73f adcc 	bgt.w	80073fa <_dtoa_r+0x48a>
 8007862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007864:	465d      	mov	r5, fp
 8007866:	ea6f 0a03 	mvn.w	sl, r3
 800786a:	f04f 0900 	mov.w	r9, #0
 800786e:	4639      	mov	r1, r7
 8007870:	4620      	mov	r0, r4
 8007872:	f000 f98a 	bl	8007b8a <_Bfree>
 8007876:	2e00      	cmp	r6, #0
 8007878:	f43f aeb7 	beq.w	80075ea <_dtoa_r+0x67a>
 800787c:	f1b9 0f00 	cmp.w	r9, #0
 8007880:	d005      	beq.n	800788e <_dtoa_r+0x91e>
 8007882:	45b1      	cmp	r9, r6
 8007884:	d003      	beq.n	800788e <_dtoa_r+0x91e>
 8007886:	4649      	mov	r1, r9
 8007888:	4620      	mov	r0, r4
 800788a:	f000 f97e 	bl	8007b8a <_Bfree>
 800788e:	4631      	mov	r1, r6
 8007890:	4620      	mov	r0, r4
 8007892:	f000 f97a 	bl	8007b8a <_Bfree>
 8007896:	e6a8      	b.n	80075ea <_dtoa_r+0x67a>
 8007898:	2700      	movs	r7, #0
 800789a:	463e      	mov	r6, r7
 800789c:	e7e1      	b.n	8007862 <_dtoa_r+0x8f2>
 800789e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80078a2:	463e      	mov	r6, r7
 80078a4:	e5a9      	b.n	80073fa <_dtoa_r+0x48a>
 80078a6:	bf00      	nop
 80078a8:	40240000 	.word	0x40240000
 80078ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 80fa 	beq.w	8007aac <_dtoa_r+0xb3c>
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	dd05      	ble.n	80078c8 <_dtoa_r+0x958>
 80078bc:	4631      	mov	r1, r6
 80078be:	462a      	mov	r2, r5
 80078c0:	4620      	mov	r0, r4
 80078c2:	f000 faef 	bl	8007ea4 <__lshift>
 80078c6:	4606      	mov	r6, r0
 80078c8:	9b07      	ldr	r3, [sp, #28]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d04c      	beq.n	8007968 <_dtoa_r+0x9f8>
 80078ce:	6871      	ldr	r1, [r6, #4]
 80078d0:	4620      	mov	r0, r4
 80078d2:	f000 f926 	bl	8007b22 <_Balloc>
 80078d6:	6932      	ldr	r2, [r6, #16]
 80078d8:	3202      	adds	r2, #2
 80078da:	4605      	mov	r5, r0
 80078dc:	0092      	lsls	r2, r2, #2
 80078de:	f106 010c 	add.w	r1, r6, #12
 80078e2:	300c      	adds	r0, #12
 80078e4:	f000 f912 	bl	8007b0c <memcpy>
 80078e8:	2201      	movs	r2, #1
 80078ea:	4629      	mov	r1, r5
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 fad9 	bl	8007ea4 <__lshift>
 80078f2:	9b00      	ldr	r3, [sp, #0]
 80078f4:	f8cd b014 	str.w	fp, [sp, #20]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	46b1      	mov	r9, r6
 80078fe:	9307      	str	r3, [sp, #28]
 8007900:	4606      	mov	r6, r0
 8007902:	4639      	mov	r1, r7
 8007904:	9804      	ldr	r0, [sp, #16]
 8007906:	f7ff faa4 	bl	8006e52 <quorem>
 800790a:	4649      	mov	r1, r9
 800790c:	4605      	mov	r5, r0
 800790e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007912:	9804      	ldr	r0, [sp, #16]
 8007914:	f000 fb1a 	bl	8007f4c <__mcmp>
 8007918:	4632      	mov	r2, r6
 800791a:	9000      	str	r0, [sp, #0]
 800791c:	4639      	mov	r1, r7
 800791e:	4620      	mov	r0, r4
 8007920:	f000 fb2e 	bl	8007f80 <__mdiff>
 8007924:	68c3      	ldr	r3, [r0, #12]
 8007926:	4602      	mov	r2, r0
 8007928:	bb03      	cbnz	r3, 800796c <_dtoa_r+0x9fc>
 800792a:	4601      	mov	r1, r0
 800792c:	9008      	str	r0, [sp, #32]
 800792e:	9804      	ldr	r0, [sp, #16]
 8007930:	f000 fb0c 	bl	8007f4c <__mcmp>
 8007934:	9a08      	ldr	r2, [sp, #32]
 8007936:	4603      	mov	r3, r0
 8007938:	4611      	mov	r1, r2
 800793a:	4620      	mov	r0, r4
 800793c:	9308      	str	r3, [sp, #32]
 800793e:	f000 f924 	bl	8007b8a <_Bfree>
 8007942:	9b08      	ldr	r3, [sp, #32]
 8007944:	b9a3      	cbnz	r3, 8007970 <_dtoa_r+0xa00>
 8007946:	9a06      	ldr	r2, [sp, #24]
 8007948:	b992      	cbnz	r2, 8007970 <_dtoa_r+0xa00>
 800794a:	9a07      	ldr	r2, [sp, #28]
 800794c:	b982      	cbnz	r2, 8007970 <_dtoa_r+0xa00>
 800794e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007952:	d029      	beq.n	80079a8 <_dtoa_r+0xa38>
 8007954:	9b00      	ldr	r3, [sp, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	dd01      	ble.n	800795e <_dtoa_r+0x9ee>
 800795a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800795e:	9b05      	ldr	r3, [sp, #20]
 8007960:	1c5d      	adds	r5, r3, #1
 8007962:	f883 8000 	strb.w	r8, [r3]
 8007966:	e782      	b.n	800786e <_dtoa_r+0x8fe>
 8007968:	4630      	mov	r0, r6
 800796a:	e7c2      	b.n	80078f2 <_dtoa_r+0x982>
 800796c:	2301      	movs	r3, #1
 800796e:	e7e3      	b.n	8007938 <_dtoa_r+0x9c8>
 8007970:	9a00      	ldr	r2, [sp, #0]
 8007972:	2a00      	cmp	r2, #0
 8007974:	db04      	blt.n	8007980 <_dtoa_r+0xa10>
 8007976:	d125      	bne.n	80079c4 <_dtoa_r+0xa54>
 8007978:	9a06      	ldr	r2, [sp, #24]
 800797a:	bb1a      	cbnz	r2, 80079c4 <_dtoa_r+0xa54>
 800797c:	9a07      	ldr	r2, [sp, #28]
 800797e:	bb0a      	cbnz	r2, 80079c4 <_dtoa_r+0xa54>
 8007980:	2b00      	cmp	r3, #0
 8007982:	ddec      	ble.n	800795e <_dtoa_r+0x9ee>
 8007984:	2201      	movs	r2, #1
 8007986:	9904      	ldr	r1, [sp, #16]
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fa8b 	bl	8007ea4 <__lshift>
 800798e:	4639      	mov	r1, r7
 8007990:	9004      	str	r0, [sp, #16]
 8007992:	f000 fadb 	bl	8007f4c <__mcmp>
 8007996:	2800      	cmp	r0, #0
 8007998:	dc03      	bgt.n	80079a2 <_dtoa_r+0xa32>
 800799a:	d1e0      	bne.n	800795e <_dtoa_r+0x9ee>
 800799c:	f018 0f01 	tst.w	r8, #1
 80079a0:	d0dd      	beq.n	800795e <_dtoa_r+0x9ee>
 80079a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079a6:	d1d8      	bne.n	800795a <_dtoa_r+0x9ea>
 80079a8:	9b05      	ldr	r3, [sp, #20]
 80079aa:	9a05      	ldr	r2, [sp, #20]
 80079ac:	1c5d      	adds	r5, r3, #1
 80079ae:	2339      	movs	r3, #57	; 0x39
 80079b0:	7013      	strb	r3, [r2, #0]
 80079b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079b6:	2b39      	cmp	r3, #57	; 0x39
 80079b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80079bc:	d04f      	beq.n	8007a5e <_dtoa_r+0xaee>
 80079be:	3301      	adds	r3, #1
 80079c0:	7013      	strb	r3, [r2, #0]
 80079c2:	e754      	b.n	800786e <_dtoa_r+0x8fe>
 80079c4:	9a05      	ldr	r2, [sp, #20]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f102 0501 	add.w	r5, r2, #1
 80079cc:	dd06      	ble.n	80079dc <_dtoa_r+0xa6c>
 80079ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079d2:	d0e9      	beq.n	80079a8 <_dtoa_r+0xa38>
 80079d4:	f108 0801 	add.w	r8, r8, #1
 80079d8:	9b05      	ldr	r3, [sp, #20]
 80079da:	e7c2      	b.n	8007962 <_dtoa_r+0x9f2>
 80079dc:	9a02      	ldr	r2, [sp, #8]
 80079de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80079e2:	eba5 030b 	sub.w	r3, r5, fp
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d021      	beq.n	8007a2e <_dtoa_r+0xabe>
 80079ea:	2300      	movs	r3, #0
 80079ec:	220a      	movs	r2, #10
 80079ee:	9904      	ldr	r1, [sp, #16]
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 f8e1 	bl	8007bb8 <__multadd>
 80079f6:	45b1      	cmp	r9, r6
 80079f8:	9004      	str	r0, [sp, #16]
 80079fa:	f04f 0300 	mov.w	r3, #0
 80079fe:	f04f 020a 	mov.w	r2, #10
 8007a02:	4649      	mov	r1, r9
 8007a04:	4620      	mov	r0, r4
 8007a06:	d105      	bne.n	8007a14 <_dtoa_r+0xaa4>
 8007a08:	f000 f8d6 	bl	8007bb8 <__multadd>
 8007a0c:	4681      	mov	r9, r0
 8007a0e:	4606      	mov	r6, r0
 8007a10:	9505      	str	r5, [sp, #20]
 8007a12:	e776      	b.n	8007902 <_dtoa_r+0x992>
 8007a14:	f000 f8d0 	bl	8007bb8 <__multadd>
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4681      	mov	r9, r0
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	220a      	movs	r2, #10
 8007a20:	4620      	mov	r0, r4
 8007a22:	f000 f8c9 	bl	8007bb8 <__multadd>
 8007a26:	4606      	mov	r6, r0
 8007a28:	e7f2      	b.n	8007a10 <_dtoa_r+0xaa0>
 8007a2a:	f04f 0900 	mov.w	r9, #0
 8007a2e:	2201      	movs	r2, #1
 8007a30:	9904      	ldr	r1, [sp, #16]
 8007a32:	4620      	mov	r0, r4
 8007a34:	f000 fa36 	bl	8007ea4 <__lshift>
 8007a38:	4639      	mov	r1, r7
 8007a3a:	9004      	str	r0, [sp, #16]
 8007a3c:	f000 fa86 	bl	8007f4c <__mcmp>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	dcb6      	bgt.n	80079b2 <_dtoa_r+0xa42>
 8007a44:	d102      	bne.n	8007a4c <_dtoa_r+0xadc>
 8007a46:	f018 0f01 	tst.w	r8, #1
 8007a4a:	d1b2      	bne.n	80079b2 <_dtoa_r+0xa42>
 8007a4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a50:	2b30      	cmp	r3, #48	; 0x30
 8007a52:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007a56:	f47f af0a 	bne.w	800786e <_dtoa_r+0x8fe>
 8007a5a:	4615      	mov	r5, r2
 8007a5c:	e7f6      	b.n	8007a4c <_dtoa_r+0xadc>
 8007a5e:	4593      	cmp	fp, r2
 8007a60:	d105      	bne.n	8007a6e <_dtoa_r+0xafe>
 8007a62:	2331      	movs	r3, #49	; 0x31
 8007a64:	f10a 0a01 	add.w	sl, sl, #1
 8007a68:	f88b 3000 	strb.w	r3, [fp]
 8007a6c:	e6ff      	b.n	800786e <_dtoa_r+0x8fe>
 8007a6e:	4615      	mov	r5, r2
 8007a70:	e79f      	b.n	80079b2 <_dtoa_r+0xa42>
 8007a72:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007ad8 <_dtoa_r+0xb68>
 8007a76:	e007      	b.n	8007a88 <_dtoa_r+0xb18>
 8007a78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007adc <_dtoa_r+0xb6c>
 8007a7e:	b11b      	cbz	r3, 8007a88 <_dtoa_r+0xb18>
 8007a80:	f10b 0308 	add.w	r3, fp, #8
 8007a84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	4658      	mov	r0, fp
 8007a8a:	b017      	add	sp, #92	; 0x5c
 8007a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a90:	9b06      	ldr	r3, [sp, #24]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	f77f ae35 	ble.w	8007702 <_dtoa_r+0x792>
 8007a98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a9a:	9307      	str	r3, [sp, #28]
 8007a9c:	e649      	b.n	8007732 <_dtoa_r+0x7c2>
 8007a9e:	9b02      	ldr	r3, [sp, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dc03      	bgt.n	8007aac <_dtoa_r+0xb3c>
 8007aa4:	9b06      	ldr	r3, [sp, #24]
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	f73f aecc 	bgt.w	8007844 <_dtoa_r+0x8d4>
 8007aac:	465d      	mov	r5, fp
 8007aae:	4639      	mov	r1, r7
 8007ab0:	9804      	ldr	r0, [sp, #16]
 8007ab2:	f7ff f9ce 	bl	8006e52 <quorem>
 8007ab6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007aba:	f805 8b01 	strb.w	r8, [r5], #1
 8007abe:	9a02      	ldr	r2, [sp, #8]
 8007ac0:	eba5 030b 	sub.w	r3, r5, fp
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	ddb0      	ble.n	8007a2a <_dtoa_r+0xaba>
 8007ac8:	2300      	movs	r3, #0
 8007aca:	220a      	movs	r2, #10
 8007acc:	9904      	ldr	r1, [sp, #16]
 8007ace:	4620      	mov	r0, r4
 8007ad0:	f000 f872 	bl	8007bb8 <__multadd>
 8007ad4:	9004      	str	r0, [sp, #16]
 8007ad6:	e7ea      	b.n	8007aae <_dtoa_r+0xb3e>
 8007ad8:	08009bb4 	.word	0x08009bb4
 8007adc:	08009bd8 	.word	0x08009bd8

08007ae0 <_localeconv_r>:
 8007ae0:	4b04      	ldr	r3, [pc, #16]	; (8007af4 <_localeconv_r+0x14>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6a18      	ldr	r0, [r3, #32]
 8007ae6:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <_localeconv_r+0x18>)
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	bf08      	it	eq
 8007aec:	4618      	moveq	r0, r3
 8007aee:	30f0      	adds	r0, #240	; 0xf0
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20000030 	.word	0x20000030
 8007af8:	20000094 	.word	0x20000094

08007afc <malloc>:
 8007afc:	4b02      	ldr	r3, [pc, #8]	; (8007b08 <malloc+0xc>)
 8007afe:	4601      	mov	r1, r0
 8007b00:	6818      	ldr	r0, [r3, #0]
 8007b02:	f000 bb45 	b.w	8008190 <_malloc_r>
 8007b06:	bf00      	nop
 8007b08:	20000030 	.word	0x20000030

08007b0c <memcpy>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	1e43      	subs	r3, r0, #1
 8007b10:	440a      	add	r2, r1
 8007b12:	4291      	cmp	r1, r2
 8007b14:	d100      	bne.n	8007b18 <memcpy+0xc>
 8007b16:	bd10      	pop	{r4, pc}
 8007b18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b20:	e7f7      	b.n	8007b12 <memcpy+0x6>

08007b22 <_Balloc>:
 8007b22:	b570      	push	{r4, r5, r6, lr}
 8007b24:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b26:	4604      	mov	r4, r0
 8007b28:	460e      	mov	r6, r1
 8007b2a:	b93d      	cbnz	r5, 8007b3c <_Balloc+0x1a>
 8007b2c:	2010      	movs	r0, #16
 8007b2e:	f7ff ffe5 	bl	8007afc <malloc>
 8007b32:	6260      	str	r0, [r4, #36]	; 0x24
 8007b34:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b38:	6005      	str	r5, [r0, #0]
 8007b3a:	60c5      	str	r5, [r0, #12]
 8007b3c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b3e:	68eb      	ldr	r3, [r5, #12]
 8007b40:	b183      	cbz	r3, 8007b64 <_Balloc+0x42>
 8007b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b4a:	b9b8      	cbnz	r0, 8007b7c <_Balloc+0x5a>
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	fa01 f506 	lsl.w	r5, r1, r6
 8007b52:	1d6a      	adds	r2, r5, #5
 8007b54:	0092      	lsls	r2, r2, #2
 8007b56:	4620      	mov	r0, r4
 8007b58:	f000 fabe 	bl	80080d8 <_calloc_r>
 8007b5c:	b160      	cbz	r0, 8007b78 <_Balloc+0x56>
 8007b5e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b62:	e00e      	b.n	8007b82 <_Balloc+0x60>
 8007b64:	2221      	movs	r2, #33	; 0x21
 8007b66:	2104      	movs	r1, #4
 8007b68:	4620      	mov	r0, r4
 8007b6a:	f000 fab5 	bl	80080d8 <_calloc_r>
 8007b6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b70:	60e8      	str	r0, [r5, #12]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e4      	bne.n	8007b42 <_Balloc+0x20>
 8007b78:	2000      	movs	r0, #0
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}
 8007b7c:	6802      	ldr	r2, [r0, #0]
 8007b7e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b82:	2300      	movs	r3, #0
 8007b84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b88:	e7f7      	b.n	8007b7a <_Balloc+0x58>

08007b8a <_Bfree>:
 8007b8a:	b570      	push	{r4, r5, r6, lr}
 8007b8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b8e:	4606      	mov	r6, r0
 8007b90:	460d      	mov	r5, r1
 8007b92:	b93c      	cbnz	r4, 8007ba4 <_Bfree+0x1a>
 8007b94:	2010      	movs	r0, #16
 8007b96:	f7ff ffb1 	bl	8007afc <malloc>
 8007b9a:	6270      	str	r0, [r6, #36]	; 0x24
 8007b9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ba0:	6004      	str	r4, [r0, #0]
 8007ba2:	60c4      	str	r4, [r0, #12]
 8007ba4:	b13d      	cbz	r5, 8007bb6 <_Bfree+0x2c>
 8007ba6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ba8:	686a      	ldr	r2, [r5, #4]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bb0:	6029      	str	r1, [r5, #0]
 8007bb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007bb6:	bd70      	pop	{r4, r5, r6, pc}

08007bb8 <__multadd>:
 8007bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbc:	690d      	ldr	r5, [r1, #16]
 8007bbe:	461f      	mov	r7, r3
 8007bc0:	4606      	mov	r6, r0
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	f101 0c14 	add.w	ip, r1, #20
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f8dc 0000 	ldr.w	r0, [ip]
 8007bce:	b281      	uxth	r1, r0
 8007bd0:	fb02 7101 	mla	r1, r2, r1, r7
 8007bd4:	0c0f      	lsrs	r7, r1, #16
 8007bd6:	0c00      	lsrs	r0, r0, #16
 8007bd8:	fb02 7000 	mla	r0, r2, r0, r7
 8007bdc:	b289      	uxth	r1, r1
 8007bde:	3301      	adds	r3, #1
 8007be0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007be4:	429d      	cmp	r5, r3
 8007be6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007bea:	f84c 1b04 	str.w	r1, [ip], #4
 8007bee:	dcec      	bgt.n	8007bca <__multadd+0x12>
 8007bf0:	b1d7      	cbz	r7, 8007c28 <__multadd+0x70>
 8007bf2:	68a3      	ldr	r3, [r4, #8]
 8007bf4:	42ab      	cmp	r3, r5
 8007bf6:	dc12      	bgt.n	8007c1e <__multadd+0x66>
 8007bf8:	6861      	ldr	r1, [r4, #4]
 8007bfa:	4630      	mov	r0, r6
 8007bfc:	3101      	adds	r1, #1
 8007bfe:	f7ff ff90 	bl	8007b22 <_Balloc>
 8007c02:	6922      	ldr	r2, [r4, #16]
 8007c04:	3202      	adds	r2, #2
 8007c06:	f104 010c 	add.w	r1, r4, #12
 8007c0a:	4680      	mov	r8, r0
 8007c0c:	0092      	lsls	r2, r2, #2
 8007c0e:	300c      	adds	r0, #12
 8007c10:	f7ff ff7c 	bl	8007b0c <memcpy>
 8007c14:	4621      	mov	r1, r4
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7ff ffb7 	bl	8007b8a <_Bfree>
 8007c1c:	4644      	mov	r4, r8
 8007c1e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c22:	3501      	adds	r5, #1
 8007c24:	615f      	str	r7, [r3, #20]
 8007c26:	6125      	str	r5, [r4, #16]
 8007c28:	4620      	mov	r0, r4
 8007c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c2e <__hi0bits>:
 8007c2e:	0c02      	lsrs	r2, r0, #16
 8007c30:	0412      	lsls	r2, r2, #16
 8007c32:	4603      	mov	r3, r0
 8007c34:	b9b2      	cbnz	r2, 8007c64 <__hi0bits+0x36>
 8007c36:	0403      	lsls	r3, r0, #16
 8007c38:	2010      	movs	r0, #16
 8007c3a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c3e:	bf04      	itt	eq
 8007c40:	021b      	lsleq	r3, r3, #8
 8007c42:	3008      	addeq	r0, #8
 8007c44:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c48:	bf04      	itt	eq
 8007c4a:	011b      	lsleq	r3, r3, #4
 8007c4c:	3004      	addeq	r0, #4
 8007c4e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c52:	bf04      	itt	eq
 8007c54:	009b      	lsleq	r3, r3, #2
 8007c56:	3002      	addeq	r0, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	db06      	blt.n	8007c6a <__hi0bits+0x3c>
 8007c5c:	005b      	lsls	r3, r3, #1
 8007c5e:	d503      	bpl.n	8007c68 <__hi0bits+0x3a>
 8007c60:	3001      	adds	r0, #1
 8007c62:	4770      	bx	lr
 8007c64:	2000      	movs	r0, #0
 8007c66:	e7e8      	b.n	8007c3a <__hi0bits+0xc>
 8007c68:	2020      	movs	r0, #32
 8007c6a:	4770      	bx	lr

08007c6c <__lo0bits>:
 8007c6c:	6803      	ldr	r3, [r0, #0]
 8007c6e:	f013 0207 	ands.w	r2, r3, #7
 8007c72:	4601      	mov	r1, r0
 8007c74:	d00b      	beq.n	8007c8e <__lo0bits+0x22>
 8007c76:	07da      	lsls	r2, r3, #31
 8007c78:	d423      	bmi.n	8007cc2 <__lo0bits+0x56>
 8007c7a:	0798      	lsls	r0, r3, #30
 8007c7c:	bf49      	itett	mi
 8007c7e:	085b      	lsrmi	r3, r3, #1
 8007c80:	089b      	lsrpl	r3, r3, #2
 8007c82:	2001      	movmi	r0, #1
 8007c84:	600b      	strmi	r3, [r1, #0]
 8007c86:	bf5c      	itt	pl
 8007c88:	600b      	strpl	r3, [r1, #0]
 8007c8a:	2002      	movpl	r0, #2
 8007c8c:	4770      	bx	lr
 8007c8e:	b298      	uxth	r0, r3
 8007c90:	b9a8      	cbnz	r0, 8007cbe <__lo0bits+0x52>
 8007c92:	0c1b      	lsrs	r3, r3, #16
 8007c94:	2010      	movs	r0, #16
 8007c96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007c9a:	bf04      	itt	eq
 8007c9c:	0a1b      	lsreq	r3, r3, #8
 8007c9e:	3008      	addeq	r0, #8
 8007ca0:	071a      	lsls	r2, r3, #28
 8007ca2:	bf04      	itt	eq
 8007ca4:	091b      	lsreq	r3, r3, #4
 8007ca6:	3004      	addeq	r0, #4
 8007ca8:	079a      	lsls	r2, r3, #30
 8007caa:	bf04      	itt	eq
 8007cac:	089b      	lsreq	r3, r3, #2
 8007cae:	3002      	addeq	r0, #2
 8007cb0:	07da      	lsls	r2, r3, #31
 8007cb2:	d402      	bmi.n	8007cba <__lo0bits+0x4e>
 8007cb4:	085b      	lsrs	r3, r3, #1
 8007cb6:	d006      	beq.n	8007cc6 <__lo0bits+0x5a>
 8007cb8:	3001      	adds	r0, #1
 8007cba:	600b      	str	r3, [r1, #0]
 8007cbc:	4770      	bx	lr
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	e7e9      	b.n	8007c96 <__lo0bits+0x2a>
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	4770      	bx	lr
 8007cc6:	2020      	movs	r0, #32
 8007cc8:	4770      	bx	lr

08007cca <__i2b>:
 8007cca:	b510      	push	{r4, lr}
 8007ccc:	460c      	mov	r4, r1
 8007cce:	2101      	movs	r1, #1
 8007cd0:	f7ff ff27 	bl	8007b22 <_Balloc>
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	6144      	str	r4, [r0, #20]
 8007cd8:	6102      	str	r2, [r0, #16]
 8007cda:	bd10      	pop	{r4, pc}

08007cdc <__multiply>:
 8007cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	4614      	mov	r4, r2
 8007ce2:	690a      	ldr	r2, [r1, #16]
 8007ce4:	6923      	ldr	r3, [r4, #16]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	bfb8      	it	lt
 8007cea:	460b      	movlt	r3, r1
 8007cec:	4688      	mov	r8, r1
 8007cee:	bfbc      	itt	lt
 8007cf0:	46a0      	movlt	r8, r4
 8007cf2:	461c      	movlt	r4, r3
 8007cf4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007cf8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007cfc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d04:	eb07 0609 	add.w	r6, r7, r9
 8007d08:	42b3      	cmp	r3, r6
 8007d0a:	bfb8      	it	lt
 8007d0c:	3101      	addlt	r1, #1
 8007d0e:	f7ff ff08 	bl	8007b22 <_Balloc>
 8007d12:	f100 0514 	add.w	r5, r0, #20
 8007d16:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007d1a:	462b      	mov	r3, r5
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	4573      	cmp	r3, lr
 8007d20:	d316      	bcc.n	8007d50 <__multiply+0x74>
 8007d22:	f104 0214 	add.w	r2, r4, #20
 8007d26:	f108 0114 	add.w	r1, r8, #20
 8007d2a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007d2e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	9b00      	ldr	r3, [sp, #0]
 8007d36:	9201      	str	r2, [sp, #4]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d80c      	bhi.n	8007d56 <__multiply+0x7a>
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	dd03      	ble.n	8007d48 <__multiply+0x6c>
 8007d40:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d05d      	beq.n	8007e04 <__multiply+0x128>
 8007d48:	6106      	str	r6, [r0, #16]
 8007d4a:	b003      	add	sp, #12
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	f843 2b04 	str.w	r2, [r3], #4
 8007d54:	e7e3      	b.n	8007d1e <__multiply+0x42>
 8007d56:	f8b2 b000 	ldrh.w	fp, [r2]
 8007d5a:	f1bb 0f00 	cmp.w	fp, #0
 8007d5e:	d023      	beq.n	8007da8 <__multiply+0xcc>
 8007d60:	4689      	mov	r9, r1
 8007d62:	46ac      	mov	ip, r5
 8007d64:	f04f 0800 	mov.w	r8, #0
 8007d68:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d6c:	f8dc a000 	ldr.w	sl, [ip]
 8007d70:	b2a3      	uxth	r3, r4
 8007d72:	fa1f fa8a 	uxth.w	sl, sl
 8007d76:	fb0b a303 	mla	r3, fp, r3, sl
 8007d7a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d7e:	f8dc 4000 	ldr.w	r4, [ip]
 8007d82:	4443      	add	r3, r8
 8007d84:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d88:	fb0b 840a 	mla	r4, fp, sl, r8
 8007d8c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007d90:	46e2      	mov	sl, ip
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007d98:	454f      	cmp	r7, r9
 8007d9a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007d9e:	f84a 3b04 	str.w	r3, [sl], #4
 8007da2:	d82b      	bhi.n	8007dfc <__multiply+0x120>
 8007da4:	f8cc 8004 	str.w	r8, [ip, #4]
 8007da8:	9b01      	ldr	r3, [sp, #4]
 8007daa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007dae:	3204      	adds	r2, #4
 8007db0:	f1ba 0f00 	cmp.w	sl, #0
 8007db4:	d020      	beq.n	8007df8 <__multiply+0x11c>
 8007db6:	682b      	ldr	r3, [r5, #0]
 8007db8:	4689      	mov	r9, r1
 8007dba:	46a8      	mov	r8, r5
 8007dbc:	f04f 0b00 	mov.w	fp, #0
 8007dc0:	f8b9 c000 	ldrh.w	ip, [r9]
 8007dc4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007dc8:	fb0a 440c 	mla	r4, sl, ip, r4
 8007dcc:	445c      	add	r4, fp
 8007dce:	46c4      	mov	ip, r8
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007dd6:	f84c 3b04 	str.w	r3, [ip], #4
 8007dda:	f859 3b04 	ldr.w	r3, [r9], #4
 8007dde:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007de2:	0c1b      	lsrs	r3, r3, #16
 8007de4:	fb0a b303 	mla	r3, sl, r3, fp
 8007de8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007dec:	454f      	cmp	r7, r9
 8007dee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007df2:	d805      	bhi.n	8007e00 <__multiply+0x124>
 8007df4:	f8c8 3004 	str.w	r3, [r8, #4]
 8007df8:	3504      	adds	r5, #4
 8007dfa:	e79b      	b.n	8007d34 <__multiply+0x58>
 8007dfc:	46d4      	mov	ip, sl
 8007dfe:	e7b3      	b.n	8007d68 <__multiply+0x8c>
 8007e00:	46e0      	mov	r8, ip
 8007e02:	e7dd      	b.n	8007dc0 <__multiply+0xe4>
 8007e04:	3e01      	subs	r6, #1
 8007e06:	e799      	b.n	8007d3c <__multiply+0x60>

08007e08 <__pow5mult>:
 8007e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e0c:	4615      	mov	r5, r2
 8007e0e:	f012 0203 	ands.w	r2, r2, #3
 8007e12:	4606      	mov	r6, r0
 8007e14:	460f      	mov	r7, r1
 8007e16:	d007      	beq.n	8007e28 <__pow5mult+0x20>
 8007e18:	3a01      	subs	r2, #1
 8007e1a:	4c21      	ldr	r4, [pc, #132]	; (8007ea0 <__pow5mult+0x98>)
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e22:	f7ff fec9 	bl	8007bb8 <__multadd>
 8007e26:	4607      	mov	r7, r0
 8007e28:	10ad      	asrs	r5, r5, #2
 8007e2a:	d035      	beq.n	8007e98 <__pow5mult+0x90>
 8007e2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e2e:	b93c      	cbnz	r4, 8007e40 <__pow5mult+0x38>
 8007e30:	2010      	movs	r0, #16
 8007e32:	f7ff fe63 	bl	8007afc <malloc>
 8007e36:	6270      	str	r0, [r6, #36]	; 0x24
 8007e38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e3c:	6004      	str	r4, [r0, #0]
 8007e3e:	60c4      	str	r4, [r0, #12]
 8007e40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e48:	b94c      	cbnz	r4, 8007e5e <__pow5mult+0x56>
 8007e4a:	f240 2171 	movw	r1, #625	; 0x271
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7ff ff3b 	bl	8007cca <__i2b>
 8007e54:	2300      	movs	r3, #0
 8007e56:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e5a:	4604      	mov	r4, r0
 8007e5c:	6003      	str	r3, [r0, #0]
 8007e5e:	f04f 0800 	mov.w	r8, #0
 8007e62:	07eb      	lsls	r3, r5, #31
 8007e64:	d50a      	bpl.n	8007e7c <__pow5mult+0x74>
 8007e66:	4639      	mov	r1, r7
 8007e68:	4622      	mov	r2, r4
 8007e6a:	4630      	mov	r0, r6
 8007e6c:	f7ff ff36 	bl	8007cdc <__multiply>
 8007e70:	4639      	mov	r1, r7
 8007e72:	4681      	mov	r9, r0
 8007e74:	4630      	mov	r0, r6
 8007e76:	f7ff fe88 	bl	8007b8a <_Bfree>
 8007e7a:	464f      	mov	r7, r9
 8007e7c:	106d      	asrs	r5, r5, #1
 8007e7e:	d00b      	beq.n	8007e98 <__pow5mult+0x90>
 8007e80:	6820      	ldr	r0, [r4, #0]
 8007e82:	b938      	cbnz	r0, 8007e94 <__pow5mult+0x8c>
 8007e84:	4622      	mov	r2, r4
 8007e86:	4621      	mov	r1, r4
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff ff27 	bl	8007cdc <__multiply>
 8007e8e:	6020      	str	r0, [r4, #0]
 8007e90:	f8c0 8000 	str.w	r8, [r0]
 8007e94:	4604      	mov	r4, r0
 8007e96:	e7e4      	b.n	8007e62 <__pow5mult+0x5a>
 8007e98:	4638      	mov	r0, r7
 8007e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e9e:	bf00      	nop
 8007ea0:	08009cd8 	.word	0x08009cd8

08007ea4 <__lshift>:
 8007ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea8:	460c      	mov	r4, r1
 8007eaa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007eae:	6923      	ldr	r3, [r4, #16]
 8007eb0:	6849      	ldr	r1, [r1, #4]
 8007eb2:	eb0a 0903 	add.w	r9, sl, r3
 8007eb6:	68a3      	ldr	r3, [r4, #8]
 8007eb8:	4607      	mov	r7, r0
 8007eba:	4616      	mov	r6, r2
 8007ebc:	f109 0501 	add.w	r5, r9, #1
 8007ec0:	42ab      	cmp	r3, r5
 8007ec2:	db32      	blt.n	8007f2a <__lshift+0x86>
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	f7ff fe2c 	bl	8007b22 <_Balloc>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	4680      	mov	r8, r0
 8007ece:	f100 0114 	add.w	r1, r0, #20
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	4553      	cmp	r3, sl
 8007ed6:	db2b      	blt.n	8007f30 <__lshift+0x8c>
 8007ed8:	6920      	ldr	r0, [r4, #16]
 8007eda:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ede:	f104 0314 	add.w	r3, r4, #20
 8007ee2:	f016 021f 	ands.w	r2, r6, #31
 8007ee6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007eea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007eee:	d025      	beq.n	8007f3c <__lshift+0x98>
 8007ef0:	f1c2 0e20 	rsb	lr, r2, #32
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	681e      	ldr	r6, [r3, #0]
 8007ef8:	468a      	mov	sl, r1
 8007efa:	4096      	lsls	r6, r2
 8007efc:	4330      	orrs	r0, r6
 8007efe:	f84a 0b04 	str.w	r0, [sl], #4
 8007f02:	f853 0b04 	ldr.w	r0, [r3], #4
 8007f06:	459c      	cmp	ip, r3
 8007f08:	fa20 f00e 	lsr.w	r0, r0, lr
 8007f0c:	d814      	bhi.n	8007f38 <__lshift+0x94>
 8007f0e:	6048      	str	r0, [r1, #4]
 8007f10:	b108      	cbz	r0, 8007f16 <__lshift+0x72>
 8007f12:	f109 0502 	add.w	r5, r9, #2
 8007f16:	3d01      	subs	r5, #1
 8007f18:	4638      	mov	r0, r7
 8007f1a:	f8c8 5010 	str.w	r5, [r8, #16]
 8007f1e:	4621      	mov	r1, r4
 8007f20:	f7ff fe33 	bl	8007b8a <_Bfree>
 8007f24:	4640      	mov	r0, r8
 8007f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2a:	3101      	adds	r1, #1
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	e7c7      	b.n	8007ec0 <__lshift+0x1c>
 8007f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007f34:	3301      	adds	r3, #1
 8007f36:	e7cd      	b.n	8007ed4 <__lshift+0x30>
 8007f38:	4651      	mov	r1, sl
 8007f3a:	e7dc      	b.n	8007ef6 <__lshift+0x52>
 8007f3c:	3904      	subs	r1, #4
 8007f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f42:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f46:	459c      	cmp	ip, r3
 8007f48:	d8f9      	bhi.n	8007f3e <__lshift+0x9a>
 8007f4a:	e7e4      	b.n	8007f16 <__lshift+0x72>

08007f4c <__mcmp>:
 8007f4c:	6903      	ldr	r3, [r0, #16]
 8007f4e:	690a      	ldr	r2, [r1, #16]
 8007f50:	1a9b      	subs	r3, r3, r2
 8007f52:	b530      	push	{r4, r5, lr}
 8007f54:	d10c      	bne.n	8007f70 <__mcmp+0x24>
 8007f56:	0092      	lsls	r2, r2, #2
 8007f58:	3014      	adds	r0, #20
 8007f5a:	3114      	adds	r1, #20
 8007f5c:	1884      	adds	r4, r0, r2
 8007f5e:	4411      	add	r1, r2
 8007f60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f68:	4295      	cmp	r5, r2
 8007f6a:	d003      	beq.n	8007f74 <__mcmp+0x28>
 8007f6c:	d305      	bcc.n	8007f7a <__mcmp+0x2e>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4618      	mov	r0, r3
 8007f72:	bd30      	pop	{r4, r5, pc}
 8007f74:	42a0      	cmp	r0, r4
 8007f76:	d3f3      	bcc.n	8007f60 <__mcmp+0x14>
 8007f78:	e7fa      	b.n	8007f70 <__mcmp+0x24>
 8007f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f7e:	e7f7      	b.n	8007f70 <__mcmp+0x24>

08007f80 <__mdiff>:
 8007f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f84:	460d      	mov	r5, r1
 8007f86:	4607      	mov	r7, r0
 8007f88:	4611      	mov	r1, r2
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	4614      	mov	r4, r2
 8007f8e:	f7ff ffdd 	bl	8007f4c <__mcmp>
 8007f92:	1e06      	subs	r6, r0, #0
 8007f94:	d108      	bne.n	8007fa8 <__mdiff+0x28>
 8007f96:	4631      	mov	r1, r6
 8007f98:	4638      	mov	r0, r7
 8007f9a:	f7ff fdc2 	bl	8007b22 <_Balloc>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa8:	bfa4      	itt	ge
 8007faa:	4623      	movge	r3, r4
 8007fac:	462c      	movge	r4, r5
 8007fae:	4638      	mov	r0, r7
 8007fb0:	6861      	ldr	r1, [r4, #4]
 8007fb2:	bfa6      	itte	ge
 8007fb4:	461d      	movge	r5, r3
 8007fb6:	2600      	movge	r6, #0
 8007fb8:	2601      	movlt	r6, #1
 8007fba:	f7ff fdb2 	bl	8007b22 <_Balloc>
 8007fbe:	692b      	ldr	r3, [r5, #16]
 8007fc0:	60c6      	str	r6, [r0, #12]
 8007fc2:	6926      	ldr	r6, [r4, #16]
 8007fc4:	f105 0914 	add.w	r9, r5, #20
 8007fc8:	f104 0214 	add.w	r2, r4, #20
 8007fcc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007fd0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007fd4:	f100 0514 	add.w	r5, r0, #20
 8007fd8:	f04f 0e00 	mov.w	lr, #0
 8007fdc:	f852 ab04 	ldr.w	sl, [r2], #4
 8007fe0:	f859 4b04 	ldr.w	r4, [r9], #4
 8007fe4:	fa1e f18a 	uxtah	r1, lr, sl
 8007fe8:	b2a3      	uxth	r3, r4
 8007fea:	1ac9      	subs	r1, r1, r3
 8007fec:	0c23      	lsrs	r3, r4, #16
 8007fee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007ff2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ff6:	b289      	uxth	r1, r1
 8007ff8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007ffc:	45c8      	cmp	r8, r9
 8007ffe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008002:	4694      	mov	ip, r2
 8008004:	f845 3b04 	str.w	r3, [r5], #4
 8008008:	d8e8      	bhi.n	8007fdc <__mdiff+0x5c>
 800800a:	45bc      	cmp	ip, r7
 800800c:	d304      	bcc.n	8008018 <__mdiff+0x98>
 800800e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008012:	b183      	cbz	r3, 8008036 <__mdiff+0xb6>
 8008014:	6106      	str	r6, [r0, #16]
 8008016:	e7c5      	b.n	8007fa4 <__mdiff+0x24>
 8008018:	f85c 1b04 	ldr.w	r1, [ip], #4
 800801c:	fa1e f381 	uxtah	r3, lr, r1
 8008020:	141a      	asrs	r2, r3, #16
 8008022:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008026:	b29b      	uxth	r3, r3
 8008028:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800802c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008030:	f845 3b04 	str.w	r3, [r5], #4
 8008034:	e7e9      	b.n	800800a <__mdiff+0x8a>
 8008036:	3e01      	subs	r6, #1
 8008038:	e7e9      	b.n	800800e <__mdiff+0x8e>

0800803a <__d2b>:
 800803a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800803e:	460e      	mov	r6, r1
 8008040:	2101      	movs	r1, #1
 8008042:	ec59 8b10 	vmov	r8, r9, d0
 8008046:	4615      	mov	r5, r2
 8008048:	f7ff fd6b 	bl	8007b22 <_Balloc>
 800804c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008050:	4607      	mov	r7, r0
 8008052:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008056:	bb34      	cbnz	r4, 80080a6 <__d2b+0x6c>
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	f1b8 0300 	subs.w	r3, r8, #0
 800805e:	d027      	beq.n	80080b0 <__d2b+0x76>
 8008060:	a802      	add	r0, sp, #8
 8008062:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008066:	f7ff fe01 	bl	8007c6c <__lo0bits>
 800806a:	9900      	ldr	r1, [sp, #0]
 800806c:	b1f0      	cbz	r0, 80080ac <__d2b+0x72>
 800806e:	9a01      	ldr	r2, [sp, #4]
 8008070:	f1c0 0320 	rsb	r3, r0, #32
 8008074:	fa02 f303 	lsl.w	r3, r2, r3
 8008078:	430b      	orrs	r3, r1
 800807a:	40c2      	lsrs	r2, r0
 800807c:	617b      	str	r3, [r7, #20]
 800807e:	9201      	str	r2, [sp, #4]
 8008080:	9b01      	ldr	r3, [sp, #4]
 8008082:	61bb      	str	r3, [r7, #24]
 8008084:	2b00      	cmp	r3, #0
 8008086:	bf14      	ite	ne
 8008088:	2102      	movne	r1, #2
 800808a:	2101      	moveq	r1, #1
 800808c:	6139      	str	r1, [r7, #16]
 800808e:	b1c4      	cbz	r4, 80080c2 <__d2b+0x88>
 8008090:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008094:	4404      	add	r4, r0
 8008096:	6034      	str	r4, [r6, #0]
 8008098:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800809c:	6028      	str	r0, [r5, #0]
 800809e:	4638      	mov	r0, r7
 80080a0:	b003      	add	sp, #12
 80080a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080aa:	e7d5      	b.n	8008058 <__d2b+0x1e>
 80080ac:	6179      	str	r1, [r7, #20]
 80080ae:	e7e7      	b.n	8008080 <__d2b+0x46>
 80080b0:	a801      	add	r0, sp, #4
 80080b2:	f7ff fddb 	bl	8007c6c <__lo0bits>
 80080b6:	9b01      	ldr	r3, [sp, #4]
 80080b8:	617b      	str	r3, [r7, #20]
 80080ba:	2101      	movs	r1, #1
 80080bc:	6139      	str	r1, [r7, #16]
 80080be:	3020      	adds	r0, #32
 80080c0:	e7e5      	b.n	800808e <__d2b+0x54>
 80080c2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80080c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080ca:	6030      	str	r0, [r6, #0]
 80080cc:	6918      	ldr	r0, [r3, #16]
 80080ce:	f7ff fdae 	bl	8007c2e <__hi0bits>
 80080d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080d6:	e7e1      	b.n	800809c <__d2b+0x62>

080080d8 <_calloc_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	fb02 f401 	mul.w	r4, r2, r1
 80080de:	4621      	mov	r1, r4
 80080e0:	f000 f856 	bl	8008190 <_malloc_r>
 80080e4:	4605      	mov	r5, r0
 80080e6:	b118      	cbz	r0, 80080f0 <_calloc_r+0x18>
 80080e8:	4622      	mov	r2, r4
 80080ea:	2100      	movs	r1, #0
 80080ec:	f7fe fa1e 	bl	800652c <memset>
 80080f0:	4628      	mov	r0, r5
 80080f2:	bd38      	pop	{r3, r4, r5, pc}

080080f4 <_free_r>:
 80080f4:	b538      	push	{r3, r4, r5, lr}
 80080f6:	4605      	mov	r5, r0
 80080f8:	2900      	cmp	r1, #0
 80080fa:	d045      	beq.n	8008188 <_free_r+0x94>
 80080fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008100:	1f0c      	subs	r4, r1, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	bfb8      	it	lt
 8008106:	18e4      	addlt	r4, r4, r3
 8008108:	f000 fa29 	bl	800855e <__malloc_lock>
 800810c:	4a1f      	ldr	r2, [pc, #124]	; (800818c <_free_r+0x98>)
 800810e:	6813      	ldr	r3, [r2, #0]
 8008110:	4610      	mov	r0, r2
 8008112:	b933      	cbnz	r3, 8008122 <_free_r+0x2e>
 8008114:	6063      	str	r3, [r4, #4]
 8008116:	6014      	str	r4, [r2, #0]
 8008118:	4628      	mov	r0, r5
 800811a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800811e:	f000 ba1f 	b.w	8008560 <__malloc_unlock>
 8008122:	42a3      	cmp	r3, r4
 8008124:	d90c      	bls.n	8008140 <_free_r+0x4c>
 8008126:	6821      	ldr	r1, [r4, #0]
 8008128:	1862      	adds	r2, r4, r1
 800812a:	4293      	cmp	r3, r2
 800812c:	bf04      	itt	eq
 800812e:	681a      	ldreq	r2, [r3, #0]
 8008130:	685b      	ldreq	r3, [r3, #4]
 8008132:	6063      	str	r3, [r4, #4]
 8008134:	bf04      	itt	eq
 8008136:	1852      	addeq	r2, r2, r1
 8008138:	6022      	streq	r2, [r4, #0]
 800813a:	6004      	str	r4, [r0, #0]
 800813c:	e7ec      	b.n	8008118 <_free_r+0x24>
 800813e:	4613      	mov	r3, r2
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	b10a      	cbz	r2, 8008148 <_free_r+0x54>
 8008144:	42a2      	cmp	r2, r4
 8008146:	d9fa      	bls.n	800813e <_free_r+0x4a>
 8008148:	6819      	ldr	r1, [r3, #0]
 800814a:	1858      	adds	r0, r3, r1
 800814c:	42a0      	cmp	r0, r4
 800814e:	d10b      	bne.n	8008168 <_free_r+0x74>
 8008150:	6820      	ldr	r0, [r4, #0]
 8008152:	4401      	add	r1, r0
 8008154:	1858      	adds	r0, r3, r1
 8008156:	4282      	cmp	r2, r0
 8008158:	6019      	str	r1, [r3, #0]
 800815a:	d1dd      	bne.n	8008118 <_free_r+0x24>
 800815c:	6810      	ldr	r0, [r2, #0]
 800815e:	6852      	ldr	r2, [r2, #4]
 8008160:	605a      	str	r2, [r3, #4]
 8008162:	4401      	add	r1, r0
 8008164:	6019      	str	r1, [r3, #0]
 8008166:	e7d7      	b.n	8008118 <_free_r+0x24>
 8008168:	d902      	bls.n	8008170 <_free_r+0x7c>
 800816a:	230c      	movs	r3, #12
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	e7d3      	b.n	8008118 <_free_r+0x24>
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	1821      	adds	r1, r4, r0
 8008174:	428a      	cmp	r2, r1
 8008176:	bf04      	itt	eq
 8008178:	6811      	ldreq	r1, [r2, #0]
 800817a:	6852      	ldreq	r2, [r2, #4]
 800817c:	6062      	str	r2, [r4, #4]
 800817e:	bf04      	itt	eq
 8008180:	1809      	addeq	r1, r1, r0
 8008182:	6021      	streq	r1, [r4, #0]
 8008184:	605c      	str	r4, [r3, #4]
 8008186:	e7c7      	b.n	8008118 <_free_r+0x24>
 8008188:	bd38      	pop	{r3, r4, r5, pc}
 800818a:	bf00      	nop
 800818c:	20000230 	.word	0x20000230

08008190 <_malloc_r>:
 8008190:	b570      	push	{r4, r5, r6, lr}
 8008192:	1ccd      	adds	r5, r1, #3
 8008194:	f025 0503 	bic.w	r5, r5, #3
 8008198:	3508      	adds	r5, #8
 800819a:	2d0c      	cmp	r5, #12
 800819c:	bf38      	it	cc
 800819e:	250c      	movcc	r5, #12
 80081a0:	2d00      	cmp	r5, #0
 80081a2:	4606      	mov	r6, r0
 80081a4:	db01      	blt.n	80081aa <_malloc_r+0x1a>
 80081a6:	42a9      	cmp	r1, r5
 80081a8:	d903      	bls.n	80081b2 <_malloc_r+0x22>
 80081aa:	230c      	movs	r3, #12
 80081ac:	6033      	str	r3, [r6, #0]
 80081ae:	2000      	movs	r0, #0
 80081b0:	bd70      	pop	{r4, r5, r6, pc}
 80081b2:	f000 f9d4 	bl	800855e <__malloc_lock>
 80081b6:	4a21      	ldr	r2, [pc, #132]	; (800823c <_malloc_r+0xac>)
 80081b8:	6814      	ldr	r4, [r2, #0]
 80081ba:	4621      	mov	r1, r4
 80081bc:	b991      	cbnz	r1, 80081e4 <_malloc_r+0x54>
 80081be:	4c20      	ldr	r4, [pc, #128]	; (8008240 <_malloc_r+0xb0>)
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	b91b      	cbnz	r3, 80081cc <_malloc_r+0x3c>
 80081c4:	4630      	mov	r0, r6
 80081c6:	f000 f98f 	bl	80084e8 <_sbrk_r>
 80081ca:	6020      	str	r0, [r4, #0]
 80081cc:	4629      	mov	r1, r5
 80081ce:	4630      	mov	r0, r6
 80081d0:	f000 f98a 	bl	80084e8 <_sbrk_r>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d124      	bne.n	8008222 <_malloc_r+0x92>
 80081d8:	230c      	movs	r3, #12
 80081da:	6033      	str	r3, [r6, #0]
 80081dc:	4630      	mov	r0, r6
 80081de:	f000 f9bf 	bl	8008560 <__malloc_unlock>
 80081e2:	e7e4      	b.n	80081ae <_malloc_r+0x1e>
 80081e4:	680b      	ldr	r3, [r1, #0]
 80081e6:	1b5b      	subs	r3, r3, r5
 80081e8:	d418      	bmi.n	800821c <_malloc_r+0x8c>
 80081ea:	2b0b      	cmp	r3, #11
 80081ec:	d90f      	bls.n	800820e <_malloc_r+0x7e>
 80081ee:	600b      	str	r3, [r1, #0]
 80081f0:	50cd      	str	r5, [r1, r3]
 80081f2:	18cc      	adds	r4, r1, r3
 80081f4:	4630      	mov	r0, r6
 80081f6:	f000 f9b3 	bl	8008560 <__malloc_unlock>
 80081fa:	f104 000b 	add.w	r0, r4, #11
 80081fe:	1d23      	adds	r3, r4, #4
 8008200:	f020 0007 	bic.w	r0, r0, #7
 8008204:	1ac3      	subs	r3, r0, r3
 8008206:	d0d3      	beq.n	80081b0 <_malloc_r+0x20>
 8008208:	425a      	negs	r2, r3
 800820a:	50e2      	str	r2, [r4, r3]
 800820c:	e7d0      	b.n	80081b0 <_malloc_r+0x20>
 800820e:	428c      	cmp	r4, r1
 8008210:	684b      	ldr	r3, [r1, #4]
 8008212:	bf16      	itet	ne
 8008214:	6063      	strne	r3, [r4, #4]
 8008216:	6013      	streq	r3, [r2, #0]
 8008218:	460c      	movne	r4, r1
 800821a:	e7eb      	b.n	80081f4 <_malloc_r+0x64>
 800821c:	460c      	mov	r4, r1
 800821e:	6849      	ldr	r1, [r1, #4]
 8008220:	e7cc      	b.n	80081bc <_malloc_r+0x2c>
 8008222:	1cc4      	adds	r4, r0, #3
 8008224:	f024 0403 	bic.w	r4, r4, #3
 8008228:	42a0      	cmp	r0, r4
 800822a:	d005      	beq.n	8008238 <_malloc_r+0xa8>
 800822c:	1a21      	subs	r1, r4, r0
 800822e:	4630      	mov	r0, r6
 8008230:	f000 f95a 	bl	80084e8 <_sbrk_r>
 8008234:	3001      	adds	r0, #1
 8008236:	d0cf      	beq.n	80081d8 <_malloc_r+0x48>
 8008238:	6025      	str	r5, [r4, #0]
 800823a:	e7db      	b.n	80081f4 <_malloc_r+0x64>
 800823c:	20000230 	.word	0x20000230
 8008240:	20000234 	.word	0x20000234

08008244 <__ssputs_r>:
 8008244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008248:	688e      	ldr	r6, [r1, #8]
 800824a:	429e      	cmp	r6, r3
 800824c:	4682      	mov	sl, r0
 800824e:	460c      	mov	r4, r1
 8008250:	4690      	mov	r8, r2
 8008252:	4699      	mov	r9, r3
 8008254:	d837      	bhi.n	80082c6 <__ssputs_r+0x82>
 8008256:	898a      	ldrh	r2, [r1, #12]
 8008258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800825c:	d031      	beq.n	80082c2 <__ssputs_r+0x7e>
 800825e:	6825      	ldr	r5, [r4, #0]
 8008260:	6909      	ldr	r1, [r1, #16]
 8008262:	1a6f      	subs	r7, r5, r1
 8008264:	6965      	ldr	r5, [r4, #20]
 8008266:	2302      	movs	r3, #2
 8008268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800826c:	fb95 f5f3 	sdiv	r5, r5, r3
 8008270:	f109 0301 	add.w	r3, r9, #1
 8008274:	443b      	add	r3, r7
 8008276:	429d      	cmp	r5, r3
 8008278:	bf38      	it	cc
 800827a:	461d      	movcc	r5, r3
 800827c:	0553      	lsls	r3, r2, #21
 800827e:	d530      	bpl.n	80082e2 <__ssputs_r+0x9e>
 8008280:	4629      	mov	r1, r5
 8008282:	f7ff ff85 	bl	8008190 <_malloc_r>
 8008286:	4606      	mov	r6, r0
 8008288:	b950      	cbnz	r0, 80082a0 <__ssputs_r+0x5c>
 800828a:	230c      	movs	r3, #12
 800828c:	f8ca 3000 	str.w	r3, [sl]
 8008290:	89a3      	ldrh	r3, [r4, #12]
 8008292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800829c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a0:	463a      	mov	r2, r7
 80082a2:	6921      	ldr	r1, [r4, #16]
 80082a4:	f7ff fc32 	bl	8007b0c <memcpy>
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	6126      	str	r6, [r4, #16]
 80082b6:	6165      	str	r5, [r4, #20]
 80082b8:	443e      	add	r6, r7
 80082ba:	1bed      	subs	r5, r5, r7
 80082bc:	6026      	str	r6, [r4, #0]
 80082be:	60a5      	str	r5, [r4, #8]
 80082c0:	464e      	mov	r6, r9
 80082c2:	454e      	cmp	r6, r9
 80082c4:	d900      	bls.n	80082c8 <__ssputs_r+0x84>
 80082c6:	464e      	mov	r6, r9
 80082c8:	4632      	mov	r2, r6
 80082ca:	4641      	mov	r1, r8
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	f000 f92d 	bl	800852c <memmove>
 80082d2:	68a3      	ldr	r3, [r4, #8]
 80082d4:	1b9b      	subs	r3, r3, r6
 80082d6:	60a3      	str	r3, [r4, #8]
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	441e      	add	r6, r3
 80082dc:	6026      	str	r6, [r4, #0]
 80082de:	2000      	movs	r0, #0
 80082e0:	e7dc      	b.n	800829c <__ssputs_r+0x58>
 80082e2:	462a      	mov	r2, r5
 80082e4:	f000 f93d 	bl	8008562 <_realloc_r>
 80082e8:	4606      	mov	r6, r0
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d1e2      	bne.n	80082b4 <__ssputs_r+0x70>
 80082ee:	6921      	ldr	r1, [r4, #16]
 80082f0:	4650      	mov	r0, sl
 80082f2:	f7ff feff 	bl	80080f4 <_free_r>
 80082f6:	e7c8      	b.n	800828a <__ssputs_r+0x46>

080082f8 <_svfiprintf_r>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	461d      	mov	r5, r3
 80082fe:	898b      	ldrh	r3, [r1, #12]
 8008300:	061f      	lsls	r7, r3, #24
 8008302:	b09d      	sub	sp, #116	; 0x74
 8008304:	4680      	mov	r8, r0
 8008306:	460c      	mov	r4, r1
 8008308:	4616      	mov	r6, r2
 800830a:	d50f      	bpl.n	800832c <_svfiprintf_r+0x34>
 800830c:	690b      	ldr	r3, [r1, #16]
 800830e:	b96b      	cbnz	r3, 800832c <_svfiprintf_r+0x34>
 8008310:	2140      	movs	r1, #64	; 0x40
 8008312:	f7ff ff3d 	bl	8008190 <_malloc_r>
 8008316:	6020      	str	r0, [r4, #0]
 8008318:	6120      	str	r0, [r4, #16]
 800831a:	b928      	cbnz	r0, 8008328 <_svfiprintf_r+0x30>
 800831c:	230c      	movs	r3, #12
 800831e:	f8c8 3000 	str.w	r3, [r8]
 8008322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008326:	e0c8      	b.n	80084ba <_svfiprintf_r+0x1c2>
 8008328:	2340      	movs	r3, #64	; 0x40
 800832a:	6163      	str	r3, [r4, #20]
 800832c:	2300      	movs	r3, #0
 800832e:	9309      	str	r3, [sp, #36]	; 0x24
 8008330:	2320      	movs	r3, #32
 8008332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008336:	2330      	movs	r3, #48	; 0x30
 8008338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800833c:	9503      	str	r5, [sp, #12]
 800833e:	f04f 0b01 	mov.w	fp, #1
 8008342:	4637      	mov	r7, r6
 8008344:	463d      	mov	r5, r7
 8008346:	f815 3b01 	ldrb.w	r3, [r5], #1
 800834a:	b10b      	cbz	r3, 8008350 <_svfiprintf_r+0x58>
 800834c:	2b25      	cmp	r3, #37	; 0x25
 800834e:	d13e      	bne.n	80083ce <_svfiprintf_r+0xd6>
 8008350:	ebb7 0a06 	subs.w	sl, r7, r6
 8008354:	d00b      	beq.n	800836e <_svfiprintf_r+0x76>
 8008356:	4653      	mov	r3, sl
 8008358:	4632      	mov	r2, r6
 800835a:	4621      	mov	r1, r4
 800835c:	4640      	mov	r0, r8
 800835e:	f7ff ff71 	bl	8008244 <__ssputs_r>
 8008362:	3001      	adds	r0, #1
 8008364:	f000 80a4 	beq.w	80084b0 <_svfiprintf_r+0x1b8>
 8008368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836a:	4453      	add	r3, sl
 800836c:	9309      	str	r3, [sp, #36]	; 0x24
 800836e:	783b      	ldrb	r3, [r7, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 809d 	beq.w	80084b0 <_svfiprintf_r+0x1b8>
 8008376:	2300      	movs	r3, #0
 8008378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800837c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008380:	9304      	str	r3, [sp, #16]
 8008382:	9307      	str	r3, [sp, #28]
 8008384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008388:	931a      	str	r3, [sp, #104]	; 0x68
 800838a:	462f      	mov	r7, r5
 800838c:	2205      	movs	r2, #5
 800838e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008392:	4850      	ldr	r0, [pc, #320]	; (80084d4 <_svfiprintf_r+0x1dc>)
 8008394:	f7f7 ff44 	bl	8000220 <memchr>
 8008398:	9b04      	ldr	r3, [sp, #16]
 800839a:	b9d0      	cbnz	r0, 80083d2 <_svfiprintf_r+0xda>
 800839c:	06d9      	lsls	r1, r3, #27
 800839e:	bf44      	itt	mi
 80083a0:	2220      	movmi	r2, #32
 80083a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083a6:	071a      	lsls	r2, r3, #28
 80083a8:	bf44      	itt	mi
 80083aa:	222b      	movmi	r2, #43	; 0x2b
 80083ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083b0:	782a      	ldrb	r2, [r5, #0]
 80083b2:	2a2a      	cmp	r2, #42	; 0x2a
 80083b4:	d015      	beq.n	80083e2 <_svfiprintf_r+0xea>
 80083b6:	9a07      	ldr	r2, [sp, #28]
 80083b8:	462f      	mov	r7, r5
 80083ba:	2000      	movs	r0, #0
 80083bc:	250a      	movs	r5, #10
 80083be:	4639      	mov	r1, r7
 80083c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c4:	3b30      	subs	r3, #48	; 0x30
 80083c6:	2b09      	cmp	r3, #9
 80083c8:	d94d      	bls.n	8008466 <_svfiprintf_r+0x16e>
 80083ca:	b1b8      	cbz	r0, 80083fc <_svfiprintf_r+0x104>
 80083cc:	e00f      	b.n	80083ee <_svfiprintf_r+0xf6>
 80083ce:	462f      	mov	r7, r5
 80083d0:	e7b8      	b.n	8008344 <_svfiprintf_r+0x4c>
 80083d2:	4a40      	ldr	r2, [pc, #256]	; (80084d4 <_svfiprintf_r+0x1dc>)
 80083d4:	1a80      	subs	r0, r0, r2
 80083d6:	fa0b f000 	lsl.w	r0, fp, r0
 80083da:	4318      	orrs	r0, r3
 80083dc:	9004      	str	r0, [sp, #16]
 80083de:	463d      	mov	r5, r7
 80083e0:	e7d3      	b.n	800838a <_svfiprintf_r+0x92>
 80083e2:	9a03      	ldr	r2, [sp, #12]
 80083e4:	1d11      	adds	r1, r2, #4
 80083e6:	6812      	ldr	r2, [r2, #0]
 80083e8:	9103      	str	r1, [sp, #12]
 80083ea:	2a00      	cmp	r2, #0
 80083ec:	db01      	blt.n	80083f2 <_svfiprintf_r+0xfa>
 80083ee:	9207      	str	r2, [sp, #28]
 80083f0:	e004      	b.n	80083fc <_svfiprintf_r+0x104>
 80083f2:	4252      	negs	r2, r2
 80083f4:	f043 0302 	orr.w	r3, r3, #2
 80083f8:	9207      	str	r2, [sp, #28]
 80083fa:	9304      	str	r3, [sp, #16]
 80083fc:	783b      	ldrb	r3, [r7, #0]
 80083fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008400:	d10c      	bne.n	800841c <_svfiprintf_r+0x124>
 8008402:	787b      	ldrb	r3, [r7, #1]
 8008404:	2b2a      	cmp	r3, #42	; 0x2a
 8008406:	d133      	bne.n	8008470 <_svfiprintf_r+0x178>
 8008408:	9b03      	ldr	r3, [sp, #12]
 800840a:	1d1a      	adds	r2, r3, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	9203      	str	r2, [sp, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bfb8      	it	lt
 8008414:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008418:	3702      	adds	r7, #2
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	4d2e      	ldr	r5, [pc, #184]	; (80084d8 <_svfiprintf_r+0x1e0>)
 800841e:	7839      	ldrb	r1, [r7, #0]
 8008420:	2203      	movs	r2, #3
 8008422:	4628      	mov	r0, r5
 8008424:	f7f7 fefc 	bl	8000220 <memchr>
 8008428:	b138      	cbz	r0, 800843a <_svfiprintf_r+0x142>
 800842a:	2340      	movs	r3, #64	; 0x40
 800842c:	1b40      	subs	r0, r0, r5
 800842e:	fa03 f000 	lsl.w	r0, r3, r0
 8008432:	9b04      	ldr	r3, [sp, #16]
 8008434:	4303      	orrs	r3, r0
 8008436:	3701      	adds	r7, #1
 8008438:	9304      	str	r3, [sp, #16]
 800843a:	7839      	ldrb	r1, [r7, #0]
 800843c:	4827      	ldr	r0, [pc, #156]	; (80084dc <_svfiprintf_r+0x1e4>)
 800843e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008442:	2206      	movs	r2, #6
 8008444:	1c7e      	adds	r6, r7, #1
 8008446:	f7f7 feeb 	bl	8000220 <memchr>
 800844a:	2800      	cmp	r0, #0
 800844c:	d038      	beq.n	80084c0 <_svfiprintf_r+0x1c8>
 800844e:	4b24      	ldr	r3, [pc, #144]	; (80084e0 <_svfiprintf_r+0x1e8>)
 8008450:	bb13      	cbnz	r3, 8008498 <_svfiprintf_r+0x1a0>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	3307      	adds	r3, #7
 8008456:	f023 0307 	bic.w	r3, r3, #7
 800845a:	3308      	adds	r3, #8
 800845c:	9303      	str	r3, [sp, #12]
 800845e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008460:	444b      	add	r3, r9
 8008462:	9309      	str	r3, [sp, #36]	; 0x24
 8008464:	e76d      	b.n	8008342 <_svfiprintf_r+0x4a>
 8008466:	fb05 3202 	mla	r2, r5, r2, r3
 800846a:	2001      	movs	r0, #1
 800846c:	460f      	mov	r7, r1
 800846e:	e7a6      	b.n	80083be <_svfiprintf_r+0xc6>
 8008470:	2300      	movs	r3, #0
 8008472:	3701      	adds	r7, #1
 8008474:	9305      	str	r3, [sp, #20]
 8008476:	4619      	mov	r1, r3
 8008478:	250a      	movs	r5, #10
 800847a:	4638      	mov	r0, r7
 800847c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008480:	3a30      	subs	r2, #48	; 0x30
 8008482:	2a09      	cmp	r2, #9
 8008484:	d903      	bls.n	800848e <_svfiprintf_r+0x196>
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0c8      	beq.n	800841c <_svfiprintf_r+0x124>
 800848a:	9105      	str	r1, [sp, #20]
 800848c:	e7c6      	b.n	800841c <_svfiprintf_r+0x124>
 800848e:	fb05 2101 	mla	r1, r5, r1, r2
 8008492:	2301      	movs	r3, #1
 8008494:	4607      	mov	r7, r0
 8008496:	e7f0      	b.n	800847a <_svfiprintf_r+0x182>
 8008498:	ab03      	add	r3, sp, #12
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	4622      	mov	r2, r4
 800849e:	4b11      	ldr	r3, [pc, #68]	; (80084e4 <_svfiprintf_r+0x1ec>)
 80084a0:	a904      	add	r1, sp, #16
 80084a2:	4640      	mov	r0, r8
 80084a4:	f7fe f8de 	bl	8006664 <_printf_float>
 80084a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80084ac:	4681      	mov	r9, r0
 80084ae:	d1d6      	bne.n	800845e <_svfiprintf_r+0x166>
 80084b0:	89a3      	ldrh	r3, [r4, #12]
 80084b2:	065b      	lsls	r3, r3, #25
 80084b4:	f53f af35 	bmi.w	8008322 <_svfiprintf_r+0x2a>
 80084b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084ba:	b01d      	add	sp, #116	; 0x74
 80084bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c0:	ab03      	add	r3, sp, #12
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	4622      	mov	r2, r4
 80084c6:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <_svfiprintf_r+0x1ec>)
 80084c8:	a904      	add	r1, sp, #16
 80084ca:	4640      	mov	r0, r8
 80084cc:	f7fe fb80 	bl	8006bd0 <_printf_i>
 80084d0:	e7ea      	b.n	80084a8 <_svfiprintf_r+0x1b0>
 80084d2:	bf00      	nop
 80084d4:	08009ce4 	.word	0x08009ce4
 80084d8:	08009cea 	.word	0x08009cea
 80084dc:	08009cee 	.word	0x08009cee
 80084e0:	08006665 	.word	0x08006665
 80084e4:	08008245 	.word	0x08008245

080084e8 <_sbrk_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4c06      	ldr	r4, [pc, #24]	; (8008504 <_sbrk_r+0x1c>)
 80084ec:	2300      	movs	r3, #0
 80084ee:	4605      	mov	r5, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	f7f9 fbe8 	bl	8001cc8 <_sbrk>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_sbrk_r+0x1a>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_sbrk_r+0x1a>
 8008500:	602b      	str	r3, [r5, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	20002654 	.word	0x20002654

08008508 <__ascii_mbtowc>:
 8008508:	b082      	sub	sp, #8
 800850a:	b901      	cbnz	r1, 800850e <__ascii_mbtowc+0x6>
 800850c:	a901      	add	r1, sp, #4
 800850e:	b142      	cbz	r2, 8008522 <__ascii_mbtowc+0x1a>
 8008510:	b14b      	cbz	r3, 8008526 <__ascii_mbtowc+0x1e>
 8008512:	7813      	ldrb	r3, [r2, #0]
 8008514:	600b      	str	r3, [r1, #0]
 8008516:	7812      	ldrb	r2, [r2, #0]
 8008518:	1c10      	adds	r0, r2, #0
 800851a:	bf18      	it	ne
 800851c:	2001      	movne	r0, #1
 800851e:	b002      	add	sp, #8
 8008520:	4770      	bx	lr
 8008522:	4610      	mov	r0, r2
 8008524:	e7fb      	b.n	800851e <__ascii_mbtowc+0x16>
 8008526:	f06f 0001 	mvn.w	r0, #1
 800852a:	e7f8      	b.n	800851e <__ascii_mbtowc+0x16>

0800852c <memmove>:
 800852c:	4288      	cmp	r0, r1
 800852e:	b510      	push	{r4, lr}
 8008530:	eb01 0302 	add.w	r3, r1, r2
 8008534:	d807      	bhi.n	8008546 <memmove+0x1a>
 8008536:	1e42      	subs	r2, r0, #1
 8008538:	4299      	cmp	r1, r3
 800853a:	d00a      	beq.n	8008552 <memmove+0x26>
 800853c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008540:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008544:	e7f8      	b.n	8008538 <memmove+0xc>
 8008546:	4283      	cmp	r3, r0
 8008548:	d9f5      	bls.n	8008536 <memmove+0xa>
 800854a:	1881      	adds	r1, r0, r2
 800854c:	1ad2      	subs	r2, r2, r3
 800854e:	42d3      	cmn	r3, r2
 8008550:	d100      	bne.n	8008554 <memmove+0x28>
 8008552:	bd10      	pop	{r4, pc}
 8008554:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008558:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800855c:	e7f7      	b.n	800854e <memmove+0x22>

0800855e <__malloc_lock>:
 800855e:	4770      	bx	lr

08008560 <__malloc_unlock>:
 8008560:	4770      	bx	lr

08008562 <_realloc_r>:
 8008562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008564:	4607      	mov	r7, r0
 8008566:	4614      	mov	r4, r2
 8008568:	460e      	mov	r6, r1
 800856a:	b921      	cbnz	r1, 8008576 <_realloc_r+0x14>
 800856c:	4611      	mov	r1, r2
 800856e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008572:	f7ff be0d 	b.w	8008190 <_malloc_r>
 8008576:	b922      	cbnz	r2, 8008582 <_realloc_r+0x20>
 8008578:	f7ff fdbc 	bl	80080f4 <_free_r>
 800857c:	4625      	mov	r5, r4
 800857e:	4628      	mov	r0, r5
 8008580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008582:	f000 f821 	bl	80085c8 <_malloc_usable_size_r>
 8008586:	42a0      	cmp	r0, r4
 8008588:	d20f      	bcs.n	80085aa <_realloc_r+0x48>
 800858a:	4621      	mov	r1, r4
 800858c:	4638      	mov	r0, r7
 800858e:	f7ff fdff 	bl	8008190 <_malloc_r>
 8008592:	4605      	mov	r5, r0
 8008594:	2800      	cmp	r0, #0
 8008596:	d0f2      	beq.n	800857e <_realloc_r+0x1c>
 8008598:	4631      	mov	r1, r6
 800859a:	4622      	mov	r2, r4
 800859c:	f7ff fab6 	bl	8007b0c <memcpy>
 80085a0:	4631      	mov	r1, r6
 80085a2:	4638      	mov	r0, r7
 80085a4:	f7ff fda6 	bl	80080f4 <_free_r>
 80085a8:	e7e9      	b.n	800857e <_realloc_r+0x1c>
 80085aa:	4635      	mov	r5, r6
 80085ac:	e7e7      	b.n	800857e <_realloc_r+0x1c>

080085ae <__ascii_wctomb>:
 80085ae:	b149      	cbz	r1, 80085c4 <__ascii_wctomb+0x16>
 80085b0:	2aff      	cmp	r2, #255	; 0xff
 80085b2:	bf85      	ittet	hi
 80085b4:	238a      	movhi	r3, #138	; 0x8a
 80085b6:	6003      	strhi	r3, [r0, #0]
 80085b8:	700a      	strbls	r2, [r1, #0]
 80085ba:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80085be:	bf98      	it	ls
 80085c0:	2001      	movls	r0, #1
 80085c2:	4770      	bx	lr
 80085c4:	4608      	mov	r0, r1
 80085c6:	4770      	bx	lr

080085c8 <_malloc_usable_size_r>:
 80085c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085cc:	1f18      	subs	r0, r3, #4
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	bfbc      	itt	lt
 80085d2:	580b      	ldrlt	r3, [r1, r0]
 80085d4:	18c0      	addlt	r0, r0, r3
 80085d6:	4770      	bx	lr

080085d8 <log>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	ed2d 8b02 	vpush	{d8}
 80085de:	b08a      	sub	sp, #40	; 0x28
 80085e0:	ec55 4b10 	vmov	r4, r5, d0
 80085e4:	f000 f9e8 	bl	80089b8 <__ieee754_log>
 80085e8:	4b36      	ldr	r3, [pc, #216]	; (80086c4 <log+0xec>)
 80085ea:	eeb0 8a40 	vmov.f32	s16, s0
 80085ee:	eef0 8a60 	vmov.f32	s17, s1
 80085f2:	f993 6000 	ldrsb.w	r6, [r3]
 80085f6:	1c73      	adds	r3, r6, #1
 80085f8:	d05b      	beq.n	80086b2 <log+0xda>
 80085fa:	4622      	mov	r2, r4
 80085fc:	462b      	mov	r3, r5
 80085fe:	4620      	mov	r0, r4
 8008600:	4629      	mov	r1, r5
 8008602:	f7f8 fab3 	bl	8000b6c <__aeabi_dcmpun>
 8008606:	2800      	cmp	r0, #0
 8008608:	d153      	bne.n	80086b2 <log+0xda>
 800860a:	2200      	movs	r2, #0
 800860c:	2300      	movs	r3, #0
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	f7f8 faa1 	bl	8000b58 <__aeabi_dcmpgt>
 8008616:	2800      	cmp	r0, #0
 8008618:	d14b      	bne.n	80086b2 <log+0xda>
 800861a:	4b2b      	ldr	r3, [pc, #172]	; (80086c8 <log+0xf0>)
 800861c:	9301      	str	r3, [sp, #4]
 800861e:	9008      	str	r0, [sp, #32]
 8008620:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008624:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008628:	b9a6      	cbnz	r6, 8008654 <log+0x7c>
 800862a:	4b28      	ldr	r3, [pc, #160]	; (80086cc <log+0xf4>)
 800862c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008630:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008634:	4620      	mov	r0, r4
 8008636:	2200      	movs	r2, #0
 8008638:	2300      	movs	r3, #0
 800863a:	4629      	mov	r1, r5
 800863c:	f7f8 fa64 	bl	8000b08 <__aeabi_dcmpeq>
 8008640:	bb40      	cbnz	r0, 8008694 <log+0xbc>
 8008642:	2301      	movs	r3, #1
 8008644:	2e02      	cmp	r6, #2
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	d119      	bne.n	800867e <log+0xa6>
 800864a:	f7fd ff45 	bl	80064d8 <__errno>
 800864e:	2321      	movs	r3, #33	; 0x21
 8008650:	6003      	str	r3, [r0, #0]
 8008652:	e019      	b.n	8008688 <log+0xb0>
 8008654:	4b1e      	ldr	r3, [pc, #120]	; (80086d0 <log+0xf8>)
 8008656:	2200      	movs	r2, #0
 8008658:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800865c:	4620      	mov	r0, r4
 800865e:	2200      	movs	r2, #0
 8008660:	2300      	movs	r3, #0
 8008662:	4629      	mov	r1, r5
 8008664:	f7f8 fa50 	bl	8000b08 <__aeabi_dcmpeq>
 8008668:	2800      	cmp	r0, #0
 800866a:	d0ea      	beq.n	8008642 <log+0x6a>
 800866c:	2302      	movs	r3, #2
 800866e:	429e      	cmp	r6, r3
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	d111      	bne.n	8008698 <log+0xc0>
 8008674:	f7fd ff30 	bl	80064d8 <__errno>
 8008678:	2322      	movs	r3, #34	; 0x22
 800867a:	6003      	str	r3, [r0, #0]
 800867c:	e011      	b.n	80086a2 <log+0xca>
 800867e:	4668      	mov	r0, sp
 8008680:	f001 f91d 	bl	80098be <matherr>
 8008684:	2800      	cmp	r0, #0
 8008686:	d0e0      	beq.n	800864a <log+0x72>
 8008688:	4812      	ldr	r0, [pc, #72]	; (80086d4 <log+0xfc>)
 800868a:	f001 f91d 	bl	80098c8 <nan>
 800868e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8008692:	e006      	b.n	80086a2 <log+0xca>
 8008694:	2302      	movs	r3, #2
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	4668      	mov	r0, sp
 800869a:	f001 f910 	bl	80098be <matherr>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d0e8      	beq.n	8008674 <log+0x9c>
 80086a2:	9b08      	ldr	r3, [sp, #32]
 80086a4:	b11b      	cbz	r3, 80086ae <log+0xd6>
 80086a6:	f7fd ff17 	bl	80064d8 <__errno>
 80086aa:	9b08      	ldr	r3, [sp, #32]
 80086ac:	6003      	str	r3, [r0, #0]
 80086ae:	ed9d 8b06 	vldr	d8, [sp, #24]
 80086b2:	eeb0 0a48 	vmov.f32	s0, s16
 80086b6:	eef0 0a68 	vmov.f32	s1, s17
 80086ba:	b00a      	add	sp, #40	; 0x28
 80086bc:	ecbd 8b02 	vpop	{d8}
 80086c0:	bd70      	pop	{r4, r5, r6, pc}
 80086c2:	bf00      	nop
 80086c4:	20000200 	.word	0x20000200
 80086c8:	08009e00 	.word	0x08009e00
 80086cc:	c7efffff 	.word	0xc7efffff
 80086d0:	fff00000 	.word	0xfff00000
 80086d4:	08009ce9 	.word	0x08009ce9

080086d8 <pow>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	ed2d 8b04 	vpush	{d8-d9}
 80086e0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80089b4 <pow+0x2dc>
 80086e4:	b08d      	sub	sp, #52	; 0x34
 80086e6:	ec57 6b10 	vmov	r6, r7, d0
 80086ea:	ec55 4b11 	vmov	r4, r5, d1
 80086ee:	f000 fb17 	bl	8008d20 <__ieee754_pow>
 80086f2:	f999 3000 	ldrsb.w	r3, [r9]
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	3301      	adds	r3, #1
 80086fa:	eeb0 8a40 	vmov.f32	s16, s0
 80086fe:	eef0 8a60 	vmov.f32	s17, s1
 8008702:	46c8      	mov	r8, r9
 8008704:	d05f      	beq.n	80087c6 <pow+0xee>
 8008706:	4622      	mov	r2, r4
 8008708:	462b      	mov	r3, r5
 800870a:	4620      	mov	r0, r4
 800870c:	4629      	mov	r1, r5
 800870e:	f7f8 fa2d 	bl	8000b6c <__aeabi_dcmpun>
 8008712:	4683      	mov	fp, r0
 8008714:	2800      	cmp	r0, #0
 8008716:	d156      	bne.n	80087c6 <pow+0xee>
 8008718:	4632      	mov	r2, r6
 800871a:	463b      	mov	r3, r7
 800871c:	4630      	mov	r0, r6
 800871e:	4639      	mov	r1, r7
 8008720:	f7f8 fa24 	bl	8000b6c <__aeabi_dcmpun>
 8008724:	9001      	str	r0, [sp, #4]
 8008726:	b1e8      	cbz	r0, 8008764 <pow+0x8c>
 8008728:	2200      	movs	r2, #0
 800872a:	2300      	movs	r3, #0
 800872c:	4620      	mov	r0, r4
 800872e:	4629      	mov	r1, r5
 8008730:	f7f8 f9ea 	bl	8000b08 <__aeabi_dcmpeq>
 8008734:	2800      	cmp	r0, #0
 8008736:	d046      	beq.n	80087c6 <pow+0xee>
 8008738:	2301      	movs	r3, #1
 800873a:	9302      	str	r3, [sp, #8]
 800873c:	4b96      	ldr	r3, [pc, #600]	; (8008998 <pow+0x2c0>)
 800873e:	9303      	str	r3, [sp, #12]
 8008740:	4b96      	ldr	r3, [pc, #600]	; (800899c <pow+0x2c4>)
 8008742:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008746:	2200      	movs	r2, #0
 8008748:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800874c:	9b00      	ldr	r3, [sp, #0]
 800874e:	2b02      	cmp	r3, #2
 8008750:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008754:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008758:	d033      	beq.n	80087c2 <pow+0xea>
 800875a:	a802      	add	r0, sp, #8
 800875c:	f001 f8af 	bl	80098be <matherr>
 8008760:	bb48      	cbnz	r0, 80087b6 <pow+0xde>
 8008762:	e05d      	b.n	8008820 <pow+0x148>
 8008764:	f04f 0a00 	mov.w	sl, #0
 8008768:	f04f 0b00 	mov.w	fp, #0
 800876c:	4652      	mov	r2, sl
 800876e:	465b      	mov	r3, fp
 8008770:	4630      	mov	r0, r6
 8008772:	4639      	mov	r1, r7
 8008774:	f7f8 f9c8 	bl	8000b08 <__aeabi_dcmpeq>
 8008778:	ec4b ab19 	vmov	d9, sl, fp
 800877c:	2800      	cmp	r0, #0
 800877e:	d054      	beq.n	800882a <pow+0x152>
 8008780:	4652      	mov	r2, sl
 8008782:	465b      	mov	r3, fp
 8008784:	4620      	mov	r0, r4
 8008786:	4629      	mov	r1, r5
 8008788:	f7f8 f9be 	bl	8000b08 <__aeabi_dcmpeq>
 800878c:	4680      	mov	r8, r0
 800878e:	b318      	cbz	r0, 80087d8 <pow+0x100>
 8008790:	2301      	movs	r3, #1
 8008792:	9302      	str	r3, [sp, #8]
 8008794:	4b80      	ldr	r3, [pc, #512]	; (8008998 <pow+0x2c0>)
 8008796:	9303      	str	r3, [sp, #12]
 8008798:	9b01      	ldr	r3, [sp, #4]
 800879a:	930a      	str	r3, [sp, #40]	; 0x28
 800879c:	9b00      	ldr	r3, [sp, #0]
 800879e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80087a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80087a6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0d5      	beq.n	800875a <pow+0x82>
 80087ae:	4b7b      	ldr	r3, [pc, #492]	; (800899c <pow+0x2c4>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b8:	b11b      	cbz	r3, 80087c2 <pow+0xea>
 80087ba:	f7fd fe8d 	bl	80064d8 <__errno>
 80087be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c0:	6003      	str	r3, [r0, #0]
 80087c2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80087c6:	eeb0 0a48 	vmov.f32	s0, s16
 80087ca:	eef0 0a68 	vmov.f32	s1, s17
 80087ce:	b00d      	add	sp, #52	; 0x34
 80087d0:	ecbd 8b04 	vpop	{d8-d9}
 80087d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d8:	ec45 4b10 	vmov	d0, r4, r5
 80087dc:	f001 f867 	bl	80098ae <finite>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d0f0      	beq.n	80087c6 <pow+0xee>
 80087e4:	4652      	mov	r2, sl
 80087e6:	465b      	mov	r3, fp
 80087e8:	4620      	mov	r0, r4
 80087ea:	4629      	mov	r1, r5
 80087ec:	f7f8 f996 	bl	8000b1c <__aeabi_dcmplt>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d0e8      	beq.n	80087c6 <pow+0xee>
 80087f4:	2301      	movs	r3, #1
 80087f6:	9302      	str	r3, [sp, #8]
 80087f8:	4b67      	ldr	r3, [pc, #412]	; (8008998 <pow+0x2c0>)
 80087fa:	9303      	str	r3, [sp, #12]
 80087fc:	f999 3000 	ldrsb.w	r3, [r9]
 8008800:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8008804:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008808:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800880c:	b913      	cbnz	r3, 8008814 <pow+0x13c>
 800880e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8008812:	e7a2      	b.n	800875a <pow+0x82>
 8008814:	4962      	ldr	r1, [pc, #392]	; (80089a0 <pow+0x2c8>)
 8008816:	2000      	movs	r0, #0
 8008818:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800881c:	2b02      	cmp	r3, #2
 800881e:	d19c      	bne.n	800875a <pow+0x82>
 8008820:	f7fd fe5a 	bl	80064d8 <__errno>
 8008824:	2321      	movs	r3, #33	; 0x21
 8008826:	6003      	str	r3, [r0, #0]
 8008828:	e7c5      	b.n	80087b6 <pow+0xde>
 800882a:	eeb0 0a48 	vmov.f32	s0, s16
 800882e:	eef0 0a68 	vmov.f32	s1, s17
 8008832:	f001 f83c 	bl	80098ae <finite>
 8008836:	9000      	str	r0, [sp, #0]
 8008838:	2800      	cmp	r0, #0
 800883a:	f040 8081 	bne.w	8008940 <pow+0x268>
 800883e:	ec47 6b10 	vmov	d0, r6, r7
 8008842:	f001 f834 	bl	80098ae <finite>
 8008846:	2800      	cmp	r0, #0
 8008848:	d07a      	beq.n	8008940 <pow+0x268>
 800884a:	ec45 4b10 	vmov	d0, r4, r5
 800884e:	f001 f82e 	bl	80098ae <finite>
 8008852:	2800      	cmp	r0, #0
 8008854:	d074      	beq.n	8008940 <pow+0x268>
 8008856:	ec53 2b18 	vmov	r2, r3, d8
 800885a:	ee18 0a10 	vmov	r0, s16
 800885e:	4619      	mov	r1, r3
 8008860:	f7f8 f984 	bl	8000b6c <__aeabi_dcmpun>
 8008864:	f999 9000 	ldrsb.w	r9, [r9]
 8008868:	4b4b      	ldr	r3, [pc, #300]	; (8008998 <pow+0x2c0>)
 800886a:	b1b0      	cbz	r0, 800889a <pow+0x1c2>
 800886c:	2201      	movs	r2, #1
 800886e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008872:	9b00      	ldr	r3, [sp, #0]
 8008874:	930a      	str	r3, [sp, #40]	; 0x28
 8008876:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800887a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800887e:	f1b9 0f00 	cmp.w	r9, #0
 8008882:	d0c4      	beq.n	800880e <pow+0x136>
 8008884:	4652      	mov	r2, sl
 8008886:	465b      	mov	r3, fp
 8008888:	4650      	mov	r0, sl
 800888a:	4659      	mov	r1, fp
 800888c:	f7f7 fffe 	bl	800088c <__aeabi_ddiv>
 8008890:	f1b9 0f02 	cmp.w	r9, #2
 8008894:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008898:	e7c1      	b.n	800881e <pow+0x146>
 800889a:	2203      	movs	r2, #3
 800889c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088a0:	900a      	str	r0, [sp, #40]	; 0x28
 80088a2:	4629      	mov	r1, r5
 80088a4:	4620      	mov	r0, r4
 80088a6:	2200      	movs	r2, #0
 80088a8:	4b3e      	ldr	r3, [pc, #248]	; (80089a4 <pow+0x2cc>)
 80088aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80088ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80088b2:	f7f7 fec1 	bl	8000638 <__aeabi_dmul>
 80088b6:	4604      	mov	r4, r0
 80088b8:	460d      	mov	r5, r1
 80088ba:	f1b9 0f00 	cmp.w	r9, #0
 80088be:	d124      	bne.n	800890a <pow+0x232>
 80088c0:	4b39      	ldr	r3, [pc, #228]	; (80089a8 <pow+0x2d0>)
 80088c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80088c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80088ca:	4630      	mov	r0, r6
 80088cc:	4652      	mov	r2, sl
 80088ce:	465b      	mov	r3, fp
 80088d0:	4639      	mov	r1, r7
 80088d2:	f7f8 f923 	bl	8000b1c <__aeabi_dcmplt>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d056      	beq.n	8008988 <pow+0x2b0>
 80088da:	ec45 4b10 	vmov	d0, r4, r5
 80088de:	f000 fffb 	bl	80098d8 <rint>
 80088e2:	4622      	mov	r2, r4
 80088e4:	462b      	mov	r3, r5
 80088e6:	ec51 0b10 	vmov	r0, r1, d0
 80088ea:	f7f8 f90d 	bl	8000b08 <__aeabi_dcmpeq>
 80088ee:	b920      	cbnz	r0, 80088fa <pow+0x222>
 80088f0:	4b2e      	ldr	r3, [pc, #184]	; (80089ac <pow+0x2d4>)
 80088f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80088f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80088fa:	f998 3000 	ldrsb.w	r3, [r8]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d142      	bne.n	8008988 <pow+0x2b0>
 8008902:	f7fd fde9 	bl	80064d8 <__errno>
 8008906:	2322      	movs	r3, #34	; 0x22
 8008908:	e78d      	b.n	8008826 <pow+0x14e>
 800890a:	4b29      	ldr	r3, [pc, #164]	; (80089b0 <pow+0x2d8>)
 800890c:	2200      	movs	r2, #0
 800890e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008912:	4630      	mov	r0, r6
 8008914:	4652      	mov	r2, sl
 8008916:	465b      	mov	r3, fp
 8008918:	4639      	mov	r1, r7
 800891a:	f7f8 f8ff 	bl	8000b1c <__aeabi_dcmplt>
 800891e:	2800      	cmp	r0, #0
 8008920:	d0eb      	beq.n	80088fa <pow+0x222>
 8008922:	ec45 4b10 	vmov	d0, r4, r5
 8008926:	f000 ffd7 	bl	80098d8 <rint>
 800892a:	4622      	mov	r2, r4
 800892c:	462b      	mov	r3, r5
 800892e:	ec51 0b10 	vmov	r0, r1, d0
 8008932:	f7f8 f8e9 	bl	8000b08 <__aeabi_dcmpeq>
 8008936:	2800      	cmp	r0, #0
 8008938:	d1df      	bne.n	80088fa <pow+0x222>
 800893a:	2200      	movs	r2, #0
 800893c:	4b18      	ldr	r3, [pc, #96]	; (80089a0 <pow+0x2c8>)
 800893e:	e7da      	b.n	80088f6 <pow+0x21e>
 8008940:	2200      	movs	r2, #0
 8008942:	2300      	movs	r3, #0
 8008944:	ec51 0b18 	vmov	r0, r1, d8
 8008948:	f7f8 f8de 	bl	8000b08 <__aeabi_dcmpeq>
 800894c:	2800      	cmp	r0, #0
 800894e:	f43f af3a 	beq.w	80087c6 <pow+0xee>
 8008952:	ec47 6b10 	vmov	d0, r6, r7
 8008956:	f000 ffaa 	bl	80098ae <finite>
 800895a:	2800      	cmp	r0, #0
 800895c:	f43f af33 	beq.w	80087c6 <pow+0xee>
 8008960:	ec45 4b10 	vmov	d0, r4, r5
 8008964:	f000 ffa3 	bl	80098ae <finite>
 8008968:	2800      	cmp	r0, #0
 800896a:	f43f af2c 	beq.w	80087c6 <pow+0xee>
 800896e:	2304      	movs	r3, #4
 8008970:	9302      	str	r3, [sp, #8]
 8008972:	4b09      	ldr	r3, [pc, #36]	; (8008998 <pow+0x2c0>)
 8008974:	9303      	str	r3, [sp, #12]
 8008976:	2300      	movs	r3, #0
 8008978:	930a      	str	r3, [sp, #40]	; 0x28
 800897a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800897e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008982:	ed8d 9b08 	vstr	d9, [sp, #32]
 8008986:	e7b8      	b.n	80088fa <pow+0x222>
 8008988:	a802      	add	r0, sp, #8
 800898a:	f000 ff98 	bl	80098be <matherr>
 800898e:	2800      	cmp	r0, #0
 8008990:	f47f af11 	bne.w	80087b6 <pow+0xde>
 8008994:	e7b5      	b.n	8008902 <pow+0x22a>
 8008996:	bf00      	nop
 8008998:	08009e04 	.word	0x08009e04
 800899c:	3ff00000 	.word	0x3ff00000
 80089a0:	fff00000 	.word	0xfff00000
 80089a4:	3fe00000 	.word	0x3fe00000
 80089a8:	47efffff 	.word	0x47efffff
 80089ac:	c7efffff 	.word	0xc7efffff
 80089b0:	7ff00000 	.word	0x7ff00000
 80089b4:	20000200 	.word	0x20000200

080089b8 <__ieee754_log>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	ec51 0b10 	vmov	r0, r1, d0
 80089c0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80089c4:	b087      	sub	sp, #28
 80089c6:	460d      	mov	r5, r1
 80089c8:	da27      	bge.n	8008a1a <__ieee754_log+0x62>
 80089ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089ce:	4303      	orrs	r3, r0
 80089d0:	ee10 2a10 	vmov	r2, s0
 80089d4:	d10a      	bne.n	80089ec <__ieee754_log+0x34>
 80089d6:	49cc      	ldr	r1, [pc, #816]	; (8008d08 <__ieee754_log+0x350>)
 80089d8:	2200      	movs	r2, #0
 80089da:	2300      	movs	r3, #0
 80089dc:	2000      	movs	r0, #0
 80089de:	f7f7 ff55 	bl	800088c <__aeabi_ddiv>
 80089e2:	ec41 0b10 	vmov	d0, r0, r1
 80089e6:	b007      	add	sp, #28
 80089e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ec:	2900      	cmp	r1, #0
 80089ee:	da05      	bge.n	80089fc <__ieee754_log+0x44>
 80089f0:	460b      	mov	r3, r1
 80089f2:	f7f7 fc69 	bl	80002c8 <__aeabi_dsub>
 80089f6:	2200      	movs	r2, #0
 80089f8:	2300      	movs	r3, #0
 80089fa:	e7f0      	b.n	80089de <__ieee754_log+0x26>
 80089fc:	4bc3      	ldr	r3, [pc, #780]	; (8008d0c <__ieee754_log+0x354>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	f7f7 fe1a 	bl	8000638 <__aeabi_dmul>
 8008a04:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008a08:	460d      	mov	r5, r1
 8008a0a:	4ac1      	ldr	r2, [pc, #772]	; (8008d10 <__ieee754_log+0x358>)
 8008a0c:	4295      	cmp	r5, r2
 8008a0e:	dd06      	ble.n	8008a1e <__ieee754_log+0x66>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	f7f7 fc5a 	bl	80002cc <__adddf3>
 8008a18:	e7e3      	b.n	80089e2 <__ieee754_log+0x2a>
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	e7f5      	b.n	8008a0a <__ieee754_log+0x52>
 8008a1e:	152c      	asrs	r4, r5, #20
 8008a20:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008a24:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008a28:	441c      	add	r4, r3
 8008a2a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008a2e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a36:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008a3a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008a3e:	ea42 0105 	orr.w	r1, r2, r5
 8008a42:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008a46:	2200      	movs	r2, #0
 8008a48:	4bb2      	ldr	r3, [pc, #712]	; (8008d14 <__ieee754_log+0x35c>)
 8008a4a:	f7f7 fc3d 	bl	80002c8 <__aeabi_dsub>
 8008a4e:	1cab      	adds	r3, r5, #2
 8008a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	4682      	mov	sl, r0
 8008a58:	468b      	mov	fp, r1
 8008a5a:	f04f 0200 	mov.w	r2, #0
 8008a5e:	dc53      	bgt.n	8008b08 <__ieee754_log+0x150>
 8008a60:	2300      	movs	r3, #0
 8008a62:	f7f8 f851 	bl	8000b08 <__aeabi_dcmpeq>
 8008a66:	b1d0      	cbz	r0, 8008a9e <__ieee754_log+0xe6>
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	f000 8120 	beq.w	8008cae <__ieee754_log+0x2f6>
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f7f7 fd78 	bl	8000564 <__aeabi_i2d>
 8008a74:	a390      	add	r3, pc, #576	; (adr r3, 8008cb8 <__ieee754_log+0x300>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	460f      	mov	r7, r1
 8008a7e:	f7f7 fddb 	bl	8000638 <__aeabi_dmul>
 8008a82:	a38f      	add	r3, pc, #572	; (adr r3, 8008cc0 <__ieee754_log+0x308>)
 8008a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a88:	4604      	mov	r4, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	4639      	mov	r1, r7
 8008a90:	f7f7 fdd2 	bl	8000638 <__aeabi_dmul>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	4620      	mov	r0, r4
 8008a9a:	4629      	mov	r1, r5
 8008a9c:	e7ba      	b.n	8008a14 <__ieee754_log+0x5c>
 8008a9e:	a38a      	add	r3, pc, #552	; (adr r3, 8008cc8 <__ieee754_log+0x310>)
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	4650      	mov	r0, sl
 8008aa6:	4659      	mov	r1, fp
 8008aa8:	f7f7 fdc6 	bl	8000638 <__aeabi_dmul>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	4999      	ldr	r1, [pc, #612]	; (8008d18 <__ieee754_log+0x360>)
 8008ab4:	f7f7 fc08 	bl	80002c8 <__aeabi_dsub>
 8008ab8:	4652      	mov	r2, sl
 8008aba:	4606      	mov	r6, r0
 8008abc:	460f      	mov	r7, r1
 8008abe:	465b      	mov	r3, fp
 8008ac0:	4650      	mov	r0, sl
 8008ac2:	4659      	mov	r1, fp
 8008ac4:	f7f7 fdb8 	bl	8000638 <__aeabi_dmul>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	460b      	mov	r3, r1
 8008acc:	4630      	mov	r0, r6
 8008ace:	4639      	mov	r1, r7
 8008ad0:	f7f7 fdb2 	bl	8000638 <__aeabi_dmul>
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	460f      	mov	r7, r1
 8008ad8:	b914      	cbnz	r4, 8008ae0 <__ieee754_log+0x128>
 8008ada:	4632      	mov	r2, r6
 8008adc:	463b      	mov	r3, r7
 8008ade:	e0a0      	b.n	8008c22 <__ieee754_log+0x26a>
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f7f7 fd3f 	bl	8000564 <__aeabi_i2d>
 8008ae6:	a374      	add	r3, pc, #464	; (adr r3, 8008cb8 <__ieee754_log+0x300>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	4680      	mov	r8, r0
 8008aee:	4689      	mov	r9, r1
 8008af0:	f7f7 fda2 	bl	8000638 <__aeabi_dmul>
 8008af4:	a372      	add	r3, pc, #456	; (adr r3, 8008cc0 <__ieee754_log+0x308>)
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	4604      	mov	r4, r0
 8008afc:	460d      	mov	r5, r1
 8008afe:	4640      	mov	r0, r8
 8008b00:	4649      	mov	r1, r9
 8008b02:	f7f7 fd99 	bl	8000638 <__aeabi_dmul>
 8008b06:	e0a5      	b.n	8008c54 <__ieee754_log+0x29c>
 8008b08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b0c:	f7f7 fbde 	bl	80002cc <__adddf3>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4650      	mov	r0, sl
 8008b16:	4659      	mov	r1, fp
 8008b18:	f7f7 feb8 	bl	800088c <__aeabi_ddiv>
 8008b1c:	e9cd 0100 	strd	r0, r1, [sp]
 8008b20:	4620      	mov	r0, r4
 8008b22:	f7f7 fd1f 	bl	8000564 <__aeabi_i2d>
 8008b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b2e:	4610      	mov	r0, r2
 8008b30:	4619      	mov	r1, r3
 8008b32:	f7f7 fd81 	bl	8000638 <__aeabi_dmul>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b3e:	f7f7 fd7b 	bl	8000638 <__aeabi_dmul>
 8008b42:	a363      	add	r3, pc, #396	; (adr r3, 8008cd0 <__ieee754_log+0x318>)
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	4680      	mov	r8, r0
 8008b4a:	4689      	mov	r9, r1
 8008b4c:	f7f7 fd74 	bl	8000638 <__aeabi_dmul>
 8008b50:	a361      	add	r3, pc, #388	; (adr r3, 8008cd8 <__ieee754_log+0x320>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	f7f7 fbb9 	bl	80002cc <__adddf3>
 8008b5a:	4642      	mov	r2, r8
 8008b5c:	464b      	mov	r3, r9
 8008b5e:	f7f7 fd6b 	bl	8000638 <__aeabi_dmul>
 8008b62:	a35f      	add	r3, pc, #380	; (adr r3, 8008ce0 <__ieee754_log+0x328>)
 8008b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b68:	f7f7 fbb0 	bl	80002cc <__adddf3>
 8008b6c:	4642      	mov	r2, r8
 8008b6e:	464b      	mov	r3, r9
 8008b70:	f7f7 fd62 	bl	8000638 <__aeabi_dmul>
 8008b74:	a35c      	add	r3, pc, #368	; (adr r3, 8008ce8 <__ieee754_log+0x330>)
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f7f7 fba7 	bl	80002cc <__adddf3>
 8008b7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b82:	f7f7 fd59 	bl	8000638 <__aeabi_dmul>
 8008b86:	a35a      	add	r3, pc, #360	; (adr r3, 8008cf0 <__ieee754_log+0x338>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7f7 fd50 	bl	8000638 <__aeabi_dmul>
 8008b98:	a357      	add	r3, pc, #348	; (adr r3, 8008cf8 <__ieee754_log+0x340>)
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f7f7 fb95 	bl	80002cc <__adddf3>
 8008ba2:	4642      	mov	r2, r8
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	f7f7 fd47 	bl	8000638 <__aeabi_dmul>
 8008baa:	a355      	add	r3, pc, #340	; (adr r3, 8008d00 <__ieee754_log+0x348>)
 8008bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb0:	f7f7 fb8c 	bl	80002cc <__adddf3>
 8008bb4:	4642      	mov	r2, r8
 8008bb6:	464b      	mov	r3, r9
 8008bb8:	f7f7 fd3e 	bl	8000638 <__aeabi_dmul>
 8008bbc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008bc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bcc:	f7f7 fb7e 	bl	80002cc <__adddf3>
 8008bd0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8008bd4:	3551      	adds	r5, #81	; 0x51
 8008bd6:	4335      	orrs	r5, r6
 8008bd8:	2d00      	cmp	r5, #0
 8008bda:	4680      	mov	r8, r0
 8008bdc:	4689      	mov	r9, r1
 8008bde:	dd48      	ble.n	8008c72 <__ieee754_log+0x2ba>
 8008be0:	2200      	movs	r2, #0
 8008be2:	4b4d      	ldr	r3, [pc, #308]	; (8008d18 <__ieee754_log+0x360>)
 8008be4:	4650      	mov	r0, sl
 8008be6:	4659      	mov	r1, fp
 8008be8:	f7f7 fd26 	bl	8000638 <__aeabi_dmul>
 8008bec:	4652      	mov	r2, sl
 8008bee:	465b      	mov	r3, fp
 8008bf0:	f7f7 fd22 	bl	8000638 <__aeabi_dmul>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	460f      	mov	r7, r1
 8008bfc:	4640      	mov	r0, r8
 8008bfe:	4649      	mov	r1, r9
 8008c00:	f7f7 fb64 	bl	80002cc <__adddf3>
 8008c04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c08:	f7f7 fd16 	bl	8000638 <__aeabi_dmul>
 8008c0c:	4680      	mov	r8, r0
 8008c0e:	4689      	mov	r9, r1
 8008c10:	b964      	cbnz	r4, 8008c2c <__ieee754_log+0x274>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4630      	mov	r0, r6
 8008c18:	4639      	mov	r1, r7
 8008c1a:	f7f7 fb55 	bl	80002c8 <__aeabi_dsub>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4650      	mov	r0, sl
 8008c24:	4659      	mov	r1, fp
 8008c26:	f7f7 fb4f 	bl	80002c8 <__aeabi_dsub>
 8008c2a:	e6da      	b.n	80089e2 <__ieee754_log+0x2a>
 8008c2c:	a322      	add	r3, pc, #136	; (adr r3, 8008cb8 <__ieee754_log+0x300>)
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c36:	f7f7 fcff 	bl	8000638 <__aeabi_dmul>
 8008c3a:	a321      	add	r3, pc, #132	; (adr r3, 8008cc0 <__ieee754_log+0x308>)
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	4604      	mov	r4, r0
 8008c42:	460d      	mov	r5, r1
 8008c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c48:	f7f7 fcf6 	bl	8000638 <__aeabi_dmul>
 8008c4c:	4642      	mov	r2, r8
 8008c4e:	464b      	mov	r3, r9
 8008c50:	f7f7 fb3c 	bl	80002cc <__adddf3>
 8008c54:	4602      	mov	r2, r0
 8008c56:	460b      	mov	r3, r1
 8008c58:	4630      	mov	r0, r6
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	f7f7 fb34 	bl	80002c8 <__aeabi_dsub>
 8008c60:	4652      	mov	r2, sl
 8008c62:	465b      	mov	r3, fp
 8008c64:	f7f7 fb30 	bl	80002c8 <__aeabi_dsub>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	4629      	mov	r1, r5
 8008c70:	e7d9      	b.n	8008c26 <__ieee754_log+0x26e>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4650      	mov	r0, sl
 8008c78:	4659      	mov	r1, fp
 8008c7a:	f7f7 fb25 	bl	80002c8 <__aeabi_dsub>
 8008c7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c82:	f7f7 fcd9 	bl	8000638 <__aeabi_dmul>
 8008c86:	4606      	mov	r6, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	2c00      	cmp	r4, #0
 8008c8c:	f43f af25 	beq.w	8008ada <__ieee754_log+0x122>
 8008c90:	a309      	add	r3, pc, #36	; (adr r3, 8008cb8 <__ieee754_log+0x300>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c9a:	f7f7 fccd 	bl	8000638 <__aeabi_dmul>
 8008c9e:	a308      	add	r3, pc, #32	; (adr r3, 8008cc0 <__ieee754_log+0x308>)
 8008ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	460d      	mov	r5, r1
 8008ca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cac:	e729      	b.n	8008b02 <__ieee754_log+0x14a>
 8008cae:	2000      	movs	r0, #0
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	e696      	b.n	80089e2 <__ieee754_log+0x2a>
 8008cb4:	f3af 8000 	nop.w
 8008cb8:	fee00000 	.word	0xfee00000
 8008cbc:	3fe62e42 	.word	0x3fe62e42
 8008cc0:	35793c76 	.word	0x35793c76
 8008cc4:	3dea39ef 	.word	0x3dea39ef
 8008cc8:	55555555 	.word	0x55555555
 8008ccc:	3fd55555 	.word	0x3fd55555
 8008cd0:	df3e5244 	.word	0xdf3e5244
 8008cd4:	3fc2f112 	.word	0x3fc2f112
 8008cd8:	96cb03de 	.word	0x96cb03de
 8008cdc:	3fc74664 	.word	0x3fc74664
 8008ce0:	94229359 	.word	0x94229359
 8008ce4:	3fd24924 	.word	0x3fd24924
 8008ce8:	55555593 	.word	0x55555593
 8008cec:	3fe55555 	.word	0x3fe55555
 8008cf0:	d078c69f 	.word	0xd078c69f
 8008cf4:	3fc39a09 	.word	0x3fc39a09
 8008cf8:	1d8e78af 	.word	0x1d8e78af
 8008cfc:	3fcc71c5 	.word	0x3fcc71c5
 8008d00:	9997fa04 	.word	0x9997fa04
 8008d04:	3fd99999 	.word	0x3fd99999
 8008d08:	c3500000 	.word	0xc3500000
 8008d0c:	43500000 	.word	0x43500000
 8008d10:	7fefffff 	.word	0x7fefffff
 8008d14:	3ff00000 	.word	0x3ff00000
 8008d18:	3fe00000 	.word	0x3fe00000
 8008d1c:	00000000 	.word	0x00000000

08008d20 <__ieee754_pow>:
 8008d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d24:	b091      	sub	sp, #68	; 0x44
 8008d26:	ed8d 1b00 	vstr	d1, [sp]
 8008d2a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008d2e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008d32:	ea58 0302 	orrs.w	r3, r8, r2
 8008d36:	ec57 6b10 	vmov	r6, r7, d0
 8008d3a:	f000 84be 	beq.w	80096ba <__ieee754_pow+0x99a>
 8008d3e:	4b7a      	ldr	r3, [pc, #488]	; (8008f28 <__ieee754_pow+0x208>)
 8008d40:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008d44:	429c      	cmp	r4, r3
 8008d46:	463d      	mov	r5, r7
 8008d48:	ee10 aa10 	vmov	sl, s0
 8008d4c:	dc09      	bgt.n	8008d62 <__ieee754_pow+0x42>
 8008d4e:	d103      	bne.n	8008d58 <__ieee754_pow+0x38>
 8008d50:	b93e      	cbnz	r6, 8008d62 <__ieee754_pow+0x42>
 8008d52:	45a0      	cmp	r8, r4
 8008d54:	dc0d      	bgt.n	8008d72 <__ieee754_pow+0x52>
 8008d56:	e001      	b.n	8008d5c <__ieee754_pow+0x3c>
 8008d58:	4598      	cmp	r8, r3
 8008d5a:	dc02      	bgt.n	8008d62 <__ieee754_pow+0x42>
 8008d5c:	4598      	cmp	r8, r3
 8008d5e:	d10e      	bne.n	8008d7e <__ieee754_pow+0x5e>
 8008d60:	b16a      	cbz	r2, 8008d7e <__ieee754_pow+0x5e>
 8008d62:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d66:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d6a:	ea54 030a 	orrs.w	r3, r4, sl
 8008d6e:	f000 84a4 	beq.w	80096ba <__ieee754_pow+0x99a>
 8008d72:	486e      	ldr	r0, [pc, #440]	; (8008f2c <__ieee754_pow+0x20c>)
 8008d74:	b011      	add	sp, #68	; 0x44
 8008d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7a:	f000 bda5 	b.w	80098c8 <nan>
 8008d7e:	2d00      	cmp	r5, #0
 8008d80:	da53      	bge.n	8008e2a <__ieee754_pow+0x10a>
 8008d82:	4b6b      	ldr	r3, [pc, #428]	; (8008f30 <__ieee754_pow+0x210>)
 8008d84:	4598      	cmp	r8, r3
 8008d86:	dc4d      	bgt.n	8008e24 <__ieee754_pow+0x104>
 8008d88:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008d8c:	4598      	cmp	r8, r3
 8008d8e:	dd4c      	ble.n	8008e2a <__ieee754_pow+0x10a>
 8008d90:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008d94:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008d98:	2b14      	cmp	r3, #20
 8008d9a:	dd26      	ble.n	8008dea <__ieee754_pow+0xca>
 8008d9c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008da0:	fa22 f103 	lsr.w	r1, r2, r3
 8008da4:	fa01 f303 	lsl.w	r3, r1, r3
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d13e      	bne.n	8008e2a <__ieee754_pow+0x10a>
 8008dac:	f001 0101 	and.w	r1, r1, #1
 8008db0:	f1c1 0b02 	rsb	fp, r1, #2
 8008db4:	2a00      	cmp	r2, #0
 8008db6:	d15b      	bne.n	8008e70 <__ieee754_pow+0x150>
 8008db8:	4b5b      	ldr	r3, [pc, #364]	; (8008f28 <__ieee754_pow+0x208>)
 8008dba:	4598      	cmp	r8, r3
 8008dbc:	d124      	bne.n	8008e08 <__ieee754_pow+0xe8>
 8008dbe:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008dc2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008dc6:	ea53 030a 	orrs.w	r3, r3, sl
 8008dca:	f000 8476 	beq.w	80096ba <__ieee754_pow+0x99a>
 8008dce:	4b59      	ldr	r3, [pc, #356]	; (8008f34 <__ieee754_pow+0x214>)
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	dd2d      	ble.n	8008e30 <__ieee754_pow+0x110>
 8008dd4:	f1b9 0f00 	cmp.w	r9, #0
 8008dd8:	f280 8473 	bge.w	80096c2 <__ieee754_pow+0x9a2>
 8008ddc:	2000      	movs	r0, #0
 8008dde:	2100      	movs	r1, #0
 8008de0:	ec41 0b10 	vmov	d0, r0, r1
 8008de4:	b011      	add	sp, #68	; 0x44
 8008de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dea:	2a00      	cmp	r2, #0
 8008dec:	d13e      	bne.n	8008e6c <__ieee754_pow+0x14c>
 8008dee:	f1c3 0314 	rsb	r3, r3, #20
 8008df2:	fa48 f103 	asr.w	r1, r8, r3
 8008df6:	fa01 f303 	lsl.w	r3, r1, r3
 8008dfa:	4543      	cmp	r3, r8
 8008dfc:	f040 8469 	bne.w	80096d2 <__ieee754_pow+0x9b2>
 8008e00:	f001 0101 	and.w	r1, r1, #1
 8008e04:	f1c1 0b02 	rsb	fp, r1, #2
 8008e08:	4b4b      	ldr	r3, [pc, #300]	; (8008f38 <__ieee754_pow+0x218>)
 8008e0a:	4598      	cmp	r8, r3
 8008e0c:	d118      	bne.n	8008e40 <__ieee754_pow+0x120>
 8008e0e:	f1b9 0f00 	cmp.w	r9, #0
 8008e12:	f280 845a 	bge.w	80096ca <__ieee754_pow+0x9aa>
 8008e16:	4948      	ldr	r1, [pc, #288]	; (8008f38 <__ieee754_pow+0x218>)
 8008e18:	4632      	mov	r2, r6
 8008e1a:	463b      	mov	r3, r7
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f7f7 fd35 	bl	800088c <__aeabi_ddiv>
 8008e22:	e7dd      	b.n	8008de0 <__ieee754_pow+0xc0>
 8008e24:	f04f 0b02 	mov.w	fp, #2
 8008e28:	e7c4      	b.n	8008db4 <__ieee754_pow+0x94>
 8008e2a:	f04f 0b00 	mov.w	fp, #0
 8008e2e:	e7c1      	b.n	8008db4 <__ieee754_pow+0x94>
 8008e30:	f1b9 0f00 	cmp.w	r9, #0
 8008e34:	dad2      	bge.n	8008ddc <__ieee754_pow+0xbc>
 8008e36:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008e3a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008e3e:	e7cf      	b.n	8008de0 <__ieee754_pow+0xc0>
 8008e40:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008e44:	d106      	bne.n	8008e54 <__ieee754_pow+0x134>
 8008e46:	4632      	mov	r2, r6
 8008e48:	463b      	mov	r3, r7
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	f7f7 fbf3 	bl	8000638 <__aeabi_dmul>
 8008e52:	e7c5      	b.n	8008de0 <__ieee754_pow+0xc0>
 8008e54:	4b39      	ldr	r3, [pc, #228]	; (8008f3c <__ieee754_pow+0x21c>)
 8008e56:	4599      	cmp	r9, r3
 8008e58:	d10a      	bne.n	8008e70 <__ieee754_pow+0x150>
 8008e5a:	2d00      	cmp	r5, #0
 8008e5c:	db08      	blt.n	8008e70 <__ieee754_pow+0x150>
 8008e5e:	ec47 6b10 	vmov	d0, r6, r7
 8008e62:	b011      	add	sp, #68	; 0x44
 8008e64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	f000 bc68 	b.w	800973c <__ieee754_sqrt>
 8008e6c:	f04f 0b00 	mov.w	fp, #0
 8008e70:	ec47 6b10 	vmov	d0, r6, r7
 8008e74:	f000 fd12 	bl	800989c <fabs>
 8008e78:	ec51 0b10 	vmov	r0, r1, d0
 8008e7c:	f1ba 0f00 	cmp.w	sl, #0
 8008e80:	d127      	bne.n	8008ed2 <__ieee754_pow+0x1b2>
 8008e82:	b124      	cbz	r4, 8008e8e <__ieee754_pow+0x16e>
 8008e84:	4b2c      	ldr	r3, [pc, #176]	; (8008f38 <__ieee754_pow+0x218>)
 8008e86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d121      	bne.n	8008ed2 <__ieee754_pow+0x1b2>
 8008e8e:	f1b9 0f00 	cmp.w	r9, #0
 8008e92:	da05      	bge.n	8008ea0 <__ieee754_pow+0x180>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	2000      	movs	r0, #0
 8008e9a:	4927      	ldr	r1, [pc, #156]	; (8008f38 <__ieee754_pow+0x218>)
 8008e9c:	f7f7 fcf6 	bl	800088c <__aeabi_ddiv>
 8008ea0:	2d00      	cmp	r5, #0
 8008ea2:	da9d      	bge.n	8008de0 <__ieee754_pow+0xc0>
 8008ea4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008ea8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008eac:	ea54 030b 	orrs.w	r3, r4, fp
 8008eb0:	d108      	bne.n	8008ec4 <__ieee754_pow+0x1a4>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	4619      	mov	r1, r3
 8008eba:	f7f7 fa05 	bl	80002c8 <__aeabi_dsub>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	e7ac      	b.n	8008e1e <__ieee754_pow+0xfe>
 8008ec4:	f1bb 0f01 	cmp.w	fp, #1
 8008ec8:	d18a      	bne.n	8008de0 <__ieee754_pow+0xc0>
 8008eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ece:	4619      	mov	r1, r3
 8008ed0:	e786      	b.n	8008de0 <__ieee754_pow+0xc0>
 8008ed2:	0fed      	lsrs	r5, r5, #31
 8008ed4:	1e6b      	subs	r3, r5, #1
 8008ed6:	930d      	str	r3, [sp, #52]	; 0x34
 8008ed8:	ea5b 0303 	orrs.w	r3, fp, r3
 8008edc:	d102      	bne.n	8008ee4 <__ieee754_pow+0x1c4>
 8008ede:	4632      	mov	r2, r6
 8008ee0:	463b      	mov	r3, r7
 8008ee2:	e7e8      	b.n	8008eb6 <__ieee754_pow+0x196>
 8008ee4:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <__ieee754_pow+0x220>)
 8008ee6:	4598      	cmp	r8, r3
 8008ee8:	f340 80fe 	ble.w	80090e8 <__ieee754_pow+0x3c8>
 8008eec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008ef0:	4598      	cmp	r8, r3
 8008ef2:	dd0a      	ble.n	8008f0a <__ieee754_pow+0x1ea>
 8008ef4:	4b0f      	ldr	r3, [pc, #60]	; (8008f34 <__ieee754_pow+0x214>)
 8008ef6:	429c      	cmp	r4, r3
 8008ef8:	dc0d      	bgt.n	8008f16 <__ieee754_pow+0x1f6>
 8008efa:	f1b9 0f00 	cmp.w	r9, #0
 8008efe:	f6bf af6d 	bge.w	8008ddc <__ieee754_pow+0xbc>
 8008f02:	a307      	add	r3, pc, #28	; (adr r3, 8008f20 <__ieee754_pow+0x200>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	e79f      	b.n	8008e4a <__ieee754_pow+0x12a>
 8008f0a:	4b0e      	ldr	r3, [pc, #56]	; (8008f44 <__ieee754_pow+0x224>)
 8008f0c:	429c      	cmp	r4, r3
 8008f0e:	ddf4      	ble.n	8008efa <__ieee754_pow+0x1da>
 8008f10:	4b09      	ldr	r3, [pc, #36]	; (8008f38 <__ieee754_pow+0x218>)
 8008f12:	429c      	cmp	r4, r3
 8008f14:	dd18      	ble.n	8008f48 <__ieee754_pow+0x228>
 8008f16:	f1b9 0f00 	cmp.w	r9, #0
 8008f1a:	dcf2      	bgt.n	8008f02 <__ieee754_pow+0x1e2>
 8008f1c:	e75e      	b.n	8008ddc <__ieee754_pow+0xbc>
 8008f1e:	bf00      	nop
 8008f20:	8800759c 	.word	0x8800759c
 8008f24:	7e37e43c 	.word	0x7e37e43c
 8008f28:	7ff00000 	.word	0x7ff00000
 8008f2c:	08009ce9 	.word	0x08009ce9
 8008f30:	433fffff 	.word	0x433fffff
 8008f34:	3fefffff 	.word	0x3fefffff
 8008f38:	3ff00000 	.word	0x3ff00000
 8008f3c:	3fe00000 	.word	0x3fe00000
 8008f40:	41e00000 	.word	0x41e00000
 8008f44:	3feffffe 	.word	0x3feffffe
 8008f48:	2200      	movs	r2, #0
 8008f4a:	4b63      	ldr	r3, [pc, #396]	; (80090d8 <__ieee754_pow+0x3b8>)
 8008f4c:	f7f7 f9bc 	bl	80002c8 <__aeabi_dsub>
 8008f50:	a355      	add	r3, pc, #340	; (adr r3, 80090a8 <__ieee754_pow+0x388>)
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	4604      	mov	r4, r0
 8008f58:	460d      	mov	r5, r1
 8008f5a:	f7f7 fb6d 	bl	8000638 <__aeabi_dmul>
 8008f5e:	a354      	add	r3, pc, #336	; (adr r3, 80090b0 <__ieee754_pow+0x390>)
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	4606      	mov	r6, r0
 8008f66:	460f      	mov	r7, r1
 8008f68:	4620      	mov	r0, r4
 8008f6a:	4629      	mov	r1, r5
 8008f6c:	f7f7 fb64 	bl	8000638 <__aeabi_dmul>
 8008f70:	2200      	movs	r2, #0
 8008f72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f76:	4b59      	ldr	r3, [pc, #356]	; (80090dc <__ieee754_pow+0x3bc>)
 8008f78:	4620      	mov	r0, r4
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	f7f7 fb5c 	bl	8000638 <__aeabi_dmul>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	a14c      	add	r1, pc, #304	; (adr r1, 80090b8 <__ieee754_pow+0x398>)
 8008f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f8a:	f7f7 f99d 	bl	80002c8 <__aeabi_dsub>
 8008f8e:	4622      	mov	r2, r4
 8008f90:	462b      	mov	r3, r5
 8008f92:	f7f7 fb51 	bl	8000638 <__aeabi_dmul>
 8008f96:	4602      	mov	r2, r0
 8008f98:	460b      	mov	r3, r1
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	4950      	ldr	r1, [pc, #320]	; (80090e0 <__ieee754_pow+0x3c0>)
 8008f9e:	f7f7 f993 	bl	80002c8 <__aeabi_dsub>
 8008fa2:	4622      	mov	r2, r4
 8008fa4:	462b      	mov	r3, r5
 8008fa6:	4680      	mov	r8, r0
 8008fa8:	4689      	mov	r9, r1
 8008faa:	4620      	mov	r0, r4
 8008fac:	4629      	mov	r1, r5
 8008fae:	f7f7 fb43 	bl	8000638 <__aeabi_dmul>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4640      	mov	r0, r8
 8008fb8:	4649      	mov	r1, r9
 8008fba:	f7f7 fb3d 	bl	8000638 <__aeabi_dmul>
 8008fbe:	a340      	add	r3, pc, #256	; (adr r3, 80090c0 <__ieee754_pow+0x3a0>)
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f7f7 fb38 	bl	8000638 <__aeabi_dmul>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fd0:	f7f7 f97a 	bl	80002c8 <__aeabi_dsub>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4604      	mov	r4, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	4630      	mov	r0, r6
 8008fde:	4639      	mov	r1, r7
 8008fe0:	f7f7 f974 	bl	80002cc <__adddf3>
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fea:	4632      	mov	r2, r6
 8008fec:	463b      	mov	r3, r7
 8008fee:	f7f7 f96b 	bl	80002c8 <__aeabi_dsub>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f7f7 f965 	bl	80002c8 <__aeabi_dsub>
 8008ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009000:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009004:	4313      	orrs	r3, r2
 8009006:	4606      	mov	r6, r0
 8009008:	460f      	mov	r7, r1
 800900a:	f040 81eb 	bne.w	80093e4 <__ieee754_pow+0x6c4>
 800900e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80090c8 <__ieee754_pow+0x3a8>
 8009012:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009016:	2400      	movs	r4, #0
 8009018:	4622      	mov	r2, r4
 800901a:	462b      	mov	r3, r5
 800901c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009020:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009024:	f7f7 f950 	bl	80002c8 <__aeabi_dsub>
 8009028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800902c:	f7f7 fb04 	bl	8000638 <__aeabi_dmul>
 8009030:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009034:	4680      	mov	r8, r0
 8009036:	4689      	mov	r9, r1
 8009038:	4630      	mov	r0, r6
 800903a:	4639      	mov	r1, r7
 800903c:	f7f7 fafc 	bl	8000638 <__aeabi_dmul>
 8009040:	4602      	mov	r2, r0
 8009042:	460b      	mov	r3, r1
 8009044:	4640      	mov	r0, r8
 8009046:	4649      	mov	r1, r9
 8009048:	f7f7 f940 	bl	80002cc <__adddf3>
 800904c:	4622      	mov	r2, r4
 800904e:	462b      	mov	r3, r5
 8009050:	4680      	mov	r8, r0
 8009052:	4689      	mov	r9, r1
 8009054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009058:	f7f7 faee 	bl	8000638 <__aeabi_dmul>
 800905c:	460b      	mov	r3, r1
 800905e:	4604      	mov	r4, r0
 8009060:	460d      	mov	r5, r1
 8009062:	4602      	mov	r2, r0
 8009064:	4649      	mov	r1, r9
 8009066:	4640      	mov	r0, r8
 8009068:	e9cd 4500 	strd	r4, r5, [sp]
 800906c:	f7f7 f92e 	bl	80002cc <__adddf3>
 8009070:	4b1c      	ldr	r3, [pc, #112]	; (80090e4 <__ieee754_pow+0x3c4>)
 8009072:	4299      	cmp	r1, r3
 8009074:	4606      	mov	r6, r0
 8009076:	460f      	mov	r7, r1
 8009078:	468b      	mov	fp, r1
 800907a:	f340 82f7 	ble.w	800966c <__ieee754_pow+0x94c>
 800907e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009082:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009086:	4303      	orrs	r3, r0
 8009088:	f000 81ea 	beq.w	8009460 <__ieee754_pow+0x740>
 800908c:	a310      	add	r3, pc, #64	; (adr r3, 80090d0 <__ieee754_pow+0x3b0>)
 800908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009096:	f7f7 facf 	bl	8000638 <__aeabi_dmul>
 800909a:	a30d      	add	r3, pc, #52	; (adr r3, 80090d0 <__ieee754_pow+0x3b0>)
 800909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a0:	e6d5      	b.n	8008e4e <__ieee754_pow+0x12e>
 80090a2:	bf00      	nop
 80090a4:	f3af 8000 	nop.w
 80090a8:	60000000 	.word	0x60000000
 80090ac:	3ff71547 	.word	0x3ff71547
 80090b0:	f85ddf44 	.word	0xf85ddf44
 80090b4:	3e54ae0b 	.word	0x3e54ae0b
 80090b8:	55555555 	.word	0x55555555
 80090bc:	3fd55555 	.word	0x3fd55555
 80090c0:	652b82fe 	.word	0x652b82fe
 80090c4:	3ff71547 	.word	0x3ff71547
 80090c8:	00000000 	.word	0x00000000
 80090cc:	bff00000 	.word	0xbff00000
 80090d0:	8800759c 	.word	0x8800759c
 80090d4:	7e37e43c 	.word	0x7e37e43c
 80090d8:	3ff00000 	.word	0x3ff00000
 80090dc:	3fd00000 	.word	0x3fd00000
 80090e0:	3fe00000 	.word	0x3fe00000
 80090e4:	408fffff 	.word	0x408fffff
 80090e8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	da05      	bge.n	80090fe <__ieee754_pow+0x3de>
 80090f2:	4bd3      	ldr	r3, [pc, #844]	; (8009440 <__ieee754_pow+0x720>)
 80090f4:	f7f7 faa0 	bl	8000638 <__aeabi_dmul>
 80090f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80090fc:	460c      	mov	r4, r1
 80090fe:	1523      	asrs	r3, r4, #20
 8009100:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009104:	4413      	add	r3, r2
 8009106:	9309      	str	r3, [sp, #36]	; 0x24
 8009108:	4bce      	ldr	r3, [pc, #824]	; (8009444 <__ieee754_pow+0x724>)
 800910a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800910e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009112:	429c      	cmp	r4, r3
 8009114:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009118:	dd08      	ble.n	800912c <__ieee754_pow+0x40c>
 800911a:	4bcb      	ldr	r3, [pc, #812]	; (8009448 <__ieee754_pow+0x728>)
 800911c:	429c      	cmp	r4, r3
 800911e:	f340 815e 	ble.w	80093de <__ieee754_pow+0x6be>
 8009122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009124:	3301      	adds	r3, #1
 8009126:	9309      	str	r3, [sp, #36]	; 0x24
 8009128:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800912c:	f04f 0a00 	mov.w	sl, #0
 8009130:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009134:	930c      	str	r3, [sp, #48]	; 0x30
 8009136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009138:	4bc4      	ldr	r3, [pc, #784]	; (800944c <__ieee754_pow+0x72c>)
 800913a:	4413      	add	r3, r2
 800913c:	ed93 7b00 	vldr	d7, [r3]
 8009140:	4629      	mov	r1, r5
 8009142:	ec53 2b17 	vmov	r2, r3, d7
 8009146:	ed8d 7b06 	vstr	d7, [sp, #24]
 800914a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800914e:	f7f7 f8bb 	bl	80002c8 <__aeabi_dsub>
 8009152:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009156:	4606      	mov	r6, r0
 8009158:	460f      	mov	r7, r1
 800915a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800915e:	f7f7 f8b5 	bl	80002cc <__adddf3>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	2000      	movs	r0, #0
 8009168:	49b9      	ldr	r1, [pc, #740]	; (8009450 <__ieee754_pow+0x730>)
 800916a:	f7f7 fb8f 	bl	800088c <__aeabi_ddiv>
 800916e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4630      	mov	r0, r6
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 fa5d 	bl	8000638 <__aeabi_dmul>
 800917e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009182:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009186:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800918a:	2300      	movs	r3, #0
 800918c:	9302      	str	r3, [sp, #8]
 800918e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009192:	106d      	asrs	r5, r5, #1
 8009194:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009198:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800919c:	2200      	movs	r2, #0
 800919e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80091a2:	4640      	mov	r0, r8
 80091a4:	4649      	mov	r1, r9
 80091a6:	4614      	mov	r4, r2
 80091a8:	461d      	mov	r5, r3
 80091aa:	f7f7 fa45 	bl	8000638 <__aeabi_dmul>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4630      	mov	r0, r6
 80091b4:	4639      	mov	r1, r7
 80091b6:	f7f7 f887 	bl	80002c8 <__aeabi_dsub>
 80091ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091be:	4606      	mov	r6, r0
 80091c0:	460f      	mov	r7, r1
 80091c2:	4620      	mov	r0, r4
 80091c4:	4629      	mov	r1, r5
 80091c6:	f7f7 f87f 	bl	80002c8 <__aeabi_dsub>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80091d2:	f7f7 f879 	bl	80002c8 <__aeabi_dsub>
 80091d6:	4642      	mov	r2, r8
 80091d8:	464b      	mov	r3, r9
 80091da:	f7f7 fa2d 	bl	8000638 <__aeabi_dmul>
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4630      	mov	r0, r6
 80091e4:	4639      	mov	r1, r7
 80091e6:	f7f7 f86f 	bl	80002c8 <__aeabi_dsub>
 80091ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80091ee:	f7f7 fa23 	bl	8000638 <__aeabi_dmul>
 80091f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80091fa:	4610      	mov	r0, r2
 80091fc:	4619      	mov	r1, r3
 80091fe:	f7f7 fa1b 	bl	8000638 <__aeabi_dmul>
 8009202:	a37b      	add	r3, pc, #492	; (adr r3, 80093f0 <__ieee754_pow+0x6d0>)
 8009204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009208:	4604      	mov	r4, r0
 800920a:	460d      	mov	r5, r1
 800920c:	f7f7 fa14 	bl	8000638 <__aeabi_dmul>
 8009210:	a379      	add	r3, pc, #484	; (adr r3, 80093f8 <__ieee754_pow+0x6d8>)
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f7 f859 	bl	80002cc <__adddf3>
 800921a:	4622      	mov	r2, r4
 800921c:	462b      	mov	r3, r5
 800921e:	f7f7 fa0b 	bl	8000638 <__aeabi_dmul>
 8009222:	a377      	add	r3, pc, #476	; (adr r3, 8009400 <__ieee754_pow+0x6e0>)
 8009224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009228:	f7f7 f850 	bl	80002cc <__adddf3>
 800922c:	4622      	mov	r2, r4
 800922e:	462b      	mov	r3, r5
 8009230:	f7f7 fa02 	bl	8000638 <__aeabi_dmul>
 8009234:	a374      	add	r3, pc, #464	; (adr r3, 8009408 <__ieee754_pow+0x6e8>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	f7f7 f847 	bl	80002cc <__adddf3>
 800923e:	4622      	mov	r2, r4
 8009240:	462b      	mov	r3, r5
 8009242:	f7f7 f9f9 	bl	8000638 <__aeabi_dmul>
 8009246:	a372      	add	r3, pc, #456	; (adr r3, 8009410 <__ieee754_pow+0x6f0>)
 8009248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924c:	f7f7 f83e 	bl	80002cc <__adddf3>
 8009250:	4622      	mov	r2, r4
 8009252:	462b      	mov	r3, r5
 8009254:	f7f7 f9f0 	bl	8000638 <__aeabi_dmul>
 8009258:	a36f      	add	r3, pc, #444	; (adr r3, 8009418 <__ieee754_pow+0x6f8>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	f7f7 f835 	bl	80002cc <__adddf3>
 8009262:	4622      	mov	r2, r4
 8009264:	4606      	mov	r6, r0
 8009266:	460f      	mov	r7, r1
 8009268:	462b      	mov	r3, r5
 800926a:	4620      	mov	r0, r4
 800926c:	4629      	mov	r1, r5
 800926e:	f7f7 f9e3 	bl	8000638 <__aeabi_dmul>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4630      	mov	r0, r6
 8009278:	4639      	mov	r1, r7
 800927a:	f7f7 f9dd 	bl	8000638 <__aeabi_dmul>
 800927e:	4642      	mov	r2, r8
 8009280:	4604      	mov	r4, r0
 8009282:	460d      	mov	r5, r1
 8009284:	464b      	mov	r3, r9
 8009286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800928a:	f7f7 f81f 	bl	80002cc <__adddf3>
 800928e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009292:	f7f7 f9d1 	bl	8000638 <__aeabi_dmul>
 8009296:	4622      	mov	r2, r4
 8009298:	462b      	mov	r3, r5
 800929a:	f7f7 f817 	bl	80002cc <__adddf3>
 800929e:	4642      	mov	r2, r8
 80092a0:	4606      	mov	r6, r0
 80092a2:	460f      	mov	r7, r1
 80092a4:	464b      	mov	r3, r9
 80092a6:	4640      	mov	r0, r8
 80092a8:	4649      	mov	r1, r9
 80092aa:	f7f7 f9c5 	bl	8000638 <__aeabi_dmul>
 80092ae:	2200      	movs	r2, #0
 80092b0:	4b68      	ldr	r3, [pc, #416]	; (8009454 <__ieee754_pow+0x734>)
 80092b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80092b6:	f7f7 f809 	bl	80002cc <__adddf3>
 80092ba:	4632      	mov	r2, r6
 80092bc:	463b      	mov	r3, r7
 80092be:	f7f7 f805 	bl	80002cc <__adddf3>
 80092c2:	9802      	ldr	r0, [sp, #8]
 80092c4:	460d      	mov	r5, r1
 80092c6:	4604      	mov	r4, r0
 80092c8:	4602      	mov	r2, r0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4640      	mov	r0, r8
 80092ce:	4649      	mov	r1, r9
 80092d0:	f7f7 f9b2 	bl	8000638 <__aeabi_dmul>
 80092d4:	2200      	movs	r2, #0
 80092d6:	4680      	mov	r8, r0
 80092d8:	4689      	mov	r9, r1
 80092da:	4b5e      	ldr	r3, [pc, #376]	; (8009454 <__ieee754_pow+0x734>)
 80092dc:	4620      	mov	r0, r4
 80092de:	4629      	mov	r1, r5
 80092e0:	f7f6 fff2 	bl	80002c8 <__aeabi_dsub>
 80092e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80092e8:	f7f6 ffee 	bl	80002c8 <__aeabi_dsub>
 80092ec:	4602      	mov	r2, r0
 80092ee:	460b      	mov	r3, r1
 80092f0:	4630      	mov	r0, r6
 80092f2:	4639      	mov	r1, r7
 80092f4:	f7f6 ffe8 	bl	80002c8 <__aeabi_dsub>
 80092f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092fc:	f7f7 f99c 	bl	8000638 <__aeabi_dmul>
 8009300:	4622      	mov	r2, r4
 8009302:	4606      	mov	r6, r0
 8009304:	460f      	mov	r7, r1
 8009306:	462b      	mov	r3, r5
 8009308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800930c:	f7f7 f994 	bl	8000638 <__aeabi_dmul>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4630      	mov	r0, r6
 8009316:	4639      	mov	r1, r7
 8009318:	f7f6 ffd8 	bl	80002cc <__adddf3>
 800931c:	4606      	mov	r6, r0
 800931e:	460f      	mov	r7, r1
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	4640      	mov	r0, r8
 8009326:	4649      	mov	r1, r9
 8009328:	f7f6 ffd0 	bl	80002cc <__adddf3>
 800932c:	9802      	ldr	r0, [sp, #8]
 800932e:	a33c      	add	r3, pc, #240	; (adr r3, 8009420 <__ieee754_pow+0x700>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	4604      	mov	r4, r0
 8009336:	460d      	mov	r5, r1
 8009338:	f7f7 f97e 	bl	8000638 <__aeabi_dmul>
 800933c:	4642      	mov	r2, r8
 800933e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009342:	464b      	mov	r3, r9
 8009344:	4620      	mov	r0, r4
 8009346:	4629      	mov	r1, r5
 8009348:	f7f6 ffbe 	bl	80002c8 <__aeabi_dsub>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4630      	mov	r0, r6
 8009352:	4639      	mov	r1, r7
 8009354:	f7f6 ffb8 	bl	80002c8 <__aeabi_dsub>
 8009358:	a333      	add	r3, pc, #204	; (adr r3, 8009428 <__ieee754_pow+0x708>)
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	f7f7 f96b 	bl	8000638 <__aeabi_dmul>
 8009362:	a333      	add	r3, pc, #204	; (adr r3, 8009430 <__ieee754_pow+0x710>)
 8009364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009368:	4606      	mov	r6, r0
 800936a:	460f      	mov	r7, r1
 800936c:	4620      	mov	r0, r4
 800936e:	4629      	mov	r1, r5
 8009370:	f7f7 f962 	bl	8000638 <__aeabi_dmul>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	4630      	mov	r0, r6
 800937a:	4639      	mov	r1, r7
 800937c:	f7f6 ffa6 	bl	80002cc <__adddf3>
 8009380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009382:	4b35      	ldr	r3, [pc, #212]	; (8009458 <__ieee754_pow+0x738>)
 8009384:	4413      	add	r3, r2
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f7f6 ff9f 	bl	80002cc <__adddf3>
 800938e:	4604      	mov	r4, r0
 8009390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009392:	460d      	mov	r5, r1
 8009394:	f7f7 f8e6 	bl	8000564 <__aeabi_i2d>
 8009398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800939a:	4b30      	ldr	r3, [pc, #192]	; (800945c <__ieee754_pow+0x73c>)
 800939c:	4413      	add	r3, r2
 800939e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093a2:	4606      	mov	r6, r0
 80093a4:	460f      	mov	r7, r1
 80093a6:	4622      	mov	r2, r4
 80093a8:	462b      	mov	r3, r5
 80093aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093ae:	f7f6 ff8d 	bl	80002cc <__adddf3>
 80093b2:	4642      	mov	r2, r8
 80093b4:	464b      	mov	r3, r9
 80093b6:	f7f6 ff89 	bl	80002cc <__adddf3>
 80093ba:	4632      	mov	r2, r6
 80093bc:	463b      	mov	r3, r7
 80093be:	f7f6 ff85 	bl	80002cc <__adddf3>
 80093c2:	9802      	ldr	r0, [sp, #8]
 80093c4:	4632      	mov	r2, r6
 80093c6:	463b      	mov	r3, r7
 80093c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093cc:	f7f6 ff7c 	bl	80002c8 <__aeabi_dsub>
 80093d0:	4642      	mov	r2, r8
 80093d2:	464b      	mov	r3, r9
 80093d4:	f7f6 ff78 	bl	80002c8 <__aeabi_dsub>
 80093d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093dc:	e607      	b.n	8008fee <__ieee754_pow+0x2ce>
 80093de:	f04f 0a01 	mov.w	sl, #1
 80093e2:	e6a5      	b.n	8009130 <__ieee754_pow+0x410>
 80093e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009438 <__ieee754_pow+0x718>
 80093e8:	e613      	b.n	8009012 <__ieee754_pow+0x2f2>
 80093ea:	bf00      	nop
 80093ec:	f3af 8000 	nop.w
 80093f0:	4a454eef 	.word	0x4a454eef
 80093f4:	3fca7e28 	.word	0x3fca7e28
 80093f8:	93c9db65 	.word	0x93c9db65
 80093fc:	3fcd864a 	.word	0x3fcd864a
 8009400:	a91d4101 	.word	0xa91d4101
 8009404:	3fd17460 	.word	0x3fd17460
 8009408:	518f264d 	.word	0x518f264d
 800940c:	3fd55555 	.word	0x3fd55555
 8009410:	db6fabff 	.word	0xdb6fabff
 8009414:	3fdb6db6 	.word	0x3fdb6db6
 8009418:	33333303 	.word	0x33333303
 800941c:	3fe33333 	.word	0x3fe33333
 8009420:	e0000000 	.word	0xe0000000
 8009424:	3feec709 	.word	0x3feec709
 8009428:	dc3a03fd 	.word	0xdc3a03fd
 800942c:	3feec709 	.word	0x3feec709
 8009430:	145b01f5 	.word	0x145b01f5
 8009434:	be3e2fe0 	.word	0xbe3e2fe0
 8009438:	00000000 	.word	0x00000000
 800943c:	3ff00000 	.word	0x3ff00000
 8009440:	43400000 	.word	0x43400000
 8009444:	0003988e 	.word	0x0003988e
 8009448:	000bb679 	.word	0x000bb679
 800944c:	08009e08 	.word	0x08009e08
 8009450:	3ff00000 	.word	0x3ff00000
 8009454:	40080000 	.word	0x40080000
 8009458:	08009e28 	.word	0x08009e28
 800945c:	08009e18 	.word	0x08009e18
 8009460:	a3b4      	add	r3, pc, #720	; (adr r3, 8009734 <__ieee754_pow+0xa14>)
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	4640      	mov	r0, r8
 8009468:	4649      	mov	r1, r9
 800946a:	f7f6 ff2f 	bl	80002cc <__adddf3>
 800946e:	4622      	mov	r2, r4
 8009470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009474:	462b      	mov	r3, r5
 8009476:	4630      	mov	r0, r6
 8009478:	4639      	mov	r1, r7
 800947a:	f7f6 ff25 	bl	80002c8 <__aeabi_dsub>
 800947e:	4602      	mov	r2, r0
 8009480:	460b      	mov	r3, r1
 8009482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009486:	f7f7 fb67 	bl	8000b58 <__aeabi_dcmpgt>
 800948a:	2800      	cmp	r0, #0
 800948c:	f47f adfe 	bne.w	800908c <__ieee754_pow+0x36c>
 8009490:	4aa3      	ldr	r2, [pc, #652]	; (8009720 <__ieee754_pow+0xa00>)
 8009492:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009496:	4293      	cmp	r3, r2
 8009498:	f340 810a 	ble.w	80096b0 <__ieee754_pow+0x990>
 800949c:	151b      	asrs	r3, r3, #20
 800949e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80094a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80094a6:	fa4a f303 	asr.w	r3, sl, r3
 80094aa:	445b      	add	r3, fp
 80094ac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80094b0:	4e9c      	ldr	r6, [pc, #624]	; (8009724 <__ieee754_pow+0xa04>)
 80094b2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80094b6:	4116      	asrs	r6, r2
 80094b8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80094bc:	2000      	movs	r0, #0
 80094be:	ea23 0106 	bic.w	r1, r3, r6
 80094c2:	f1c2 0214 	rsb	r2, r2, #20
 80094c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80094ca:	fa4a fa02 	asr.w	sl, sl, r2
 80094ce:	f1bb 0f00 	cmp.w	fp, #0
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4620      	mov	r0, r4
 80094d8:	4629      	mov	r1, r5
 80094da:	bfb8      	it	lt
 80094dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80094e0:	f7f6 fef2 	bl	80002c8 <__aeabi_dsub>
 80094e4:	e9cd 0100 	strd	r0, r1, [sp]
 80094e8:	4642      	mov	r2, r8
 80094ea:	464b      	mov	r3, r9
 80094ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094f0:	f7f6 feec 	bl	80002cc <__adddf3>
 80094f4:	2000      	movs	r0, #0
 80094f6:	a378      	add	r3, pc, #480	; (adr r3, 80096d8 <__ieee754_pow+0x9b8>)
 80094f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fc:	4604      	mov	r4, r0
 80094fe:	460d      	mov	r5, r1
 8009500:	f7f7 f89a 	bl	8000638 <__aeabi_dmul>
 8009504:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009508:	4606      	mov	r6, r0
 800950a:	460f      	mov	r7, r1
 800950c:	4620      	mov	r0, r4
 800950e:	4629      	mov	r1, r5
 8009510:	f7f6 feda 	bl	80002c8 <__aeabi_dsub>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4640      	mov	r0, r8
 800951a:	4649      	mov	r1, r9
 800951c:	f7f6 fed4 	bl	80002c8 <__aeabi_dsub>
 8009520:	a36f      	add	r3, pc, #444	; (adr r3, 80096e0 <__ieee754_pow+0x9c0>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	f7f7 f887 	bl	8000638 <__aeabi_dmul>
 800952a:	a36f      	add	r3, pc, #444	; (adr r3, 80096e8 <__ieee754_pow+0x9c8>)
 800952c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009530:	4680      	mov	r8, r0
 8009532:	4689      	mov	r9, r1
 8009534:	4620      	mov	r0, r4
 8009536:	4629      	mov	r1, r5
 8009538:	f7f7 f87e 	bl	8000638 <__aeabi_dmul>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4640      	mov	r0, r8
 8009542:	4649      	mov	r1, r9
 8009544:	f7f6 fec2 	bl	80002cc <__adddf3>
 8009548:	4604      	mov	r4, r0
 800954a:	460d      	mov	r5, r1
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4630      	mov	r0, r6
 8009552:	4639      	mov	r1, r7
 8009554:	f7f6 feba 	bl	80002cc <__adddf3>
 8009558:	4632      	mov	r2, r6
 800955a:	463b      	mov	r3, r7
 800955c:	4680      	mov	r8, r0
 800955e:	4689      	mov	r9, r1
 8009560:	f7f6 feb2 	bl	80002c8 <__aeabi_dsub>
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4620      	mov	r0, r4
 800956a:	4629      	mov	r1, r5
 800956c:	f7f6 feac 	bl	80002c8 <__aeabi_dsub>
 8009570:	4642      	mov	r2, r8
 8009572:	4606      	mov	r6, r0
 8009574:	460f      	mov	r7, r1
 8009576:	464b      	mov	r3, r9
 8009578:	4640      	mov	r0, r8
 800957a:	4649      	mov	r1, r9
 800957c:	f7f7 f85c 	bl	8000638 <__aeabi_dmul>
 8009580:	a35b      	add	r3, pc, #364	; (adr r3, 80096f0 <__ieee754_pow+0x9d0>)
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	4604      	mov	r4, r0
 8009588:	460d      	mov	r5, r1
 800958a:	f7f7 f855 	bl	8000638 <__aeabi_dmul>
 800958e:	a35a      	add	r3, pc, #360	; (adr r3, 80096f8 <__ieee754_pow+0x9d8>)
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f7f6 fe98 	bl	80002c8 <__aeabi_dsub>
 8009598:	4622      	mov	r2, r4
 800959a:	462b      	mov	r3, r5
 800959c:	f7f7 f84c 	bl	8000638 <__aeabi_dmul>
 80095a0:	a357      	add	r3, pc, #348	; (adr r3, 8009700 <__ieee754_pow+0x9e0>)
 80095a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a6:	f7f6 fe91 	bl	80002cc <__adddf3>
 80095aa:	4622      	mov	r2, r4
 80095ac:	462b      	mov	r3, r5
 80095ae:	f7f7 f843 	bl	8000638 <__aeabi_dmul>
 80095b2:	a355      	add	r3, pc, #340	; (adr r3, 8009708 <__ieee754_pow+0x9e8>)
 80095b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b8:	f7f6 fe86 	bl	80002c8 <__aeabi_dsub>
 80095bc:	4622      	mov	r2, r4
 80095be:	462b      	mov	r3, r5
 80095c0:	f7f7 f83a 	bl	8000638 <__aeabi_dmul>
 80095c4:	a352      	add	r3, pc, #328	; (adr r3, 8009710 <__ieee754_pow+0x9f0>)
 80095c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ca:	f7f6 fe7f 	bl	80002cc <__adddf3>
 80095ce:	4622      	mov	r2, r4
 80095d0:	462b      	mov	r3, r5
 80095d2:	f7f7 f831 	bl	8000638 <__aeabi_dmul>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4640      	mov	r0, r8
 80095dc:	4649      	mov	r1, r9
 80095de:	f7f6 fe73 	bl	80002c8 <__aeabi_dsub>
 80095e2:	4604      	mov	r4, r0
 80095e4:	460d      	mov	r5, r1
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4640      	mov	r0, r8
 80095ec:	4649      	mov	r1, r9
 80095ee:	f7f7 f823 	bl	8000638 <__aeabi_dmul>
 80095f2:	2200      	movs	r2, #0
 80095f4:	e9cd 0100 	strd	r0, r1, [sp]
 80095f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095fc:	4620      	mov	r0, r4
 80095fe:	4629      	mov	r1, r5
 8009600:	f7f6 fe62 	bl	80002c8 <__aeabi_dsub>
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800960c:	f7f7 f93e 	bl	800088c <__aeabi_ddiv>
 8009610:	4632      	mov	r2, r6
 8009612:	4604      	mov	r4, r0
 8009614:	460d      	mov	r5, r1
 8009616:	463b      	mov	r3, r7
 8009618:	4640      	mov	r0, r8
 800961a:	4649      	mov	r1, r9
 800961c:	f7f7 f80c 	bl	8000638 <__aeabi_dmul>
 8009620:	4632      	mov	r2, r6
 8009622:	463b      	mov	r3, r7
 8009624:	f7f6 fe52 	bl	80002cc <__adddf3>
 8009628:	4602      	mov	r2, r0
 800962a:	460b      	mov	r3, r1
 800962c:	4620      	mov	r0, r4
 800962e:	4629      	mov	r1, r5
 8009630:	f7f6 fe4a 	bl	80002c8 <__aeabi_dsub>
 8009634:	4642      	mov	r2, r8
 8009636:	464b      	mov	r3, r9
 8009638:	f7f6 fe46 	bl	80002c8 <__aeabi_dsub>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	2000      	movs	r0, #0
 8009642:	4939      	ldr	r1, [pc, #228]	; (8009728 <__ieee754_pow+0xa08>)
 8009644:	f7f6 fe40 	bl	80002c8 <__aeabi_dsub>
 8009648:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800964c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009650:	4602      	mov	r2, r0
 8009652:	460b      	mov	r3, r1
 8009654:	da2f      	bge.n	80096b6 <__ieee754_pow+0x996>
 8009656:	4650      	mov	r0, sl
 8009658:	ec43 2b10 	vmov	d0, r2, r3
 800965c:	f000 f9c0 	bl	80099e0 <scalbn>
 8009660:	ec51 0b10 	vmov	r0, r1, d0
 8009664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009668:	f7ff bbf1 	b.w	8008e4e <__ieee754_pow+0x12e>
 800966c:	4b2f      	ldr	r3, [pc, #188]	; (800972c <__ieee754_pow+0xa0c>)
 800966e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009672:	429e      	cmp	r6, r3
 8009674:	f77f af0c 	ble.w	8009490 <__ieee754_pow+0x770>
 8009678:	4b2d      	ldr	r3, [pc, #180]	; (8009730 <__ieee754_pow+0xa10>)
 800967a:	440b      	add	r3, r1
 800967c:	4303      	orrs	r3, r0
 800967e:	d00b      	beq.n	8009698 <__ieee754_pow+0x978>
 8009680:	a325      	add	r3, pc, #148	; (adr r3, 8009718 <__ieee754_pow+0x9f8>)
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800968a:	f7f6 ffd5 	bl	8000638 <__aeabi_dmul>
 800968e:	a322      	add	r3, pc, #136	; (adr r3, 8009718 <__ieee754_pow+0x9f8>)
 8009690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009694:	f7ff bbdb 	b.w	8008e4e <__ieee754_pow+0x12e>
 8009698:	4622      	mov	r2, r4
 800969a:	462b      	mov	r3, r5
 800969c:	f7f6 fe14 	bl	80002c8 <__aeabi_dsub>
 80096a0:	4642      	mov	r2, r8
 80096a2:	464b      	mov	r3, r9
 80096a4:	f7f7 fa4e 	bl	8000b44 <__aeabi_dcmpge>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	f43f aef1 	beq.w	8009490 <__ieee754_pow+0x770>
 80096ae:	e7e7      	b.n	8009680 <__ieee754_pow+0x960>
 80096b0:	f04f 0a00 	mov.w	sl, #0
 80096b4:	e718      	b.n	80094e8 <__ieee754_pow+0x7c8>
 80096b6:	4621      	mov	r1, r4
 80096b8:	e7d4      	b.n	8009664 <__ieee754_pow+0x944>
 80096ba:	2000      	movs	r0, #0
 80096bc:	491a      	ldr	r1, [pc, #104]	; (8009728 <__ieee754_pow+0xa08>)
 80096be:	f7ff bb8f 	b.w	8008de0 <__ieee754_pow+0xc0>
 80096c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096c6:	f7ff bb8b 	b.w	8008de0 <__ieee754_pow+0xc0>
 80096ca:	4630      	mov	r0, r6
 80096cc:	4639      	mov	r1, r7
 80096ce:	f7ff bb87 	b.w	8008de0 <__ieee754_pow+0xc0>
 80096d2:	4693      	mov	fp, r2
 80096d4:	f7ff bb98 	b.w	8008e08 <__ieee754_pow+0xe8>
 80096d8:	00000000 	.word	0x00000000
 80096dc:	3fe62e43 	.word	0x3fe62e43
 80096e0:	fefa39ef 	.word	0xfefa39ef
 80096e4:	3fe62e42 	.word	0x3fe62e42
 80096e8:	0ca86c39 	.word	0x0ca86c39
 80096ec:	be205c61 	.word	0xbe205c61
 80096f0:	72bea4d0 	.word	0x72bea4d0
 80096f4:	3e663769 	.word	0x3e663769
 80096f8:	c5d26bf1 	.word	0xc5d26bf1
 80096fc:	3ebbbd41 	.word	0x3ebbbd41
 8009700:	af25de2c 	.word	0xaf25de2c
 8009704:	3f11566a 	.word	0x3f11566a
 8009708:	16bebd93 	.word	0x16bebd93
 800970c:	3f66c16c 	.word	0x3f66c16c
 8009710:	5555553e 	.word	0x5555553e
 8009714:	3fc55555 	.word	0x3fc55555
 8009718:	c2f8f359 	.word	0xc2f8f359
 800971c:	01a56e1f 	.word	0x01a56e1f
 8009720:	3fe00000 	.word	0x3fe00000
 8009724:	000fffff 	.word	0x000fffff
 8009728:	3ff00000 	.word	0x3ff00000
 800972c:	4090cbff 	.word	0x4090cbff
 8009730:	3f6f3400 	.word	0x3f6f3400
 8009734:	652b82fe 	.word	0x652b82fe
 8009738:	3c971547 	.word	0x3c971547

0800973c <__ieee754_sqrt>:
 800973c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009740:	4955      	ldr	r1, [pc, #340]	; (8009898 <__ieee754_sqrt+0x15c>)
 8009742:	ec55 4b10 	vmov	r4, r5, d0
 8009746:	43a9      	bics	r1, r5
 8009748:	462b      	mov	r3, r5
 800974a:	462a      	mov	r2, r5
 800974c:	d112      	bne.n	8009774 <__ieee754_sqrt+0x38>
 800974e:	ee10 2a10 	vmov	r2, s0
 8009752:	ee10 0a10 	vmov	r0, s0
 8009756:	4629      	mov	r1, r5
 8009758:	f7f6 ff6e 	bl	8000638 <__aeabi_dmul>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4620      	mov	r0, r4
 8009762:	4629      	mov	r1, r5
 8009764:	f7f6 fdb2 	bl	80002cc <__adddf3>
 8009768:	4604      	mov	r4, r0
 800976a:	460d      	mov	r5, r1
 800976c:	ec45 4b10 	vmov	d0, r4, r5
 8009770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009774:	2d00      	cmp	r5, #0
 8009776:	ee10 0a10 	vmov	r0, s0
 800977a:	4621      	mov	r1, r4
 800977c:	dc0f      	bgt.n	800979e <__ieee754_sqrt+0x62>
 800977e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009782:	4330      	orrs	r0, r6
 8009784:	d0f2      	beq.n	800976c <__ieee754_sqrt+0x30>
 8009786:	b155      	cbz	r5, 800979e <__ieee754_sqrt+0x62>
 8009788:	ee10 2a10 	vmov	r2, s0
 800978c:	4620      	mov	r0, r4
 800978e:	4629      	mov	r1, r5
 8009790:	f7f6 fd9a 	bl	80002c8 <__aeabi_dsub>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	f7f7 f878 	bl	800088c <__aeabi_ddiv>
 800979c:	e7e4      	b.n	8009768 <__ieee754_sqrt+0x2c>
 800979e:	151b      	asrs	r3, r3, #20
 80097a0:	d073      	beq.n	800988a <__ieee754_sqrt+0x14e>
 80097a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80097a6:	07dd      	lsls	r5, r3, #31
 80097a8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80097ac:	bf48      	it	mi
 80097ae:	0fc8      	lsrmi	r0, r1, #31
 80097b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80097b4:	bf44      	itt	mi
 80097b6:	0049      	lslmi	r1, r1, #1
 80097b8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80097bc:	2500      	movs	r5, #0
 80097be:	1058      	asrs	r0, r3, #1
 80097c0:	0fcb      	lsrs	r3, r1, #31
 80097c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80097c6:	0049      	lsls	r1, r1, #1
 80097c8:	2316      	movs	r3, #22
 80097ca:	462c      	mov	r4, r5
 80097cc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80097d0:	19a7      	adds	r7, r4, r6
 80097d2:	4297      	cmp	r7, r2
 80097d4:	bfde      	ittt	le
 80097d6:	19bc      	addle	r4, r7, r6
 80097d8:	1bd2      	suble	r2, r2, r7
 80097da:	19ad      	addle	r5, r5, r6
 80097dc:	0fcf      	lsrs	r7, r1, #31
 80097de:	3b01      	subs	r3, #1
 80097e0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80097e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80097e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80097ec:	d1f0      	bne.n	80097d0 <__ieee754_sqrt+0x94>
 80097ee:	f04f 0c20 	mov.w	ip, #32
 80097f2:	469e      	mov	lr, r3
 80097f4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80097f8:	42a2      	cmp	r2, r4
 80097fa:	eb06 070e 	add.w	r7, r6, lr
 80097fe:	dc02      	bgt.n	8009806 <__ieee754_sqrt+0xca>
 8009800:	d112      	bne.n	8009828 <__ieee754_sqrt+0xec>
 8009802:	428f      	cmp	r7, r1
 8009804:	d810      	bhi.n	8009828 <__ieee754_sqrt+0xec>
 8009806:	2f00      	cmp	r7, #0
 8009808:	eb07 0e06 	add.w	lr, r7, r6
 800980c:	da42      	bge.n	8009894 <__ieee754_sqrt+0x158>
 800980e:	f1be 0f00 	cmp.w	lr, #0
 8009812:	db3f      	blt.n	8009894 <__ieee754_sqrt+0x158>
 8009814:	f104 0801 	add.w	r8, r4, #1
 8009818:	1b12      	subs	r2, r2, r4
 800981a:	428f      	cmp	r7, r1
 800981c:	bf88      	it	hi
 800981e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009822:	1bc9      	subs	r1, r1, r7
 8009824:	4433      	add	r3, r6
 8009826:	4644      	mov	r4, r8
 8009828:	0052      	lsls	r2, r2, #1
 800982a:	f1bc 0c01 	subs.w	ip, ip, #1
 800982e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8009832:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009836:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800983a:	d1dd      	bne.n	80097f8 <__ieee754_sqrt+0xbc>
 800983c:	430a      	orrs	r2, r1
 800983e:	d006      	beq.n	800984e <__ieee754_sqrt+0x112>
 8009840:	1c5c      	adds	r4, r3, #1
 8009842:	bf13      	iteet	ne
 8009844:	3301      	addne	r3, #1
 8009846:	3501      	addeq	r5, #1
 8009848:	4663      	moveq	r3, ip
 800984a:	f023 0301 	bicne.w	r3, r3, #1
 800984e:	106a      	asrs	r2, r5, #1
 8009850:	085b      	lsrs	r3, r3, #1
 8009852:	07e9      	lsls	r1, r5, #31
 8009854:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009858:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800985c:	bf48      	it	mi
 800985e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009862:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8009866:	461c      	mov	r4, r3
 8009868:	e780      	b.n	800976c <__ieee754_sqrt+0x30>
 800986a:	0aca      	lsrs	r2, r1, #11
 800986c:	3815      	subs	r0, #21
 800986e:	0549      	lsls	r1, r1, #21
 8009870:	2a00      	cmp	r2, #0
 8009872:	d0fa      	beq.n	800986a <__ieee754_sqrt+0x12e>
 8009874:	02d6      	lsls	r6, r2, #11
 8009876:	d50a      	bpl.n	800988e <__ieee754_sqrt+0x152>
 8009878:	f1c3 0420 	rsb	r4, r3, #32
 800987c:	fa21 f404 	lsr.w	r4, r1, r4
 8009880:	1e5d      	subs	r5, r3, #1
 8009882:	4099      	lsls	r1, r3
 8009884:	4322      	orrs	r2, r4
 8009886:	1b43      	subs	r3, r0, r5
 8009888:	e78b      	b.n	80097a2 <__ieee754_sqrt+0x66>
 800988a:	4618      	mov	r0, r3
 800988c:	e7f0      	b.n	8009870 <__ieee754_sqrt+0x134>
 800988e:	0052      	lsls	r2, r2, #1
 8009890:	3301      	adds	r3, #1
 8009892:	e7ef      	b.n	8009874 <__ieee754_sqrt+0x138>
 8009894:	46a0      	mov	r8, r4
 8009896:	e7bf      	b.n	8009818 <__ieee754_sqrt+0xdc>
 8009898:	7ff00000 	.word	0x7ff00000

0800989c <fabs>:
 800989c:	ec51 0b10 	vmov	r0, r1, d0
 80098a0:	ee10 2a10 	vmov	r2, s0
 80098a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80098a8:	ec43 2b10 	vmov	d0, r2, r3
 80098ac:	4770      	bx	lr

080098ae <finite>:
 80098ae:	ee10 3a90 	vmov	r3, s1
 80098b2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80098b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80098ba:	0fc0      	lsrs	r0, r0, #31
 80098bc:	4770      	bx	lr

080098be <matherr>:
 80098be:	2000      	movs	r0, #0
 80098c0:	4770      	bx	lr
 80098c2:	0000      	movs	r0, r0
 80098c4:	0000      	movs	r0, r0
	...

080098c8 <nan>:
 80098c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80098d0 <nan+0x8>
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	00000000 	.word	0x00000000
 80098d4:	7ff80000 	.word	0x7ff80000

080098d8 <rint>:
 80098d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098da:	ec51 0b10 	vmov	r0, r1, d0
 80098de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80098e2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80098e6:	2e13      	cmp	r6, #19
 80098e8:	460b      	mov	r3, r1
 80098ea:	ee10 4a10 	vmov	r4, s0
 80098ee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80098f2:	dc56      	bgt.n	80099a2 <rint+0xca>
 80098f4:	2e00      	cmp	r6, #0
 80098f6:	da2b      	bge.n	8009950 <rint+0x78>
 80098f8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80098fc:	4302      	orrs	r2, r0
 80098fe:	d023      	beq.n	8009948 <rint+0x70>
 8009900:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009904:	4302      	orrs	r2, r0
 8009906:	4254      	negs	r4, r2
 8009908:	4314      	orrs	r4, r2
 800990a:	0c4b      	lsrs	r3, r1, #17
 800990c:	0b24      	lsrs	r4, r4, #12
 800990e:	045b      	lsls	r3, r3, #17
 8009910:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009914:	ea44 0103 	orr.w	r1, r4, r3
 8009918:	460b      	mov	r3, r1
 800991a:	492f      	ldr	r1, [pc, #188]	; (80099d8 <rint+0x100>)
 800991c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009920:	e9d1 6700 	ldrd	r6, r7, [r1]
 8009924:	4602      	mov	r2, r0
 8009926:	4639      	mov	r1, r7
 8009928:	4630      	mov	r0, r6
 800992a:	f7f6 fccf 	bl	80002cc <__adddf3>
 800992e:	e9cd 0100 	strd	r0, r1, [sp]
 8009932:	463b      	mov	r3, r7
 8009934:	4632      	mov	r2, r6
 8009936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800993a:	f7f6 fcc5 	bl	80002c8 <__aeabi_dsub>
 800993e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009942:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009946:	4639      	mov	r1, r7
 8009948:	ec41 0b10 	vmov	d0, r0, r1
 800994c:	b003      	add	sp, #12
 800994e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009950:	4a22      	ldr	r2, [pc, #136]	; (80099dc <rint+0x104>)
 8009952:	4132      	asrs	r2, r6
 8009954:	ea01 0702 	and.w	r7, r1, r2
 8009958:	4307      	orrs	r7, r0
 800995a:	d0f5      	beq.n	8009948 <rint+0x70>
 800995c:	0852      	lsrs	r2, r2, #1
 800995e:	4011      	ands	r1, r2
 8009960:	430c      	orrs	r4, r1
 8009962:	d00b      	beq.n	800997c <rint+0xa4>
 8009964:	ea23 0202 	bic.w	r2, r3, r2
 8009968:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800996c:	2e13      	cmp	r6, #19
 800996e:	fa43 f306 	asr.w	r3, r3, r6
 8009972:	bf0c      	ite	eq
 8009974:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009978:	2400      	movne	r4, #0
 800997a:	4313      	orrs	r3, r2
 800997c:	4916      	ldr	r1, [pc, #88]	; (80099d8 <rint+0x100>)
 800997e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009982:	4622      	mov	r2, r4
 8009984:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009988:	4620      	mov	r0, r4
 800998a:	4629      	mov	r1, r5
 800998c:	f7f6 fc9e 	bl	80002cc <__adddf3>
 8009990:	e9cd 0100 	strd	r0, r1, [sp]
 8009994:	4622      	mov	r2, r4
 8009996:	462b      	mov	r3, r5
 8009998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800999c:	f7f6 fc94 	bl	80002c8 <__aeabi_dsub>
 80099a0:	e7d2      	b.n	8009948 <rint+0x70>
 80099a2:	2e33      	cmp	r6, #51	; 0x33
 80099a4:	dd07      	ble.n	80099b6 <rint+0xde>
 80099a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80099aa:	d1cd      	bne.n	8009948 <rint+0x70>
 80099ac:	ee10 2a10 	vmov	r2, s0
 80099b0:	f7f6 fc8c 	bl	80002cc <__adddf3>
 80099b4:	e7c8      	b.n	8009948 <rint+0x70>
 80099b6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80099ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099be:	40f2      	lsrs	r2, r6
 80099c0:	4210      	tst	r0, r2
 80099c2:	d0c1      	beq.n	8009948 <rint+0x70>
 80099c4:	0852      	lsrs	r2, r2, #1
 80099c6:	4210      	tst	r0, r2
 80099c8:	bf1f      	itttt	ne
 80099ca:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80099ce:	ea20 0202 	bicne.w	r2, r0, r2
 80099d2:	4134      	asrne	r4, r6
 80099d4:	4314      	orrne	r4, r2
 80099d6:	e7d1      	b.n	800997c <rint+0xa4>
 80099d8:	08009e38 	.word	0x08009e38
 80099dc:	000fffff 	.word	0x000fffff

080099e0 <scalbn>:
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	ec55 4b10 	vmov	r4, r5, d0
 80099e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80099ea:	4606      	mov	r6, r0
 80099ec:	462b      	mov	r3, r5
 80099ee:	b9aa      	cbnz	r2, 8009a1c <scalbn+0x3c>
 80099f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80099f4:	4323      	orrs	r3, r4
 80099f6:	d03b      	beq.n	8009a70 <scalbn+0x90>
 80099f8:	4b31      	ldr	r3, [pc, #196]	; (8009ac0 <scalbn+0xe0>)
 80099fa:	4629      	mov	r1, r5
 80099fc:	2200      	movs	r2, #0
 80099fe:	ee10 0a10 	vmov	r0, s0
 8009a02:	f7f6 fe19 	bl	8000638 <__aeabi_dmul>
 8009a06:	4b2f      	ldr	r3, [pc, #188]	; (8009ac4 <scalbn+0xe4>)
 8009a08:	429e      	cmp	r6, r3
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	460d      	mov	r5, r1
 8009a0e:	da12      	bge.n	8009a36 <scalbn+0x56>
 8009a10:	a327      	add	r3, pc, #156	; (adr r3, 8009ab0 <scalbn+0xd0>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	f7f6 fe0f 	bl	8000638 <__aeabi_dmul>
 8009a1a:	e009      	b.n	8009a30 <scalbn+0x50>
 8009a1c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009a20:	428a      	cmp	r2, r1
 8009a22:	d10c      	bne.n	8009a3e <scalbn+0x5e>
 8009a24:	ee10 2a10 	vmov	r2, s0
 8009a28:	4620      	mov	r0, r4
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	f7f6 fc4e 	bl	80002cc <__adddf3>
 8009a30:	4604      	mov	r4, r0
 8009a32:	460d      	mov	r5, r1
 8009a34:	e01c      	b.n	8009a70 <scalbn+0x90>
 8009a36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	3a36      	subs	r2, #54	; 0x36
 8009a3e:	4432      	add	r2, r6
 8009a40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009a44:	428a      	cmp	r2, r1
 8009a46:	dd0b      	ble.n	8009a60 <scalbn+0x80>
 8009a48:	ec45 4b11 	vmov	d1, r4, r5
 8009a4c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009ab8 <scalbn+0xd8>
 8009a50:	f000 f83c 	bl	8009acc <copysign>
 8009a54:	a318      	add	r3, pc, #96	; (adr r3, 8009ab8 <scalbn+0xd8>)
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	ec51 0b10 	vmov	r0, r1, d0
 8009a5e:	e7da      	b.n	8009a16 <scalbn+0x36>
 8009a60:	2a00      	cmp	r2, #0
 8009a62:	dd08      	ble.n	8009a76 <scalbn+0x96>
 8009a64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a70:	ec45 4b10 	vmov	d0, r4, r5
 8009a74:	bd70      	pop	{r4, r5, r6, pc}
 8009a76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009a7a:	da0d      	bge.n	8009a98 <scalbn+0xb8>
 8009a7c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009a80:	429e      	cmp	r6, r3
 8009a82:	ec45 4b11 	vmov	d1, r4, r5
 8009a86:	dce1      	bgt.n	8009a4c <scalbn+0x6c>
 8009a88:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009ab0 <scalbn+0xd0>
 8009a8c:	f000 f81e 	bl	8009acc <copysign>
 8009a90:	a307      	add	r3, pc, #28	; (adr r3, 8009ab0 <scalbn+0xd0>)
 8009a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a96:	e7e0      	b.n	8009a5a <scalbn+0x7a>
 8009a98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a9c:	3236      	adds	r2, #54	; 0x36
 8009a9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009aa2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009aa6:	4620      	mov	r0, r4
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	2200      	movs	r2, #0
 8009aac:	4b06      	ldr	r3, [pc, #24]	; (8009ac8 <scalbn+0xe8>)
 8009aae:	e7b2      	b.n	8009a16 <scalbn+0x36>
 8009ab0:	c2f8f359 	.word	0xc2f8f359
 8009ab4:	01a56e1f 	.word	0x01a56e1f
 8009ab8:	8800759c 	.word	0x8800759c
 8009abc:	7e37e43c 	.word	0x7e37e43c
 8009ac0:	43500000 	.word	0x43500000
 8009ac4:	ffff3cb0 	.word	0xffff3cb0
 8009ac8:	3c900000 	.word	0x3c900000

08009acc <copysign>:
 8009acc:	ec51 0b10 	vmov	r0, r1, d0
 8009ad0:	ee11 0a90 	vmov	r0, s3
 8009ad4:	ee10 2a10 	vmov	r2, s0
 8009ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009adc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009ae0:	ea41 0300 	orr.w	r3, r1, r0
 8009ae4:	ec43 2b10 	vmov	d0, r2, r3
 8009ae8:	4770      	bx	lr
	...

08009aec <_init>:
 8009aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aee:	bf00      	nop
 8009af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009af2:	bc08      	pop	{r3}
 8009af4:	469e      	mov	lr, r3
 8009af6:	4770      	bx	lr

08009af8 <_fini>:
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afa:	bf00      	nop
 8009afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afe:	bc08      	pop	{r3}
 8009b00:	469e      	mov	lr, r3
 8009b02:	4770      	bx	lr
