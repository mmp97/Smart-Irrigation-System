
Treasure_Planet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000994c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  08009b20  08009b20  00019b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e68  08009e68  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08009e68  08009e68  00019e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e70  08009e70  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e70  08009e70  00019e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e74  08009e74  00019e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08009e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000242c  20000204  0800a07c  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002630  0800a07c  00022630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001549a  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f4a  00000000  00000000  000356ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a8  00000000  00000000  00038618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  000396c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000250e8  00000000  00000000  0003a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f751  00000000  00000000  0005f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000db9f8  00000000  00000000  0006ee19  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014a811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e8  00000000  00000000  0014a88c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000204 	.word	0x20000204
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009b04 	.word	0x08009b04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000208 	.word	0x20000208
 800020c:	08009b04 	.word	0x08009b04

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <UART1_IRQHandler>:
	HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(USART1_IRQn);

}
void UART1_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	memset(R_msg, 0, sizeof(R_msg));
 8000f2c:	2220      	movs	r2, #32
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <UART1_IRQHandler+0x20>)
 8000f32:	f005 fb07 	bl	8006544 <memset>
	HAL_UART_Receive(&huart1, (uint8_t*)&R_msg[0],1,20);
 8000f36:	2314      	movs	r3, #20
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4903      	ldr	r1, [pc, #12]	; (8000f48 <UART1_IRQHandler+0x20>)
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <UART1_IRQHandler+0x24>)
 8000f3e:	f004 fb65 	bl	800560c <HAL_UART_Receive>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200002c0 	.word	0x200002c0
 8000f4c:	20000280 	.word	0x20000280

08000f50 <Set_Pin_Output>:
//64-bit adresses of the temperature sensors
uint8_t DS18B20_ROM_ADDR[2][8] = { {0x28,0x0,0x2c,0xf3,0x8,0x0,0x0,0x1b},
								  {0x28,0x26,0xbd,0xb,0x3a,0x19,0x1,0x99} };

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	460b      	mov	r3, r1
 8000f5a:	807b      	strh	r3, [r7, #2]
   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
   GPIO_InitStruct.Pin = GPIO_Pin;
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
   HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f002 fba4 	bl	80036cc <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3720      	adds	r7, #32
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Set_Pin_Input>:
void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
	   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
	   GPIO_InitStruct.Pin = GPIO_Pin;
 8000fa8:	887b      	ldrh	r3, [r7, #2]
 8000faa:	60fb      	str	r3, [r7, #12]
	   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
	   GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
	   HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f002 fb86 	bl	80036cc <HAL_GPIO_Init>
}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <Start_DS18B20>:

uint8_t Start_DS18B20 (void)
{
 8000fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(PORT_DS18B20, PIN_DS18B20);
 8000fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fd6:	4827      	ldr	r0, [pc, #156]	; (8001074 <Start_DS18B20+0xac>)
 8000fd8:	f7ff ffba 	bl	8000f50 <Set_Pin_Output>
	HAL_GPIO_WritePin (PORT_DS18B20, PIN_DS18B20, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe2:	4824      	ldr	r0, [pc, #144]	; (8001074 <Start_DS18B20+0xac>)
 8000fe4:	f002 fd1c 	bl	8003a20 <HAL_GPIO_WritePin>
	delay (480);
 8000fe8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000fec:	f000 ffac 	bl	8001f48 <delay>
	Set_Pin_Input(PORT_DS18B20, PIN_DS18B20);
 8000ff0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff4:	481f      	ldr	r0, [pc, #124]	; (8001074 <Start_DS18B20+0xac>)
 8000ff6:	f7ff ffc9 	bl	8000f8c <Set_Pin_Input>
	delay (80);
 8000ffa:	2050      	movs	r0, #80	; 0x50
 8000ffc:	f000 ffa4 	bl	8001f48 <delay>
	if (!(HAL_GPIO_ReadPin (PORT_DS18B20, PIN_DS18B20))) Response = 1;
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	481b      	ldr	r0, [pc, #108]	; (8001074 <Start_DS18B20+0xac>)
 8001006:	f002 fcf3 	bl	80039f0 <HAL_GPIO_ReadPin>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <Start_DS18B20+0x4e>
 8001010:	2301      	movs	r3, #1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	e001      	b.n	800101a <Start_DS18B20+0x52>
	else Response = -1;
 8001016:	23ff      	movs	r3, #255	; 0xff
 8001018:	71fb      	strb	r3, [r7, #7]
	delay (400);
 800101a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800101e:	f000 ff93 	bl	8001f48 <delay>
	if(Response != 1)
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d020      	beq.n	800106a <Start_DS18B20+0xa2>
	{
		strcat((char*)msg, "ERROR: TEMPERATURE SENSORS NOT DETECTED \r\n");
 8001028:	4813      	ldr	r0, [pc, #76]	; (8001078 <Start_DS18B20+0xb0>)
 800102a:	f7ff f8f1 	bl	8000210 <strlen>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <Start_DS18B20+0xb0>)
 8001034:	4413      	add	r3, r2
 8001036:	4a11      	ldr	r2, [pc, #68]	; (800107c <Start_DS18B20+0xb4>)
 8001038:	4614      	mov	r4, r2
 800103a:	469c      	mov	ip, r3
 800103c:	f104 0e20 	add.w	lr, r4, #32
 8001040:	4665      	mov	r5, ip
 8001042:	4626      	mov	r6, r4
 8001044:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001046:	6028      	str	r0, [r5, #0]
 8001048:	6069      	str	r1, [r5, #4]
 800104a:	60aa      	str	r2, [r5, #8]
 800104c:	60eb      	str	r3, [r5, #12]
 800104e:	3410      	adds	r4, #16
 8001050:	f10c 0c10 	add.w	ip, ip, #16
 8001054:	4574      	cmp	r4, lr
 8001056:	d1f3      	bne.n	8001040 <Start_DS18B20+0x78>
 8001058:	4662      	mov	r2, ip
 800105a:	4623      	mov	r3, r4
 800105c:	cb03      	ldmia	r3!, {r0, r1}
 800105e:	6010      	str	r0, [r2, #0]
 8001060:	6051      	str	r1, [r2, #4]
 8001062:	8819      	ldrh	r1, [r3, #0]
 8001064:	789b      	ldrb	r3, [r3, #2]
 8001066:	8111      	strh	r1, [r2, #8]
 8001068:	7293      	strb	r3, [r2, #10]
	}
	return Response;
 800106a:	79fb      	ldrb	r3, [r7, #7]
}
 800106c:	4618      	mov	r0, r3
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001074:	40020000 	.word	0x40020000
 8001078:	20000308 	.word	0x20000308
 800107c:	08009b20 	.word	0x08009b20

08001080 <Write_Byte_DS18B20>:
void Write_Byte_DS18B20 (uint8_t data){
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<8; i++)
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	e034      	b.n	80010fa <Write_Byte_DS18B20+0x7a>
	{
		if((data & (1<<i))!=0)
 8001090:	79fa      	ldrb	r2, [r7, #7]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	fa42 f303 	asr.w	r3, r2, r3
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d016      	beq.n	80010ce <Write_Byte_DS18B20+0x4e>
		{
			Set_Pin_Output(PORT_DS18B20, PIN_DS18B20);
 80010a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a4:	4818      	ldr	r0, [pc, #96]	; (8001108 <Write_Byte_DS18B20+0x88>)
 80010a6:	f7ff ff53 	bl	8000f50 <Set_Pin_Output>
			HAL_GPIO_WritePin(PORT_DS18B20, PIN_DS18B20, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b0:	4815      	ldr	r0, [pc, #84]	; (8001108 <Write_Byte_DS18B20+0x88>)
 80010b2:	f002 fcb5 	bl	8003a20 <HAL_GPIO_WritePin>
			delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 ff46 	bl	8001f48 <delay>
			Set_Pin_Input(PORT_DS18B20, PIN_DS18B20);
 80010bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c0:	4811      	ldr	r0, [pc, #68]	; (8001108 <Write_Byte_DS18B20+0x88>)
 80010c2:	f7ff ff63 	bl	8000f8c <Set_Pin_Input>
			delay(60);
 80010c6:	203c      	movs	r0, #60	; 0x3c
 80010c8:	f000 ff3e 	bl	8001f48 <delay>
 80010cc:	e012      	b.n	80010f4 <Write_Byte_DS18B20+0x74>
		}
		else
		{
			Set_Pin_Output(PORT_DS18B20, PIN_DS18B20);
 80010ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d2:	480d      	ldr	r0, [pc, #52]	; (8001108 <Write_Byte_DS18B20+0x88>)
 80010d4:	f7ff ff3c 	bl	8000f50 <Set_Pin_Output>
			HAL_GPIO_WritePin(PORT_DS18B20, PIN_DS18B20, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010de:	480a      	ldr	r0, [pc, #40]	; (8001108 <Write_Byte_DS18B20+0x88>)
 80010e0:	f002 fc9e 	bl	8003a20 <HAL_GPIO_WritePin>
			delay(60);
 80010e4:	203c      	movs	r0, #60	; 0x3c
 80010e6:	f000 ff2f 	bl	8001f48 <delay>
			Set_Pin_Input(PORT_DS18B20, PIN_DS18B20);
 80010ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ee:	4806      	ldr	r0, [pc, #24]	; (8001108 <Write_Byte_DS18B20+0x88>)
 80010f0:	f7ff ff4c 	bl	8000f8c <Set_Pin_Input>
	for(int i=0; i<8; i++)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3301      	adds	r3, #1
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	2b07      	cmp	r3, #7
 80010fe:	ddc7      	ble.n	8001090 <Write_Byte_DS18B20+0x10>
		}
	}
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40020000 	.word	0x40020000

0800110c <Read_DS18B20>:
uint8_t Read_DS18B20 (void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
	Set_Pin_Input(PORT_DS18B20, PIN_DS18B20);
 8001112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001116:	481d      	ldr	r0, [pc, #116]	; (800118c <Read_DS18B20+0x80>)
 8001118:	f7ff ff38 	bl	8000f8c <Set_Pin_Input>
	uint8_t data = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<8; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	e02a      	b.n	800117c <Read_DS18B20+0x70>
	{
		Set_Pin_Output(PORT_DS18B20, PIN_DS18B20);
 8001126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112a:	4818      	ldr	r0, [pc, #96]	; (800118c <Read_DS18B20+0x80>)
 800112c:	f7ff ff10 	bl	8000f50 <Set_Pin_Output>
		HAL_GPIO_WritePin(PORT_DS18B20, PIN_DS18B20, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001136:	4815      	ldr	r0, [pc, #84]	; (800118c <Read_DS18B20+0x80>)
 8001138:	f002 fc72 	bl	8003a20 <HAL_GPIO_WritePin>
		delay(2);
 800113c:	2002      	movs	r0, #2
 800113e:	f000 ff03 	bl	8001f48 <delay>
		Set_Pin_Input(PORT_DS18B20, PIN_DS18B20);
 8001142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <Read_DS18B20+0x80>)
 8001148:	f7ff ff20 	bl	8000f8c <Set_Pin_Input>
		if(HAL_GPIO_ReadPin (PORT_DS18B20, PIN_DS18B20) == GPIO_PIN_SET)
 800114c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001150:	480e      	ldr	r0, [pc, #56]	; (800118c <Read_DS18B20+0x80>)
 8001152:	f002 fc4d 	bl	80039f0 <HAL_GPIO_ReadPin>
 8001156:	4603      	mov	r3, r0
 8001158:	2b01      	cmp	r3, #1
 800115a:	d109      	bne.n	8001170 <Read_DS18B20+0x64>
		{
			data |= 1<<i;
 800115c:	2201      	movs	r2, #1
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	b25a      	sxtb	r2, r3
 8001166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116a:	4313      	orrs	r3, r2
 800116c:	b25b      	sxtb	r3, r3
 800116e:	71fb      	strb	r3, [r7, #7]
		}
		delay(60);
 8001170:	203c      	movs	r0, #60	; 0x3c
 8001172:	f000 fee9 	bl	8001f48 <delay>
	for(int i=0; i<8; i++)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2b07      	cmp	r3, #7
 8001180:	ddd1      	ble.n	8001126 <Read_DS18B20+0x1a>
	}
	return data;
 8001182:	79fb      	ldrb	r3, [r7, #7]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40020000 	.word	0x40020000

08001190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001190:	b590      	push	{r4, r7, lr}
 8001192:	b0ab      	sub	sp, #172	; 0xac
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001196:	f000 ffe1 	bl	800215c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800119a:	f000 fa49 	bl	8001630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119e:	f000 fbd1 	bl	8001944 <MX_GPIO_Init>
  MX_DMA_Init();
 80011a2:	f000 fbaf 	bl	8001904 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011a6:	f000 fb83 	bl	80018b0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011aa:	f000 fad1 	bl	8001750 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80011ae:	f000 fb55 	bl	800185c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80011b2:	f005 f8d7 	bl	8006364 <MX_FATFS_Init>
  MX_RTC_Init();
 80011b6:	f000 fedf 	bl	8001f78 <MX_RTC_Init>
  MX_TIM10_Init();
 80011ba:	f000 fe57 	bl	8001e6c <MX_TIM10_Init>
  MX_TIM11_Init();
 80011be:	f000 fe8b 	bl	8001ed8 <MX_TIM11_Init>
  MX_TIM13_Init();
 80011c2:	f000 fb25 	bl	8001810 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  //Start Timer_10 used to create microsecond delay during temperature sensor communication
  HAL_TIM_Base_Start(&htim10);
 80011c6:	4876      	ldr	r0, [pc, #472]	; (80013a0 <main+0x210>)
 80011c8:	f003 fff9 	bl	80051be <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim11);
 80011cc:	4875      	ldr	r0, [pc, #468]	; (80013a4 <main+0x214>)
 80011ce:	f003 fff6 	bl	80051be <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim13);
 80011d2:	4875      	ldr	r0, [pc, #468]	; (80013a8 <main+0x218>)
 80011d4:	f003 fff3 	bl	80051be <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t adc_value[2];
  uint32_t raw;
  uint32_t loop_duration = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t Rx, Lux;
  uint8_t moisture;
  uint8_t state = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint8_t irrigation;
  char buffer[120];
  //Start DMA from ADC1
  HAL_ADC_Start_DMA(&hadc1, adc_value, 2);
 80011e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80011e8:	2202      	movs	r2, #2
 80011ea:	4619      	mov	r1, r3
 80011ec:	486f      	ldr	r0, [pc, #444]	; (80013ac <main+0x21c>)
 80011ee:	f001 fa0b 	bl	8002608 <HAL_ADC_Start_DMA>

  set_time();
 80011f2:	f000 ff1b 	bl	800202c <set_time>

  while (1)
  {
	  __HAL_TIM_SET_COUNTER(&htim11, 0);
 80011f6:	4b6b      	ldr	r3, [pc, #428]	; (80013a4 <main+0x214>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
	  //Setting buffer values to zero
	  memset(buffer, 0, sizeof(buffer));
 80011fe:	463b      	mov	r3, r7
 8001200:	2278      	movs	r2, #120	; 0x78
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f005 f99d 	bl	8006544 <memset>
//************************************************LIGHT SENSOR*******************************************************************************
	  //Value of ADC conversion automatically stored through DMA in the buffer
	  raw = adc_value[0];
 800120a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800120c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  Rx = (19251200 - 4700*raw)/raw;
 8001210:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001214:	f241 225c 	movw	r2, #4700	; 0x125c
 8001218:	fb02 f303 	mul.w	r3, r2, r3
 800121c:	f1c3 7392 	rsb	r3, r3, #19136512	; 0x1240000
 8001220:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8001224:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001228:	fbb3 f3f2 	udiv	r3, r3, r2
 800122c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  Lux = 16301 - 1596*log(Rx);
 8001230:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001234:	f7ff f986 	bl	8000544 <__aeabi_ui2d>
 8001238:	4603      	mov	r3, r0
 800123a:	460c      	mov	r4, r1
 800123c:	ec44 3b10 	vmov	d0, r3, r4
 8001240:	f007 f9d6 	bl	80085f0 <log>
 8001244:	ec51 0b10 	vmov	r0, r1, d0
 8001248:	a34d      	add	r3, pc, #308	; (adr r3, 8001380 <main+0x1f0>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f9f3 	bl	8000638 <__aeabi_dmul>
 8001252:	4603      	mov	r3, r0
 8001254:	460c      	mov	r4, r1
 8001256:	461a      	mov	r2, r3
 8001258:	4623      	mov	r3, r4
 800125a:	a14b      	add	r1, pc, #300	; (adr r1, 8001388 <main+0x1f8>)
 800125c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001260:	f7ff f832 	bl	80002c8 <__aeabi_dsub>
 8001264:	4603      	mov	r3, r0
 8001266:	460c      	mov	r4, r1
 8001268:	4618      	mov	r0, r3
 800126a:	4621      	mov	r1, r4
 800126c:	f7ff fcbc 	bl	8000be8 <__aeabi_d2uiz>
 8001270:	4603      	mov	r3, r0
 8001272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  Lux = 4857612*pow(Rx, -1.02911);
 8001276:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800127a:	f7ff f963 	bl	8000544 <__aeabi_ui2d>
 800127e:	4603      	mov	r3, r0
 8001280:	460c      	mov	r4, r1
 8001282:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001390 <main+0x200>
 8001286:	ec44 3b10 	vmov	d0, r3, r4
 800128a:	f007 fa31 	bl	80086f0 <pow>
 800128e:	ec51 0b10 	vmov	r0, r1, d0
 8001292:	a341      	add	r3, pc, #260	; (adr r3, 8001398 <main+0x208>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9ce 	bl	8000638 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4618      	mov	r0, r3
 80012a2:	4621      	mov	r1, r4
 80012a4:	f7ff fca0 	bl	8000be8 <__aeabi_d2uiz>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  sprintf(msg, "%ld ",Lux);
 80012ae:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80012b2:	493f      	ldr	r1, [pc, #252]	; (80013b0 <main+0x220>)
 80012b4:	483f      	ldr	r0, [pc, #252]	; (80013b4 <main+0x224>)
 80012b6:	f005 fda9 	bl	8006e0c <siprintf>
//************************************************MOISTURE SENSOR****************************************************************************
	  //Value of ADC conversion automatically stored through DMA in the buffer
	  raw = adc_value[1];
 80012ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80012bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  //Rescaling raw value from ADC to represent the percent of moisture
	  moisture = (3396 - raw)/19;
 80012c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012c4:	f5c3 6354 	rsb	r3, r3, #3392	; 0xd40
 80012c8:	3304      	adds	r3, #4
 80012ca:	4a3b      	ldr	r2, [pc, #236]	; (80013b8 <main+0x228>)
 80012cc:	fba2 1203 	umull	r1, r2, r2, r3
 80012d0:	1a9b      	subs	r3, r3, r2
 80012d2:	085b      	lsrs	r3, r3, #1
 80012d4:	4413      	add	r3, r2
 80012d6:	091b      	lsrs	r3, r3, #4
 80012d8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	  sprintf(buffer,"%d ",moisture);
 80012dc:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80012e0:	463b      	mov	r3, r7
 80012e2:	4936      	ldr	r1, [pc, #216]	; (80013bc <main+0x22c>)
 80012e4:	4618      	mov	r0, r3
 80012e6:	f005 fd91 	bl	8006e0c <siprintf>
	  strcat(msg, buffer);
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4831      	ldr	r0, [pc, #196]	; (80013b4 <main+0x224>)
 80012f0:	f005 fdac 	bl	8006e4c <strcat>

//************************************************TEMPERATURE SENSORS*************************************************************************
	  //Stop ADC conversion to prevent interrupts during microseconds delay
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012f8:	482c      	ldr	r0, [pc, #176]	; (80013ac <main+0x21c>)
 80012fa:	f001 f900 	bl	80024fe <HAL_ADC_PollForConversion>
	  HAL_ADC_Stop(&hadc1);
 80012fe:	482b      	ldr	r0, [pc, #172]	; (80013ac <main+0x21c>)
 8001300:	f001 f8ca 	bl	8002498 <HAL_ADC_Stop>
	  //Start sensor communication
		for(int j = 0;j < 2;j++)
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800130a:	e025      	b.n	8001358 <main+0x1c8>
		{
		  //Procedura resetowania linii danych
		  Start_DS18B20();
 800130c:	f7ff fe5c 	bl	8000fc8 <Start_DS18B20>
		  //Dopasowanie kodu ROM
		  Write_Byte_DS18B20 (0x55);
 8001310:	2055      	movs	r0, #85	; 0x55
 8001312:	f7ff feb5 	bl	8001080 <Write_Byte_DS18B20>
		  //Wysłanie kodu ROM do czujnika z którym ma zostać nawiązana komunikacja
		  for(int i = 0; i < 8; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800131c:	e010      	b.n	8001340 <main+0x1b0>
		  {
			  Write_Byte_DS18B20(DS18B20_ROM_ADDR[j][i]);
 800131e:	4a28      	ldr	r2, [pc, #160]	; (80013c0 <main+0x230>)
 8001320:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	441a      	add	r2, r3
 8001328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fea5 	bl	8001080 <Write_Byte_DS18B20>
		  for(int i = 0; i < 8; i++)
 8001336:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800133a:	3301      	adds	r3, #1
 800133c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001340:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001344:	2b07      	cmp	r3, #7
 8001346:	ddea      	ble.n	800131e <main+0x18e>
		  }
		  //Rozpoczęcie konwersji temperatury
		  Write_Byte_DS18B20 (0x44);
 8001348:	2044      	movs	r0, #68	; 0x44
 800134a:	f7ff fe99 	bl	8001080 <Write_Byte_DS18B20>
		for(int j = 0;j < 2;j++)
 800134e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001352:	3301      	adds	r3, #1
 8001354:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001358:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800135c:	2b01      	cmp	r3, #1
 800135e:	ddd5      	ble.n	800130c <main+0x17c>
		}
		HAL_Delay (100);
 8001360:	2064      	movs	r0, #100	; 0x64
 8001362:	f000 ff6d 	bl	8002240 <HAL_Delay>
		// Po konwersji następuje odczyt pomiaru obu czujników
		for(int j = 0;j < 2;j++)
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800136c:	e070      	b.n	8001450 <main+0x2c0>
		{
		  //Procedura resetowania linii danych
		  Start_DS18B20();
 800136e:	f7ff fe2b 	bl	8000fc8 <Start_DS18B20>
		  //Komenda  dopasowania kodu ROM
		  Write_Byte_DS18B20 (0x55);
 8001372:	2055      	movs	r0, #85	; 0x55
 8001374:	f7ff fe84 	bl	8001080 <Write_Byte_DS18B20>
		  //Wysłanie kodu ROM do czujnika z którym ma zostać nawiązana komunikacja
		  for(int i = 0; i<8; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800137e:	e032      	b.n	80013e6 <main+0x256>
 8001380:	00000000 	.word	0x00000000
 8001384:	4098f000 	.word	0x4098f000
 8001388:	00000000 	.word	0x00000000
 800138c:	40cfd680 	.word	0x40cfd680
 8001390:	0c1fc8f3 	.word	0x0c1fc8f3
 8001394:	bff0773c 	.word	0xbff0773c
 8001398:	00000000 	.word	0x00000000
 800139c:	415287c3 	.word	0x415287c3
 80013a0:	20000418 	.word	0x20000418
 80013a4:	20000498 	.word	0x20000498
 80013a8:	20000458 	.word	0x20000458
 80013ac:	20000238 	.word	0x20000238
 80013b0:	08009b4c 	.word	0x08009b4c
 80013b4:	20000308 	.word	0x20000308
 80013b8:	af286bcb 	.word	0xaf286bcb
 80013bc:	08009b54 	.word	0x08009b54
 80013c0:	20000000 	.word	0x20000000
			  {
				  Write_Byte_DS18B20(DS18B20_ROM_ADDR[j][i]);
 80013c4:	4a84      	ldr	r2, [pc, #528]	; (80015d8 <main+0x448>)
 80013c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	441a      	add	r2, r3
 80013ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fe52 	bl	8001080 <Write_Byte_DS18B20>
		  for(int i = 0; i<8; i++)
 80013dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013e0:	3301      	adds	r3, #1
 80013e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80013e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80013ea:	2b07      	cmp	r3, #7
 80013ec:	ddea      	ble.n	80013c4 <main+0x234>
			  }
		  //Rozpoczęcie transmisji danych z czujnika do mikrokontrolera
		  Write_Byte_DS18B20 (0xBE);
 80013ee:	20be      	movs	r0, #190	; 0xbe
 80013f0:	f7ff fe46 	bl	8001080 <Write_Byte_DS18B20>
		  //Odebranie 8 bitów z informacją o temperaturze oraz bitu CRC
		  Temp_byte1 = Read_DS18B20();
 80013f4:	f7ff fe8a 	bl	800110c <Read_DS18B20>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	4b77      	ldr	r3, [pc, #476]	; (80015dc <main+0x44c>)
 80013fe:	701a      	strb	r2, [r3, #0]
		  //Odebranie 8 bitów z informacją o temperaturze oraz bitu CRC
		  Temp_byte2 = Read_DS18B20();
 8001400:	f7ff fe84 	bl	800110c <Read_DS18B20>
 8001404:	4603      	mov	r3, r0
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b75      	ldr	r3, [pc, #468]	; (80015e0 <main+0x450>)
 800140a:	701a      	strb	r2, [r3, #0]
		  //Suma logiczna z przesunięciem bajtów dająca wartość 16 bitową
		  Temp = (Temp_byte2 << 8) | Temp_byte1;
 800140c:	4b74      	ldr	r3, [pc, #464]	; (80015e0 <main+0x450>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b21a      	sxth	r2, r3
 8001414:	4b71      	ldr	r3, [pc, #452]	; (80015dc <main+0x44c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b21b      	sxth	r3, r3
 800141a:	4313      	orrs	r3, r2
 800141c:	b21b      	sxth	r3, r3
 800141e:	b29a      	uxth	r2, r3
 8001420:	4b70      	ldr	r3, [pc, #448]	; (80015e4 <main+0x454>)
 8001422:	801a      	strh	r2, [r3, #0]
		  //Konwersja wartości w postaci uint16_t na wartość 12 bitową typu float
		  //Temperatures[j] = (float)Temp/16;
		  Temperatures[j] = (float)Temp/16;
 8001424:	4b6f      	ldr	r3, [pc, #444]	; (80015e4 <main+0x454>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001430:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001438:	4a6b      	ldr	r2, [pc, #428]	; (80015e8 <main+0x458>)
 800143a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0;j < 2;j++)
 8001446:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800144a:	3301      	adds	r3, #1
 800144c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001454:	2b01      	cmp	r3, #1
 8001456:	dd8a      	ble.n	800136e <main+0x1de>
		}
	  __HAL_ADC_ENABLE_IT(&hadc1, ADC_IT_OVR);
 8001458:	4b64      	ldr	r3, [pc, #400]	; (80015ec <main+0x45c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4b63      	ldr	r3, [pc, #396]	; (80015ec <main+0x45c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001466:	605a      	str	r2, [r3, #4]
	  sprintf(buffer, "%.2f " ,Temperatures[0]);
 8001468:	4b5f      	ldr	r3, [pc, #380]	; (80015e8 <main+0x458>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f88b 	bl	8000588 <__aeabi_f2d>
 8001472:	4603      	mov	r3, r0
 8001474:	460c      	mov	r4, r1
 8001476:	4638      	mov	r0, r7
 8001478:	461a      	mov	r2, r3
 800147a:	4623      	mov	r3, r4
 800147c:	495c      	ldr	r1, [pc, #368]	; (80015f0 <main+0x460>)
 800147e:	f005 fcc5 	bl	8006e0c <siprintf>
	  strcat(msg, buffer);
 8001482:	463b      	mov	r3, r7
 8001484:	4619      	mov	r1, r3
 8001486:	485b      	ldr	r0, [pc, #364]	; (80015f4 <main+0x464>)
 8001488:	f005 fce0 	bl	8006e4c <strcat>
	  sprintf(buffer, "%.2f",Temperatures[1]);
 800148c:	4b56      	ldr	r3, [pc, #344]	; (80015e8 <main+0x458>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f879 	bl	8000588 <__aeabi_f2d>
 8001496:	4603      	mov	r3, r0
 8001498:	460c      	mov	r4, r1
 800149a:	4638      	mov	r0, r7
 800149c:	461a      	mov	r2, r3
 800149e:	4623      	mov	r3, r4
 80014a0:	4955      	ldr	r1, [pc, #340]	; (80015f8 <main+0x468>)
 80014a2:	f005 fcb3 	bl	8006e0c <siprintf>
	  strcat(msg, buffer);
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4852      	ldr	r0, [pc, #328]	; (80015f4 <main+0x464>)
 80014ac:	f005 fcce 	bl	8006e4c <strcat>
	  HAL_ADC_Start(&hadc1);
 80014b0:	484e      	ldr	r0, [pc, #312]	; (80015ec <main+0x45c>)
 80014b2:	f000 ff2b 	bl	800230c <HAL_ADC_Start>
//************************************************BLUETOOTH COMMUNICATION*********************************************************************
	  UART1_IRQHandler();
 80014b6:	f7ff fd37 	bl	8000f28 <UART1_IRQHandler>
	  sprintf(T_msg,"Buffer: %d",buffer_index);
 80014ba:	4b50      	ldr	r3, [pc, #320]	; (80015fc <main+0x46c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	494f      	ldr	r1, [pc, #316]	; (8001600 <main+0x470>)
 80014c2:	4850      	ldr	r0, [pc, #320]	; (8001604 <main+0x474>)
 80014c4:	f005 fca2 	bl	8006e0c <siprintf>

//************************************************REAL-TIME CLOCK*******************************************************************************
	  //Get current time
	  get_time();
 80014c8:	f000 fde8 	bl	800209c <get_time>
	  sprintf(buffer, "%s ", (char*)time);
 80014cc:	463b      	mov	r3, r7
 80014ce:	4a4e      	ldr	r2, [pc, #312]	; (8001608 <main+0x478>)
 80014d0:	494e      	ldr	r1, [pc, #312]	; (800160c <main+0x47c>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f005 fc9a 	bl	8006e0c <siprintf>
	  //strcat(msg,buffer);
	  sprintf(buffer, "%s ", (char*)date);
 80014d8:	463b      	mov	r3, r7
 80014da:	4a4d      	ldr	r2, [pc, #308]	; (8001610 <main+0x480>)
 80014dc:	494b      	ldr	r1, [pc, #300]	; (800160c <main+0x47c>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f005 fc94 	bl	8006e0c <siprintf>
	  //strcat(msg,buffer);
//************************************************UART TRAMSMIT*******************************************************************************
	  loop_duration = __HAL_TIM_GET_COUNTER(&htim11);
 80014e4:	4b4b      	ldr	r3, [pc, #300]	; (8001614 <main+0x484>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  sprintf(buffer, " %ld ",loop_duration);
 80014ee:	463b      	mov	r3, r7
 80014f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80014f4:	4948      	ldr	r1, [pc, #288]	; (8001618 <main+0x488>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 fc88 	bl	8006e0c <siprintf>
	  //strcat(msg, buffer);
	  strcat(msg, "\r\n");
 80014fc:	483d      	ldr	r0, [pc, #244]	; (80015f4 <main+0x464>)
 80014fe:	f7fe fe87 	bl	8000210 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <main+0x464>)
 8001508:	4413      	add	r3, r2
 800150a:	4a44      	ldr	r2, [pc, #272]	; (800161c <main+0x48c>)
 800150c:	8811      	ldrh	r1, [r2, #0]
 800150e:	7892      	ldrb	r2, [r2, #2]
 8001510:	8019      	strh	r1, [r3, #0]
 8001512:	709a      	strb	r2, [r3, #2]
	  //Transmit to PC serial port
	  HAL_UART_Transmit(&huart2, (char*)msg,strlen((char*)msg), HAL_MAX_DELAY);
 8001514:	4837      	ldr	r0, [pc, #220]	; (80015f4 <main+0x464>)
 8001516:	f7fe fe7b 	bl	8000210 <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	b29a      	uxth	r2, r3
 800151e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001522:	4934      	ldr	r1, [pc, #208]	; (80015f4 <main+0x464>)
 8001524:	483e      	ldr	r0, [pc, #248]	; (8001620 <main+0x490>)
 8001526:	f003 ffd8 	bl	80054da <HAL_UART_Transmit>
	  //Transmit to Bluetooth module
	  HAL_UART_Transmit(&huart1, (char*)msg,strlen((char*)msg), HAL_MAX_DELAY);
 800152a:	4832      	ldr	r0, [pc, #200]	; (80015f4 <main+0x464>)
 800152c:	f7fe fe70 	bl	8000210 <strlen>
 8001530:	4603      	mov	r3, r0
 8001532:	b29a      	uxth	r2, r3
 8001534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001538:	492e      	ldr	r1, [pc, #184]	; (80015f4 <main+0x464>)
 800153a:	483a      	ldr	r0, [pc, #232]	; (8001624 <main+0x494>)
 800153c:	f003 ffcd 	bl	80054da <HAL_UART_Transmit>
	  //Irrigation algorithm
	  if (moisture < 40)
 8001540:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001544:	2b27      	cmp	r3, #39	; 0x27
 8001546:	d802      	bhi.n	800154e <main+0x3be>
		  irrigation = 1;
 8001548:	2301      	movs	r3, #1
 800154a:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	  if (moisture > 70)
 800154e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001552:	2b46      	cmp	r3, #70	; 0x46
 8001554:	d902      	bls.n	800155c <main+0x3cc>
	  	  irrigation = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6
	  //If conditions met start irrigation
	  if(__HAL_TIM_GET_COUNTER(&htim13) > 55000 && irrigation == 1)
 800155c:	4b32      	ldr	r3, [pc, #200]	; (8001628 <main+0x498>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 8001566:	4293      	cmp	r3, r2
 8001568:	d914      	bls.n	8001594 <main+0x404>
 800156a:	f897 30a6 	ldrb.w	r3, [r7, #166]	; 0xa6
 800156e:	2b01      	cmp	r3, #1
 8001570:	d110      	bne.n	8001594 <main+0x404>
	  {
		  __HAL_TIM_SET_COUNTER(&htim13, 0);
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <main+0x498>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	; 0x24
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1 );
 800157a:	2201      	movs	r2, #1
 800157c:	2110      	movs	r1, #16
 800157e:	482b      	ldr	r0, [pc, #172]	; (800162c <main+0x49c>)
 8001580:	f002 fa4e 	bl	8003a20 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1 );
 8001584:	2201      	movs	r2, #1
 8001586:	2120      	movs	r1, #32
 8001588:	4828      	ldr	r0, [pc, #160]	; (800162c <main+0x49c>)
 800158a:	f002 fa49 	bl	8003a20 <HAL_GPIO_WritePin>
		  state = 1;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	  }
	  //If conditions met stop irrigation
	  if(state == 1 && __HAL_TIM_GET_COUNTER(&htim13) > 5000 )
 8001594:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001598:	2b01      	cmp	r3, #1
 800159a:	d113      	bne.n	80015c4 <main+0x434>
 800159c:	4b22      	ldr	r3, [pc, #136]	; (8001628 <main+0x498>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d90c      	bls.n	80015c4 <main+0x434>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0 );
 80015aa:	2200      	movs	r2, #0
 80015ac:	2110      	movs	r1, #16
 80015ae:	481f      	ldr	r0, [pc, #124]	; (800162c <main+0x49c>)
 80015b0:	f002 fa36 	bl	8003a20 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0 );
 80015b4:	2200      	movs	r2, #0
 80015b6:	2120      	movs	r1, #32
 80015b8:	481c      	ldr	r0, [pc, #112]	; (800162c <main+0x49c>)
 80015ba:	f002 fa31 	bl	8003a20 <HAL_GPIO_WritePin>
		  state = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	  }
	  while((__HAL_TIM_GET_COUNTER(&htim11))< 999);
 80015c4:	bf00      	nop
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <main+0x484>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	f240 32e6 	movw	r2, #998	; 0x3e6
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d9f8      	bls.n	80015c6 <main+0x436>
	  __HAL_TIM_SET_COUNTER(&htim11, 0);
 80015d4:	e60f      	b.n	80011f6 <main+0x66>
 80015d6:	bf00      	nop
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000408 	.word	0x20000408
 80015e0:	20000414 	.word	0x20000414
 80015e4:	20000304 	.word	0x20000304
 80015e8:	2000040c 	.word	0x2000040c
 80015ec:	20000238 	.word	0x20000238
 80015f0:	08009b58 	.word	0x08009b58
 80015f4:	20000308 	.word	0x20000308
 80015f8:	08009b60 	.word	0x08009b60
 80015fc:	20000301 	.word	0x20000301
 8001600:	08009b68 	.word	0x08009b68
 8001604:	200002e0 	.word	0x200002e0
 8001608:	20000558 	.word	0x20000558
 800160c:	08009b74 	.word	0x08009b74
 8001610:	200005a8 	.word	0x200005a8
 8001614:	20000498 	.word	0x20000498
 8001618:	08009b78 	.word	0x08009b78
 800161c:	08009b80 	.word	0x08009b80
 8001620:	20000568 	.word	0x20000568
 8001624:	20000280 	.word	0x20000280
 8001628:	20000458 	.word	0x20000458
 800162c:	40020000 	.word	0x40020000

08001630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0ac      	sub	sp, #176	; 0xb0
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800163a:	2234      	movs	r2, #52	; 0x34
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f004 ff80 	bl	8006544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001654:	f107 030c 	add.w	r3, r7, #12
 8001658:	225c      	movs	r2, #92	; 0x5c
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f004 ff71 	bl	8006544 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b38      	ldr	r3, [pc, #224]	; (8001748 <SystemClock_Config+0x118>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	4a37      	ldr	r2, [pc, #220]	; (8001748 <SystemClock_Config+0x118>)
 800166c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001670:	6413      	str	r3, [r2, #64]	; 0x40
 8001672:	4b35      	ldr	r3, [pc, #212]	; (8001748 <SystemClock_Config+0x118>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b32      	ldr	r3, [pc, #200]	; (800174c <SystemClock_Config+0x11c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800168a:	4a30      	ldr	r2, [pc, #192]	; (800174c <SystemClock_Config+0x11c>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b2e      	ldr	r3, [pc, #184]	; (800174c <SystemClock_Config+0x11c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800169e:	2309      	movs	r3, #9
 80016a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016c4:	2304      	movs	r3, #4
 80016c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80016ca:	2332      	movs	r3, #50	; 0x32
 80016cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016dc:	2302      	movs	r3, #2
 80016de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 ff98 	bl	800461c <HAL_RCC_OscConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016f2:	f000 f99d 	bl	8001a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f6:	230f      	movs	r3, #15
 80016f8:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016fa:	2302      	movs	r3, #2
 80016fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001706:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800170c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001710:	2101      	movs	r1, #1
 8001712:	4618      	mov	r0, r3
 8001714:	f002 f99e 	bl	8003a54 <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800171e:	f000 f987 	bl	8001a30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001722:	2320      	movs	r3, #32
 8001724:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800172a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4618      	mov	r0, r3
 8001732:	f002 faa9 	bl	8003c88 <HAL_RCCEx_PeriphCLKConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800173c:	f000 f978 	bl	8001a30 <Error_Handler>
  }
}
 8001740:	bf00      	nop
 8001742:	37b0      	adds	r7, #176	; 0xb0
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000

08001750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001756:	463b      	mov	r3, r7
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <MX_ADC1_Init+0xb4>)
 8001764:	4a28      	ldr	r2, [pc, #160]	; (8001808 <MX_ADC1_Init+0xb8>)
 8001766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <MX_ADC1_Init+0xb4>)
 800176a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800176e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <MX_ADC1_Init+0xb4>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001776:	4b23      	ldr	r3, [pc, #140]	; (8001804 <MX_ADC1_Init+0xb4>)
 8001778:	2201      	movs	r2, #1
 800177a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800177c:	4b21      	ldr	r3, [pc, #132]	; (8001804 <MX_ADC1_Init+0xb4>)
 800177e:	2201      	movs	r2, #1
 8001780:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <MX_ADC1_Init+0xb4>)
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <MX_ADC1_Init+0xb4>)
 800178c:	2200      	movs	r2, #0
 800178e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001790:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <MX_ADC1_Init+0xb4>)
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <MX_ADC1_Init+0xbc>)
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_ADC1_Init+0xb4>)
 8001798:	2200      	movs	r2, #0
 800179a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <MX_ADC1_Init+0xb4>)
 800179e:	2202      	movs	r2, #2
 80017a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_ADC1_Init+0xb4>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_ADC1_Init+0xb4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017b0:	4814      	ldr	r0, [pc, #80]	; (8001804 <MX_ADC1_Init+0xb4>)
 80017b2:	f000 fd67 	bl	8002284 <HAL_ADC_Init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017bc:	f000 f938 	bl	8001a30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017c4:	2301      	movs	r3, #1
 80017c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80017c8:	2303      	movs	r3, #3
 80017ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	480c      	ldr	r0, [pc, #48]	; (8001804 <MX_ADC1_Init+0xb4>)
 80017d2:	f001 f829 	bl	8002828 <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017dc:	f000 f928 	bl	8001a30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017e0:	2301      	movs	r3, #1
 80017e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017e4:	2302      	movs	r3, #2
 80017e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_ADC1_Init+0xb4>)
 80017ee:	f001 f81b 	bl	8002828 <HAL_ADC_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80017f8:	f000 f91a 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000238 	.word	0x20000238
 8001808:	40012000 	.word	0x40012000
 800180c:	0f000001 	.word	0x0f000001

08001810 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001814:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <MX_TIM13_Init+0x40>)
 8001816:	4a0f      	ldr	r2, [pc, #60]	; (8001854 <MX_TIM13_Init+0x44>)
 8001818:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 500000-1;
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <MX_TIM13_Init+0x40>)
 800181c:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <MX_TIM13_Init+0x48>)
 800181e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <MX_TIM13_Init+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <MX_TIM13_Init+0x40>)
 8001828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <MX_TIM13_Init+0x40>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_TIM13_Init+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	; (8001850 <MX_TIM13_Init+0x40>)
 800183c:	f003 fc94 	bl	8005168 <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001846:	f000 f8f3 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000458 	.word	0x20000458
 8001854:	40001c00 	.word	0x40001c00
 8001858:	0007a11f 	.word	0x0007a11f

0800185c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_USART1_UART_Init+0x4c>)
 8001862:	4a12      	ldr	r2, [pc, #72]	; (80018ac <MX_USART1_UART_Init+0x50>)
 8001864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <MX_USART1_UART_Init+0x4c>)
 8001868:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800186c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_USART1_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_USART1_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_USART1_UART_Init+0x4c>)
 8001882:	220c      	movs	r2, #12
 8001884:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_USART1_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_USART1_UART_Init+0x4c>)
 800188e:	2200      	movs	r2, #0
 8001890:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_USART1_UART_Init+0x4c>)
 8001894:	f003 fdd4 	bl	8005440 <HAL_UART_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800189e:	f000 f8c7 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000280 	.word	0x20000280
 80018ac:	40011000 	.word	0x40011000

080018b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <MX_USART2_UART_Init+0x50>)
 80018b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018d4:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018d6:	220c      	movs	r2, #12
 80018d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e6:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_USART2_UART_Init+0x4c>)
 80018e8:	f003 fdaa 	bl	8005440 <HAL_UART_Init>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018f2:	f000 f89d 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000568 	.word	0x20000568
 8001900:	40004400 	.word	0x40004400

08001904 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_DMA_Init+0x3c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <MX_DMA_Init+0x3c>)
 8001914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_DMA_Init+0x3c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001926:	2200      	movs	r2, #0
 8001928:	2100      	movs	r1, #0
 800192a:	2038      	movs	r0, #56	; 0x38
 800192c:	f001 fb07 	bl	8002f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001930:	2038      	movs	r0, #56	; 0x38
 8001932:	f001 fb20 	bl	8002f76 <HAL_NVIC_EnableIRQ>

}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <MX_GPIO_Init+0xe0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a30      	ldr	r2, [pc, #192]	; (8001a24 <MX_GPIO_Init+0xe0>)
 8001964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <MX_GPIO_Init+0xe0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	60bb      	str	r3, [r7, #8]
 8001974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <MX_GPIO_Init+0xe0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a29      	ldr	r2, [pc, #164]	; (8001a24 <MX_GPIO_Init+0xe0>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <MX_GPIO_Init+0xe0>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <MX_GPIO_Init+0xe0>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a22      	ldr	r2, [pc, #136]	; (8001a24 <MX_GPIO_Init+0xe0>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <MX_GPIO_Init+0xe0>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 7198 	mov.w	r1, #304	; 0x130
 80019b4:	481c      	ldr	r0, [pc, #112]	; (8001a28 <MX_GPIO_Init+0xe4>)
 80019b6:	f002 f833 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2111      	movs	r1, #17
 80019be:	481b      	ldr	r0, [pc, #108]	; (8001a2c <MX_GPIO_Init+0xe8>)
 80019c0:	f002 f82e 	bl	8003a20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019c4:	2310      	movs	r3, #16
 80019c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019cc:	2302      	movs	r3, #2
 80019ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	4619      	mov	r1, r3
 80019da:	4813      	ldr	r0, [pc, #76]	; (8001a28 <MX_GPIO_Init+0xe4>)
 80019dc:	f001 fe76 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 80019e0:	f44f 7390 	mov.w	r3, #288	; 0x120
 80019e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	4619      	mov	r1, r3
 80019f8:	480b      	ldr	r0, [pc, #44]	; (8001a28 <MX_GPIO_Init+0xe4>)
 80019fa:	f001 fe67 	bl	80036cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80019fe:	2311      	movs	r3, #17
 8001a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	2301      	movs	r3, #1
 8001a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	f107 030c 	add.w	r3, r7, #12
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <MX_GPIO_Init+0xe8>)
 8001a16:	f001 fe59 	bl	80036cc <HAL_GPIO_Init>

}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400

08001a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
	...

08001a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a0f      	ldr	r2, [pc, #60]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a08      	ldr	r2, [pc, #32]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_MspInit+0x4c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800

08001a90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08a      	sub	sp, #40	; 0x28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a2f      	ldr	r2, [pc, #188]	; (8001b6c <HAL_ADC_MspInit+0xdc>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d157      	bne.n	8001b62 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <HAL_ADC_MspInit+0xe0>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <HAL_ADC_MspInit+0xe0>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac2:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <HAL_ADC_MspInit+0xe0>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_ADC_MspInit+0xe0>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <HAL_ADC_MspInit+0xe0>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_ADC_MspInit+0xe0>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aea:	2303      	movs	r3, #3
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aee:	2303      	movs	r3, #3
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	481d      	ldr	r0, [pc, #116]	; (8001b74 <HAL_ADC_MspInit+0xe4>)
 8001afe:	f001 fde5 	bl	80036cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b04:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <HAL_ADC_MspInit+0xec>)
 8001b06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b46:	480c      	ldr	r0, [pc, #48]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b48:	f001 fa30 	bl	8002fac <HAL_DMA_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001b52:	f7ff ff6d 	bl	8001a30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b5a:	639a      	str	r2, [r3, #56]	; 0x38
 8001b5c:	4a06      	ldr	r2, [pc, #24]	; (8001b78 <HAL_ADC_MspInit+0xe8>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	; 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40012000 	.word	0x40012000
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	200004d8 	.word	0x200004d8
 8001b7c:	40026410 	.word	0x40026410

08001b80 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <HAL_RTC_MspInit+0x24>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d102      	bne.n	8001b98 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RTC_MspInit+0x28>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40002800 	.word	0x40002800
 8001ba8:	42470e3c 	.word	0x42470e3c

08001bac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_TIM_Base_MspInit+0x8c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d10e      	bne.n	8001bdc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001bda:	e026      	b.n	8001c2a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM11)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a17      	ldr	r2, [pc, #92]	; (8001c40 <HAL_TIM_Base_MspInit+0x94>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d10e      	bne.n	8001c04 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]
}
 8001c02:	e012      	b.n	8001c2a <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM13)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <HAL_TIM_Base_MspInit+0x98>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d10d      	bne.n	8001c2a <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a09      	ldr	r2, [pc, #36]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_TIM_Base_MspInit+0x90>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	bf00      	nop
 8001c2c:	371c      	adds	r7, #28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40014400 	.word	0x40014400
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40014800 	.word	0x40014800
 8001c44:	40001c00 	.word	0x40001c00

08001c48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08c      	sub	sp, #48	; 0x30
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a36      	ldr	r2, [pc, #216]	; (8001d40 <HAL_UART_MspInit+0xf8>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d135      	bne.n	8001cd6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	4b35      	ldr	r3, [pc, #212]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001c74:	f043 0310 	orr.w	r3, r3, #16
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	61bb      	str	r3, [r7, #24]
 8001c84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	4b2e      	ldr	r3, [pc, #184]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a2d      	ldr	r2, [pc, #180]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ca2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4822      	ldr	r0, [pc, #136]	; (8001d48 <HAL_UART_MspInit+0x100>)
 8001cc0:	f001 fd04 	bl	80036cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2025      	movs	r0, #37	; 0x25
 8001cca:	f001 f938 	bl	8002f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cce:	2025      	movs	r0, #37	; 0x25
 8001cd0:	f001 f951 	bl	8002f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cd4:	e030      	b.n	8001d38 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_UART_MspInit+0x104>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d12b      	bne.n	8001d38 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	4a16      	ldr	r2, [pc, #88]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cee:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf8:	613b      	str	r3, [r7, #16]
 8001cfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	4a0f      	ldr	r2, [pc, #60]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_UART_MspInit+0xfc>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d18:	230c      	movs	r3, #12
 8001d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d28:	2307      	movs	r3, #7
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	4619      	mov	r1, r3
 8001d32:	4805      	ldr	r0, [pc, #20]	; (8001d48 <HAL_UART_MspInit+0x100>)
 8001d34:	f001 fcca 	bl	80036cc <HAL_GPIO_Init>
}
 8001d38:	bf00      	nop
 8001d3a:	3730      	adds	r7, #48	; 0x30
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40011000 	.word	0x40011000
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40004400 	.word	0x40004400

08001d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da4:	f000 fa2c 	bl	8002200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}

08001dac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <USART1_IRQHandler+0x10>)
 8001db2:	f003 fcd1 	bl	8005758 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000280 	.word	0x20000280

08001dc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <DMA2_Stream0_IRQHandler+0x10>)
 8001dc6:	f001 fa19 	bl	80031fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200004d8 	.word	0x200004d8

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f004 fb74 	bl	80064f0 <__errno>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20020000 	.word	0x20020000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	20000220 	.word	0x20000220
 8001e3c:	20002630 	.word	0x20002630

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <SystemInit+0x28>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <SystemInit+0x28>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SystemInit+0x28>)
 8001e56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e5a:	609a      	str	r2, [r3, #8]
#endif
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <MX_TIM10_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM10_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e72:	463b      	mov	r3, r7
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim10.Instance = TIM10;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <MX_TIM10_Init+0x64>)
 8001e7c:	4a15      	ldr	r2, [pc, #84]	; (8001ed4 <MX_TIM10_Init+0x68>)
 8001e7e:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 50-1;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <MX_TIM10_Init+0x64>)
 8001e82:	2231      	movs	r2, #49	; 0x31
 8001e84:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <MX_TIM10_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 0xffff-1;
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <MX_TIM10_Init+0x64>)
 8001e8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001e92:	60da      	str	r2, [r3, #12]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_TIM10_Init+0x64>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e9a:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <MX_TIM10_Init+0x64>)
 8001e9c:	f003 f964 	bl	8005168 <HAL_TIM_Base_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM10_Init+0x3e>
  {
    Error_Handler();
 8001ea6:	f7ff fdc3 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim10, &sMasterConfig) != HAL_OK)
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4806      	ldr	r0, [pc, #24]	; (8001ed0 <MX_TIM10_Init+0x64>)
 8001eb8:	f003 fa46 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM10_Init+0x5a>
  {
    Error_Handler();
 8001ec2:	f7ff fdb5 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000418 	.word	0x20000418
 8001ed4:	40014400 	.word	0x40014400

08001ed8 <MX_TIM11_Init>:
void MX_TIM11_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ede:	463b      	mov	r3, r7
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim11.Instance = TIM11;
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <MX_TIM11_Init+0x64>)
 8001ee8:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <MX_TIM11_Init+0x68>)
 8001eea:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 50000-1;
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <MX_TIM11_Init+0x64>)
 8001eee:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001ef2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_TIM11_Init+0x64>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 0xffff-1;
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_TIM11_Init+0x64>)
 8001efc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f00:	60da      	str	r2, [r3, #12]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_TIM11_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f08:	480c      	ldr	r0, [pc, #48]	; (8001f3c <MX_TIM11_Init+0x64>)
 8001f0a:	f003 f92d 	bl	8005168 <HAL_TIM_Base_Init>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM11_Init+0x40>
  {
    Error_Handler();
 8001f14:	f7ff fd8c 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim10, &sMasterConfig) != HAL_OK)
 8001f20:	463b      	mov	r3, r7
 8001f22:	4619      	mov	r1, r3
 8001f24:	4807      	ldr	r0, [pc, #28]	; (8001f44 <MX_TIM11_Init+0x6c>)
 8001f26:	f003 fa0f 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 8001f30:	f7ff fd7e 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000498 	.word	0x20000498
 8001f40:	40014800 	.word	0x40014800
 8001f44:	20000418 	.word	0x20000418

08001f48 <delay>:
//USING PERIPHERIAL TIMER FOR DELAY
void delay (uint32_t time)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
   __HAL_TIM_SET_COUNTER(&htim10, 0);
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <delay+0x2c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2200      	movs	r2, #0
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
   while((__HAL_TIM_GET_COUNTER(&htim10))<time);
 8001f58:	bf00      	nop
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <delay+0x2c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d8f9      	bhi.n	8001f5a <delay+0x12>
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000418 	.word	0x20000418

08001f78 <MX_RTC_Init>:

void MX_RTC_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <MX_RTC_Init+0xac>)
 8001f92:	4a25      	ldr	r2, [pc, #148]	; (8002028 <MX_RTC_Init+0xb0>)
 8001f94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f96:	4b23      	ldr	r3, [pc, #140]	; (8002024 <MX_RTC_Init+0xac>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <MX_RTC_Init+0xac>)
 8001f9e:	227f      	movs	r2, #127	; 0x7f
 8001fa0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <MX_RTC_Init+0xac>)
 8001fa4:	22ff      	movs	r2, #255	; 0xff
 8001fa6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <MX_RTC_Init+0xac>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <MX_RTC_Init+0xac>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <MX_RTC_Init+0xac>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001fba:	481a      	ldr	r0, [pc, #104]	; (8002024 <MX_RTC_Init+0xac>)
 8001fbc:	f002 fd88 	bl	8004ad0 <HAL_RTC_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001fc6:	f7ff fd33 	bl	8001a30 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480f      	ldr	r0, [pc, #60]	; (8002024 <MX_RTC_Init+0xac>)
 8001fe6:	f002 fe04 	bl	8004bf2 <HAL_RTC_SetTime>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001ff0:	f7ff fd1e 	bl	8001a30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002000:	2300      	movs	r3, #0
 8002002:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002004:	463b      	mov	r3, r7
 8002006:	2201      	movs	r2, #1
 8002008:	4619      	mov	r1, r3
 800200a:	4806      	ldr	r0, [pc, #24]	; (8002024 <MX_RTC_Init+0xac>)
 800200c:	f002 ff0c 	bl	8004e28 <HAL_RTC_SetDate>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002016:	f7ff fd0b 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000538 	.word	0x20000538
 8002028:	40002800 	.word	0x40002800

0800202c <set_time>:
void set_time (void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sTime.Hours = 0x21;
 8002032:	2321      	movs	r3, #33	; 0x21
 8002034:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x04;
 8002036:	2304      	movs	r3, #4
 8002038:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x00;
 800203a:	2300      	movs	r3, #0
 800203c:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2201      	movs	r2, #1
 800204a:	4619      	mov	r1, r3
 800204c:	4812      	ldr	r0, [pc, #72]	; (8002098 <set_time+0x6c>)
 800204e:	f002 fdd0 	bl	8004bf2 <HAL_RTC_SetTime>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <set_time+0x30>
	{
	  Error_Handler();
 8002058:	f7ff fcea 	bl	8001a30 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800205c:	2301      	movs	r3, #1
 800205e:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_DECEMBER;
 8002060:	2312      	movs	r3, #18
 8002062:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x14;
 8002064:	2314      	movs	r3, #20
 8002066:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x20;
 8002068:	2320      	movs	r3, #32
 800206a:	70fb      	strb	r3, [r7, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800206c:	463b      	mov	r3, r7
 800206e:	2201      	movs	r2, #1
 8002070:	4619      	mov	r1, r3
 8002072:	4809      	ldr	r0, [pc, #36]	; (8002098 <set_time+0x6c>)
 8002074:	f002 fed8 	bl	8004e28 <HAL_RTC_SetDate>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <set_time+0x56>
	{
	  Error_Handler();
 800207e:	f7ff fcd7 	bl	8001a30 <Error_Handler>
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 8002082:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8002086:	2101      	movs	r1, #1
 8002088:	4803      	ldr	r0, [pc, #12]	; (8002098 <set_time+0x6c>)
 800208a:	f003 f853 	bl	8005134 <HAL_RTCEx_BKUPWrite>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000538 	.word	0x20000538

0800209c <get_time>:

void get_time(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af02      	add	r7, sp, #8
	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;
	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80020a2:	463b      	mov	r3, r7
 80020a4:	2200      	movs	r2, #0
 80020a6:	4619      	mov	r1, r3
 80020a8:	4812      	ldr	r0, [pc, #72]	; (80020f4 <get_time+0x58>)
 80020aa:	f002 fe5f 	bl	8004d6c <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	2200      	movs	r2, #0
 80020b4:	4619      	mov	r1, r3
 80020b6:	480f      	ldr	r0, [pc, #60]	; (80020f4 <get_time+0x58>)
 80020b8:	f002 ff5d 	bl	8004f76 <HAL_RTC_GetDate>
	/* Display time Format: hh:mm:ss */
	sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80020bc:	783b      	ldrb	r3, [r7, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	787b      	ldrb	r3, [r7, #1]
 80020c2:	4619      	mov	r1, r3
 80020c4:	78bb      	ldrb	r3, [r7, #2]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	460b      	mov	r3, r1
 80020ca:	490b      	ldr	r1, [pc, #44]	; (80020f8 <get_time+0x5c>)
 80020cc:	480b      	ldr	r0, [pc, #44]	; (80020fc <get_time+0x60>)
 80020ce:	f004 fe9d 	bl	8006e0c <siprintf>
	/* Display date Format: dd-mm-yy */
	sprintf((char*)date,"%02d-%02d-%02d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 80020d2:	7dbb      	ldrb	r3, [r7, #22]
 80020d4:	461a      	mov	r2, r3
 80020d6:	7d7b      	ldrb	r3, [r7, #21]
 80020d8:	4619      	mov	r1, r3
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	460b      	mov	r3, r1
 80020e4:	4906      	ldr	r1, [pc, #24]	; (8002100 <get_time+0x64>)
 80020e6:	4807      	ldr	r0, [pc, #28]	; (8002104 <get_time+0x68>)
 80020e8:	f004 fe90 	bl	8006e0c <siprintf>
}
 80020ec:	bf00      	nop
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000538 	.word	0x20000538
 80020f8:	08009b84 	.word	0x08009b84
 80020fc:	20000558 	.word	0x20000558
 8002100:	08009b94 	.word	0x08009b94
 8002104:	200005a8 	.word	0x200005a8

08002108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002140 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800210c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800210e:	e003      	b.n	8002118 <LoopCopyDataInit>

08002110 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002112:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002114:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002116:	3104      	adds	r1, #4

08002118 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002118:	480b      	ldr	r0, [pc, #44]	; (8002148 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800211c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800211e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002120:	d3f6      	bcc.n	8002110 <CopyDataInit>
  ldr  r2, =_sbss
 8002122:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002124:	e002      	b.n	800212c <LoopFillZerobss>

08002126 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002126:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002128:	f842 3b04 	str.w	r3, [r2], #4

0800212c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800212e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002130:	d3f9      	bcc.n	8002126 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002132:	f7ff fe85 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002136:	f004 f9e1 	bl	80064fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213a:	f7ff f829 	bl	8001190 <main>
  bx  lr    
 800213e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002140:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002144:	08009e78 	.word	0x08009e78
  ldr  r0, =_sdata
 8002148:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800214c:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8002150:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 8002154:	20002630 	.word	0x20002630

08002158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC_IRQHandler>
	...

0800215c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002160:	4b0e      	ldr	r3, [pc, #56]	; (800219c <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0d      	ldr	r2, [pc, #52]	; (800219c <HAL_Init+0x40>)
 8002166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800216a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0a      	ldr	r2, [pc, #40]	; (800219c <HAL_Init+0x40>)
 8002172:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002176:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_Init+0x40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a07      	ldr	r2, [pc, #28]	; (800219c <HAL_Init+0x40>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002182:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002184:	2003      	movs	r0, #3
 8002186:	f000 fecf 	bl	8002f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800218a:	2000      	movs	r0, #0
 800218c:	f000 f808 	bl	80021a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002190:	f7ff fc56 	bl	8001a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40023c00 	.word	0x40023c00

080021a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_InitTick+0x54>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_InitTick+0x58>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	4619      	mov	r1, r3
 80021b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80021be:	4618      	mov	r0, r3
 80021c0:	f000 fee7 	bl	8002f92 <HAL_SYSTICK_Config>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00e      	b.n	80021ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b0f      	cmp	r3, #15
 80021d2:	d80a      	bhi.n	80021ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021d4:	2200      	movs	r2, #0
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021dc:	f000 feaf 	bl	8002f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HAL_InitTick+0x5c>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
 80021e8:	e000      	b.n	80021ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000010 	.word	0x20000010
 80021f8:	20000018 	.word	0x20000018
 80021fc:	20000014 	.word	0x20000014

08002200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x20>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_IncTick+0x24>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <HAL_IncTick+0x24>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000018 	.word	0x20000018
 8002224:	200005b8 	.word	0x200005b8

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <HAL_GetTick+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	200005b8 	.word	0x200005b8

08002240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff ffee 	bl	8002228 <HAL_GetTick>
 800224c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002258:	d005      	beq.n	8002266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_Delay+0x40>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002266:	bf00      	nop
 8002268:	f7ff ffde 	bl	8002228 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f7      	bhi.n	8002268 <HAL_Delay+0x28>
  {
  }
}
 8002278:	bf00      	nop
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000018 	.word	0x20000018

08002284 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e033      	b.n	8002302 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d109      	bne.n	80022b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff fbf4 	bl	8001a90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d118      	bne.n	80022f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022ca:	f023 0302 	bic.w	r3, r3, #2
 80022ce:	f043 0202 	orr.w	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fbd8 	bl	8002a8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f023 0303 	bic.w	r3, r3, #3
 80022ea:	f043 0201 	orr.w	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
 80022f2:	e001      	b.n	80022f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_ADC_Start+0x1a>
 8002322:	2302      	movs	r3, #2
 8002324:	e0a5      	b.n	8002472 <HAL_ADC_Start+0x166>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d018      	beq.n	800236e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800234c:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <HAL_ADC_Start+0x174>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a4c      	ldr	r2, [pc, #304]	; (8002484 <HAL_ADC_Start+0x178>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0c9a      	lsrs	r2, r3, #18
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002360:	e002      	b.n	8002368 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	3b01      	subs	r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d179      	bne.n	8002470 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002380:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002384:	f023 0301 	bic.w	r3, r3, #1
 8002388:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239a:	2b00      	cmp	r3, #0
 800239c:	d007      	beq.n	80023ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023ba:	d106      	bne.n	80023ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f023 0206 	bic.w	r2, r3, #6
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
 80023c8:	e002      	b.n	80023d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d8:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_ADC_Start+0x17c>)
 80023da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d12a      	bne.n	8002448 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a25      	ldr	r2, [pc, #148]	; (800248c <HAL_ADC_Start+0x180>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d015      	beq.n	8002428 <HAL_ADC_Start+0x11c>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a23      	ldr	r2, [pc, #140]	; (8002490 <HAL_ADC_Start+0x184>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d105      	bne.n	8002412 <HAL_ADC_Start+0x106>
 8002406:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_ADC_Start+0x17c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1f      	ldr	r2, [pc, #124]	; (8002494 <HAL_ADC_Start+0x188>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d129      	bne.n	8002470 <HAL_ADC_Start+0x164>
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <HAL_ADC_Start+0x17c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	2b0f      	cmp	r3, #15
 8002426:	d823      	bhi.n	8002470 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d11c      	bne.n	8002470 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002444:	609a      	str	r2, [r3, #8]
 8002446:	e013      	b.n	8002470 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0f      	ldr	r2, [pc, #60]	; (800248c <HAL_ADC_Start+0x180>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d10e      	bne.n	8002470 <HAL_ADC_Start+0x164>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d107      	bne.n	8002470 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800246e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000010 	.word	0x20000010
 8002484:	431bde83 	.word	0x431bde83
 8002488:	40012300 	.word	0x40012300
 800248c:	40012000 	.word	0x40012000
 8002490:	40012100 	.word	0x40012100
 8002494:	40012200 	.word	0x40012200

08002498 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_Stop+0x16>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e021      	b.n	80024f2 <HAL_ADC_Stop+0x5a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0201 	bic.w	r2, r2, #1
 80024c4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
 8002506:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800251a:	d113      	bne.n	8002544 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252a:	d10b      	bne.n	8002544 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	f043 0220 	orr.w	r2, r3, #32
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e05c      	b.n	80025fe <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002544:	f7ff fe70 	bl	8002228 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800254a:	e01a      	b.n	8002582 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002552:	d016      	beq.n	8002582 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d007      	beq.n	800256a <HAL_ADC_PollForConversion+0x6c>
 800255a:	f7ff fe65 	bl	8002228 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d20b      	bcs.n	8002582 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f043 0204 	orr.w	r2, r3, #4
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e03d      	b.n	80025fe <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b02      	cmp	r3, #2
 800258e:	d1dd      	bne.n	800254c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0212 	mvn.w	r2, #18
 8002598:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d123      	bne.n	80025fc <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d11f      	bne.n	80025fc <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d006      	beq.n	80025d8 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d111      	bne.n	80025fc <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d105      	bne.n	80025fc <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADC_Start_DMA+0x1e>
 8002622:	2302      	movs	r3, #2
 8002624:	e0cc      	b.n	80027c0 <HAL_ADC_Start_DMA+0x1b8>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b01      	cmp	r3, #1
 800263a:	d018      	beq.n	800266e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800264c:	4b5e      	ldr	r3, [pc, #376]	; (80027c8 <HAL_ADC_Start_DMA+0x1c0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5e      	ldr	r2, [pc, #376]	; (80027cc <HAL_ADC_Start_DMA+0x1c4>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0c9a      	lsrs	r2, r3, #18
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002660:	e002      	b.n	8002668 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	3b01      	subs	r3, #1
 8002666:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f9      	bne.n	8002662 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	f040 80a0 	bne.w	80027be <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026bc:	d106      	bne.n	80026cc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f023 0206 	bic.w	r2, r3, #6
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	645a      	str	r2, [r3, #68]	; 0x44
 80026ca:	e002      	b.n	80026d2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026da:	4b3d      	ldr	r3, [pc, #244]	; (80027d0 <HAL_ADC_Start_DMA+0x1c8>)
 80026dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e2:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <HAL_ADC_Start_DMA+0x1cc>)
 80026e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	4a3b      	ldr	r2, [pc, #236]	; (80027d8 <HAL_ADC_Start_DMA+0x1d0>)
 80026ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	4a3a      	ldr	r2, [pc, #232]	; (80027dc <HAL_ADC_Start_DMA+0x1d4>)
 80026f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800270e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800271e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	334c      	adds	r3, #76	; 0x4c
 800272a:	4619      	mov	r1, r3
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f000 fcea 	bl	8003108 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2b00      	cmp	r3, #0
 800273e:	d12a      	bne.n	8002796 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a26      	ldr	r2, [pc, #152]	; (80027e0 <HAL_ADC_Start_DMA+0x1d8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d015      	beq.n	8002776 <HAL_ADC_Start_DMA+0x16e>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <HAL_ADC_Start_DMA+0x1dc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d105      	bne.n	8002760 <HAL_ADC_Start_DMA+0x158>
 8002754:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <HAL_ADC_Start_DMA+0x1c8>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a20      	ldr	r2, [pc, #128]	; (80027e8 <HAL_ADC_Start_DMA+0x1e0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d129      	bne.n	80027be <HAL_ADC_Start_DMA+0x1b6>
 800276a:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_ADC_Start_DMA+0x1c8>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f003 031f 	and.w	r3, r3, #31
 8002772:	2b0f      	cmp	r3, #15
 8002774:	d823      	bhi.n	80027be <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d11c      	bne.n	80027be <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	e013      	b.n	80027be <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_ADC_Start_DMA+0x1d8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d10e      	bne.n	80027be <HAL_ADC_Start_DMA+0x1b6>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d107      	bne.n	80027be <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027bc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000010 	.word	0x20000010
 80027cc:	431bde83 	.word	0x431bde83
 80027d0:	40012300 	.word	0x40012300
 80027d4:	08002c85 	.word	0x08002c85
 80027d8:	08002d3f 	.word	0x08002d3f
 80027dc:	08002d5b 	.word	0x08002d5b
 80027e0:	40012000 	.word	0x40012000
 80027e4:	40012100 	.word	0x40012100
 80027e8:	40012200 	.word	0x40012200

080027ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x1c>
 8002840:	2302      	movs	r3, #2
 8002842:	e113      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x244>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b09      	cmp	r3, #9
 8002852:	d925      	bls.n	80028a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68d9      	ldr	r1, [r3, #12]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	3b1e      	subs	r3, #30
 800286a:	2207      	movs	r2, #7
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43da      	mvns	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	400a      	ands	r2, r1
 8002878:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68d9      	ldr	r1, [r3, #12]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	4603      	mov	r3, r0
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4403      	add	r3, r0
 8002892:	3b1e      	subs	r3, #30
 8002894:	409a      	lsls	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	e022      	b.n	80028e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6919      	ldr	r1, [r3, #16]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	2207      	movs	r2, #7
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	400a      	ands	r2, r1
 80028c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6919      	ldr	r1, [r3, #16]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4618      	mov	r0, r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4403      	add	r3, r0
 80028dc:	409a      	lsls	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d824      	bhi.n	8002938 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3b05      	subs	r3, #5
 8002900:	221f      	movs	r2, #31
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	400a      	ands	r2, r1
 800290e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	4618      	mov	r0, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	3b05      	subs	r3, #5
 800292a:	fa00 f203 	lsl.w	r2, r0, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	635a      	str	r2, [r3, #52]	; 0x34
 8002936:	e04c      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b0c      	cmp	r3, #12
 800293e:	d824      	bhi.n	800298a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b23      	subs	r3, #35	; 0x23
 8002952:	221f      	movs	r2, #31
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43da      	mvns	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	400a      	ands	r2, r1
 8002960:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	3b23      	subs	r3, #35	; 0x23
 800297c:	fa00 f203 	lsl.w	r2, r0, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
 8002988:	e023      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3b41      	subs	r3, #65	; 0x41
 800299c:	221f      	movs	r2, #31
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	400a      	ands	r2, r1
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	4618      	mov	r0, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	3b41      	subs	r3, #65	; 0x41
 80029c6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029d2:	4b29      	ldr	r3, [pc, #164]	; (8002a78 <HAL_ADC_ConfigChannel+0x250>)
 80029d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a28      	ldr	r2, [pc, #160]	; (8002a7c <HAL_ADC_ConfigChannel+0x254>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d10f      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x1d8>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b12      	cmp	r3, #18
 80029e6:	d10b      	bne.n	8002a00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1d      	ldr	r2, [pc, #116]	; (8002a7c <HAL_ADC_ConfigChannel+0x254>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d12b      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x23a>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <HAL_ADC_ConfigChannel+0x258>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <HAL_ADC_ConfigChannel+0x1f4>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b11      	cmp	r3, #17
 8002a1a:	d122      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a11      	ldr	r2, [pc, #68]	; (8002a80 <HAL_ADC_ConfigChannel+0x258>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d111      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_ADC_ConfigChannel+0x25c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <HAL_ADC_ConfigChannel+0x260>)
 8002a44:	fba2 2303 	umull	r2, r3, r2, r3
 8002a48:	0c9a      	lsrs	r2, r3, #18
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a54:	e002      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f9      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	40012300 	.word	0x40012300
 8002a7c:	40012000 	.word	0x40012000
 8002a80:	10000012 	.word	0x10000012
 8002a84:	20000010 	.word	0x20000010
 8002a88:	431bde83 	.word	0x431bde83

08002a8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a94:	4b79      	ldr	r3, [pc, #484]	; (8002c7c <ADC_Init+0x1f0>)
 8002a96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	021a      	lsls	r2, r3, #8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ae4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6899      	ldr	r1, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1e:	4a58      	ldr	r2, [pc, #352]	; (8002c80 <ADC_Init+0x1f4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d022      	beq.n	8002b6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6899      	ldr	r1, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6899      	ldr	r1, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	e00f      	b.n	8002b8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0202 	bic.w	r2, r2, #2
 8002b98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6899      	ldr	r1, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	7e1b      	ldrb	r3, [r3, #24]
 8002ba4:	005a      	lsls	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01b      	beq.n	8002bf0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6859      	ldr	r1, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	3b01      	subs	r3, #1
 8002be4:	035a      	lsls	r2, r3, #13
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	e007      	b.n	8002c00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bfe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	051a      	lsls	r2, r3, #20
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6899      	ldr	r1, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c42:	025a      	lsls	r2, r3, #9
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6899      	ldr	r1, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	029a      	lsls	r2, r3, #10
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	609a      	str	r2, [r3, #8]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	40012300 	.word	0x40012300
 8002c80:	0f000001 	.word	0x0f000001

08002c84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d13c      	bne.n	8002d18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d12b      	bne.n	8002d10 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d127      	bne.n	8002d10 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d006      	beq.n	8002cdc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d119      	bne.n	8002d10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0220 	bic.w	r2, r2, #32
 8002cea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	f043 0201 	orr.w	r2, r3, #1
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f7ff fd6b 	bl	80027ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d16:	e00e      	b.n	8002d36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f7ff fd75 	bl	8002814 <HAL_ADC_ErrorCallback>
}
 8002d2a:	e004      	b.n	8002d36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f7ff fd57 	bl	8002800 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2240      	movs	r2, #64	; 0x40
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	f043 0204 	orr.w	r2, r3, #4
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f7ff fd4a 	bl	8002814 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d98:	4b0c      	ldr	r3, [pc, #48]	; (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da4:	4013      	ands	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dba:	4a04      	ldr	r2, [pc, #16]	; (8002dcc <__NVIC_SetPriorityGrouping+0x44>)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	60d3      	str	r3, [r2, #12]
}
 8002dc0:	bf00      	nop
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	0a1b      	lsrs	r3, r3, #8
 8002dda:	f003 0307 	and.w	r3, r3, #7
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	db0b      	blt.n	8002e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	f003 021f 	and.w	r2, r3, #31
 8002e04:	4907      	ldr	r1, [pc, #28]	; (8002e24 <__NVIC_EnableIRQ+0x38>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000e100 	.word	0xe000e100

08002e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	6039      	str	r1, [r7, #0]
 8002e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	db0a      	blt.n	8002e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	490c      	ldr	r1, [pc, #48]	; (8002e74 <__NVIC_SetPriority+0x4c>)
 8002e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e50:	e00a      	b.n	8002e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	4908      	ldr	r1, [pc, #32]	; (8002e78 <__NVIC_SetPriority+0x50>)
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	3b04      	subs	r3, #4
 8002e60:	0112      	lsls	r2, r2, #4
 8002e62:	b2d2      	uxtb	r2, r2
 8002e64:	440b      	add	r3, r1
 8002e66:	761a      	strb	r2, [r3, #24]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000e100 	.word	0xe000e100
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	; 0x24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f1c3 0307 	rsb	r3, r3, #7
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	bf28      	it	cs
 8002e9a:	2304      	movcs	r3, #4
 8002e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d902      	bls.n	8002eac <NVIC_EncodePriority+0x30>
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3b03      	subs	r3, #3
 8002eaa:	e000      	b.n	8002eae <NVIC_EncodePriority+0x32>
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	401a      	ands	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ece:	43d9      	mvns	r1, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	4313      	orrs	r3, r2
         );
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3724      	adds	r7, #36	; 0x24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
	...

08002ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef4:	d301      	bcc.n	8002efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e00f      	b.n	8002f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efa:	4a0a      	ldr	r2, [pc, #40]	; (8002f24 <SysTick_Config+0x40>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f02:	210f      	movs	r1, #15
 8002f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f08:	f7ff ff8e 	bl	8002e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <SysTick_Config+0x40>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <SysTick_Config+0x40>)
 8002f14:	2207      	movs	r2, #7
 8002f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	e000e010 	.word	0xe000e010

08002f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ff29 	bl	8002d88 <__NVIC_SetPriorityGrouping>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	4603      	mov	r3, r0
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f50:	f7ff ff3e 	bl	8002dd0 <__NVIC_GetPriorityGrouping>
 8002f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	6978      	ldr	r0, [r7, #20]
 8002f5c:	f7ff ff8e 	bl	8002e7c <NVIC_EncodePriority>
 8002f60:	4602      	mov	r2, r0
 8002f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f66:	4611      	mov	r1, r2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff ff5d 	bl	8002e28 <__NVIC_SetPriority>
}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff31 	bl	8002dec <__NVIC_EnableIRQ>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f7ff ffa2 	bl	8002ee4 <SysTick_Config>
 8002fa0:	4603      	mov	r3, r0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff f936 	bl	8002228 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e099      	b.n	80030fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0201 	bic.w	r2, r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe8:	e00f      	b.n	800300a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fea:	f7ff f91d 	bl	8002228 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d908      	bls.n	800300a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2203      	movs	r2, #3
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e078      	b.n	80030fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1e8      	bne.n	8002fea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4b38      	ldr	r3, [pc, #224]	; (8003104 <HAL_DMA_Init+0x158>)
 8003024:	4013      	ands	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003036:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2b04      	cmp	r3, #4
 8003062:	d107      	bne.n	8003074 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	4313      	orrs	r3, r2
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f023 0307 	bic.w	r3, r3, #7
 800308a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	2b04      	cmp	r3, #4
 800309c:	d117      	bne.n	80030ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00e      	beq.n	80030ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fa91 	bl	80035d8 <DMA_CheckFifoParam>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2240      	movs	r2, #64	; 0x40
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030ca:	2301      	movs	r3, #1
 80030cc:	e016      	b.n	80030fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 fa48 	bl	800356c <DMA_CalcBaseAndBitshift>
 80030dc:	4603      	mov	r3, r0
 80030de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	223f      	movs	r2, #63	; 0x3f
 80030e6:	409a      	lsls	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	f010803f 	.word	0xf010803f

08003108 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_DMA_Start_IT+0x26>
 800312a:	2302      	movs	r3, #2
 800312c:	e040      	b.n	80031b0 <HAL_DMA_Start_IT+0xa8>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b01      	cmp	r3, #1
 8003140:	d12f      	bne.n	80031a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f9da 	bl	8003510 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	223f      	movs	r2, #63	; 0x3f
 8003162:	409a      	lsls	r2, r3
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0216 	orr.w	r2, r2, #22
 8003176:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0208 	orr.w	r2, r2, #8
 800318e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e005      	b.n	80031ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031aa:	2302      	movs	r3, #2
 80031ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d004      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2280      	movs	r2, #128	; 0x80
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00c      	b.n	80031f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2205      	movs	r2, #5
 80031da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0201 	bic.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003208:	4b92      	ldr	r3, [pc, #584]	; (8003454 <HAL_DMA_IRQHandler+0x258>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a92      	ldr	r2, [pc, #584]	; (8003458 <HAL_DMA_IRQHandler+0x25c>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0a9b      	lsrs	r3, r3, #10
 8003214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	2208      	movs	r2, #8
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01a      	beq.n	8003268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0204 	bic.w	r2, r2, #4
 800324e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	2208      	movs	r2, #8
 8003256:	409a      	lsls	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	2201      	movs	r2, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d012      	beq.n	800329e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2201      	movs	r2, #1
 800328c:	409a      	lsls	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	f043 0202 	orr.w	r2, r3, #2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	2204      	movs	r2, #4
 80032a4:	409a      	lsls	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	2204      	movs	r2, #4
 80032c2:	409a      	lsls	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f043 0204 	orr.w	r2, r3, #4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	2210      	movs	r2, #16
 80032da:	409a      	lsls	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d043      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d03c      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2210      	movs	r2, #16
 80032f8:	409a      	lsls	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d018      	beq.n	800333e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d108      	bne.n	800332c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d024      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
 800332a:	e01f      	b.n	800336c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
 800333c:	e016      	b.n	800336c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0208 	bic.w	r2, r2, #8
 800335a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	2220      	movs	r2, #32
 8003372:	409a      	lsls	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 808e 	beq.w	800349a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8086 	beq.w	800349a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2220      	movs	r2, #32
 8003394:	409a      	lsls	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d136      	bne.n	8003414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0216 	bic.w	r2, r2, #22
 80033b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <HAL_DMA_IRQHandler+0x1da>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0208 	bic.w	r2, r2, #8
 80033e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	223f      	movs	r2, #63	; 0x3f
 80033ec:	409a      	lsls	r2, r3
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	2b00      	cmp	r3, #0
 8003408:	d07d      	beq.n	8003506 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
        }
        return;
 8003412:	e078      	b.n	8003506 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01c      	beq.n	800345c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d108      	bne.n	8003442 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	2b00      	cmp	r3, #0
 8003436:	d030      	beq.n	800349a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
 8003440:	e02b      	b.n	800349a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d027      	beq.n	800349a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
 8003452:	e022      	b.n	800349a <HAL_DMA_IRQHandler+0x29e>
 8003454:	20000010 	.word	0x20000010
 8003458:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0210 	bic.w	r2, r2, #16
 8003478:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d032      	beq.n	8003508 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d022      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2205      	movs	r2, #5
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3301      	adds	r3, #1
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d307      	bcc.n	80034e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f2      	bne.n	80034c6 <HAL_DMA_IRQHandler+0x2ca>
 80034e0:	e000      	b.n	80034e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
 8003504:	e000      	b.n	8003508 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003506:	bf00      	nop
    }
  }
}
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop

08003510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800352c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d108      	bne.n	8003550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800354e:	e007      	b.n	8003560 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	60da      	str	r2, [r3, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	3b10      	subs	r3, #16
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <DMA_CalcBaseAndBitshift+0x64>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003586:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d909      	bls.n	80035ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	1d1a      	adds	r2, r3, #4
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	659a      	str	r2, [r3, #88]	; 0x58
 80035ac:	e007      	b.n	80035be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	aaaaaaab 	.word	0xaaaaaaab
 80035d4:	08009bbc 	.word	0x08009bbc

080035d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d11f      	bne.n	8003632 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b03      	cmp	r3, #3
 80035f6:	d855      	bhi.n	80036a4 <DMA_CheckFifoParam+0xcc>
 80035f8:	a201      	add	r2, pc, #4	; (adr r2, 8003600 <DMA_CheckFifoParam+0x28>)
 80035fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fe:	bf00      	nop
 8003600:	08003611 	.word	0x08003611
 8003604:	08003623 	.word	0x08003623
 8003608:	08003611 	.word	0x08003611
 800360c:	080036a5 	.word	0x080036a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d045      	beq.n	80036a8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003620:	e042      	b.n	80036a8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800362a:	d13f      	bne.n	80036ac <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003630:	e03c      	b.n	80036ac <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800363a:	d121      	bne.n	8003680 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d836      	bhi.n	80036b0 <DMA_CheckFifoParam+0xd8>
 8003642:	a201      	add	r2, pc, #4	; (adr r2, 8003648 <DMA_CheckFifoParam+0x70>)
 8003644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003648:	08003659 	.word	0x08003659
 800364c:	0800365f 	.word	0x0800365f
 8003650:	08003659 	.word	0x08003659
 8003654:	08003671 	.word	0x08003671
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e02f      	b.n	80036be <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d024      	beq.n	80036b4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366e:	e021      	b.n	80036b4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003678:	d11e      	bne.n	80036b8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800367e:	e01b      	b.n	80036b8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d902      	bls.n	800368c <DMA_CheckFifoParam+0xb4>
 8003686:	2b03      	cmp	r3, #3
 8003688:	d003      	beq.n	8003692 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800368a:	e018      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e015      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00e      	beq.n	80036bc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      break;
 80036a2:	e00b      	b.n	80036bc <DMA_CheckFifoParam+0xe4>
      break;
 80036a4:	bf00      	nop
 80036a6:	e00a      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036a8:	bf00      	nop
 80036aa:	e008      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036ac:	bf00      	nop
 80036ae:	e006      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036b0:	bf00      	nop
 80036b2:	e004      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036b4:	bf00      	nop
 80036b6:	e002      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;   
 80036b8:	bf00      	nop
 80036ba:	e000      	b.n	80036be <DMA_CheckFifoParam+0xe6>
      break;
 80036bc:	bf00      	nop
    }
  } 
  
  return status; 
 80036be:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
 80036e6:	e165      	b.n	80039b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036e8:	2201      	movs	r2, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4013      	ands	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	429a      	cmp	r2, r3
 8003702:	f040 8154 	bne.w	80039ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d00b      	beq.n	8003726 <HAL_GPIO_Init+0x5a>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d007      	beq.n	8003726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800371a:	2b11      	cmp	r3, #17
 800371c:	d003      	beq.n	8003726 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b12      	cmp	r3, #18
 8003724:	d130      	bne.n	8003788 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	2203      	movs	r2, #3
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800375c:	2201      	movs	r2, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	4013      	ands	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 0201 	and.w	r2, r3, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	2203      	movs	r2, #3
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	43db      	mvns	r3, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0xfc>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b12      	cmp	r3, #18
 80037c6:	d123      	bne.n	8003810 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	08da      	lsrs	r2, r3, #3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3208      	adds	r2, #8
 80037d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f003 0307 	and.w	r3, r3, #7
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	220f      	movs	r2, #15
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	08da      	lsrs	r2, r3, #3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3208      	adds	r2, #8
 800380a:	69b9      	ldr	r1, [r7, #24]
 800380c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	2203      	movs	r2, #3
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f003 0203 	and.w	r2, r3, #3
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	f000 80ae 	beq.w	80039ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	4b5c      	ldr	r3, [pc, #368]	; (80039c8 <HAL_GPIO_Init+0x2fc>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	4a5b      	ldr	r2, [pc, #364]	; (80039c8 <HAL_GPIO_Init+0x2fc>)
 800385c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003860:	6453      	str	r3, [r2, #68]	; 0x44
 8003862:	4b59      	ldr	r3, [pc, #356]	; (80039c8 <HAL_GPIO_Init+0x2fc>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800386e:	4a57      	ldr	r2, [pc, #348]	; (80039cc <HAL_GPIO_Init+0x300>)
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	3302      	adds	r3, #2
 8003876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	220f      	movs	r2, #15
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a4e      	ldr	r2, [pc, #312]	; (80039d0 <HAL_GPIO_Init+0x304>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d025      	beq.n	80038e6 <HAL_GPIO_Init+0x21a>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4d      	ldr	r2, [pc, #308]	; (80039d4 <HAL_GPIO_Init+0x308>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d01f      	beq.n	80038e2 <HAL_GPIO_Init+0x216>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a4c      	ldr	r2, [pc, #304]	; (80039d8 <HAL_GPIO_Init+0x30c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d019      	beq.n	80038de <HAL_GPIO_Init+0x212>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a4b      	ldr	r2, [pc, #300]	; (80039dc <HAL_GPIO_Init+0x310>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d013      	beq.n	80038da <HAL_GPIO_Init+0x20e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a4a      	ldr	r2, [pc, #296]	; (80039e0 <HAL_GPIO_Init+0x314>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00d      	beq.n	80038d6 <HAL_GPIO_Init+0x20a>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a49      	ldr	r2, [pc, #292]	; (80039e4 <HAL_GPIO_Init+0x318>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d007      	beq.n	80038d2 <HAL_GPIO_Init+0x206>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a48      	ldr	r2, [pc, #288]	; (80039e8 <HAL_GPIO_Init+0x31c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <HAL_GPIO_Init+0x202>
 80038ca:	2306      	movs	r3, #6
 80038cc:	e00c      	b.n	80038e8 <HAL_GPIO_Init+0x21c>
 80038ce:	2307      	movs	r3, #7
 80038d0:	e00a      	b.n	80038e8 <HAL_GPIO_Init+0x21c>
 80038d2:	2305      	movs	r3, #5
 80038d4:	e008      	b.n	80038e8 <HAL_GPIO_Init+0x21c>
 80038d6:	2304      	movs	r3, #4
 80038d8:	e006      	b.n	80038e8 <HAL_GPIO_Init+0x21c>
 80038da:	2303      	movs	r3, #3
 80038dc:	e004      	b.n	80038e8 <HAL_GPIO_Init+0x21c>
 80038de:	2302      	movs	r3, #2
 80038e0:	e002      	b.n	80038e8 <HAL_GPIO_Init+0x21c>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_GPIO_Init+0x21c>
 80038e6:	2300      	movs	r3, #0
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	f002 0203 	and.w	r2, r2, #3
 80038ee:	0092      	lsls	r2, r2, #2
 80038f0:	4093      	lsls	r3, r2
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f8:	4934      	ldr	r1, [pc, #208]	; (80039cc <HAL_GPIO_Init+0x300>)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	3302      	adds	r3, #2
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003906:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_GPIO_Init+0x320>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800392a:	4a30      	ldr	r2, [pc, #192]	; (80039ec <HAL_GPIO_Init+0x320>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003930:	4b2e      	ldr	r3, [pc, #184]	; (80039ec <HAL_GPIO_Init+0x320>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003954:	4a25      	ldr	r2, [pc, #148]	; (80039ec <HAL_GPIO_Init+0x320>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <HAL_GPIO_Init+0x320>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800397e:	4a1b      	ldr	r2, [pc, #108]	; (80039ec <HAL_GPIO_Init+0x320>)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_GPIO_Init+0x320>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a8:	4a10      	ldr	r2, [pc, #64]	; (80039ec <HAL_GPIO_Init+0x320>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	3301      	adds	r3, #1
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	f67f ae96 	bls.w	80036e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039bc:	bf00      	nop
 80039be:	3724      	adds	r7, #36	; 0x24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	40023800 	.word	0x40023800
 80039cc:	40013800 	.word	0x40013800
 80039d0:	40020000 	.word	0x40020000
 80039d4:	40020400 	.word	0x40020400
 80039d8:	40020800 	.word	0x40020800
 80039dc:	40020c00 	.word	0x40020c00
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40021400 	.word	0x40021400
 80039e8:	40021800 	.word	0x40021800
 80039ec:	40013c00 	.word	0x40013c00

080039f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	887b      	ldrh	r3, [r7, #2]
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
 8003a0c:	e001      	b.n	8003a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a30:	787b      	ldrb	r3, [r7, #1]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a36:	887a      	ldrh	r2, [r7, #2]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a3c:	e003      	b.n	8003a46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a3e:	887b      	ldrh	r3, [r7, #2]
 8003a40:	041a      	lsls	r2, r3, #16
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	619a      	str	r2, [r3, #24]
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
	...

08003a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0cc      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a68:	4b68      	ldr	r3, [pc, #416]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d90c      	bls.n	8003a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b65      	ldr	r3, [pc, #404]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	b2d2      	uxtb	r2, r2
 8003a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7e:	4b63      	ldr	r3, [pc, #396]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d001      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e0b8      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d020      	beq.n	8003ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d005      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aa8:	4b59      	ldr	r3, [pc, #356]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4a58      	ldr	r2, [pc, #352]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac0:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4a52      	ldr	r2, [pc, #328]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003acc:	4b50      	ldr	r3, [pc, #320]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	494d      	ldr	r1, [pc, #308]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d044      	beq.n	8003b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af2:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d119      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e07f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d003      	beq.n	8003b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0e:	2b03      	cmp	r3, #3
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b12:	4b3f      	ldr	r3, [pc, #252]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e06f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b22:	4b3b      	ldr	r3, [pc, #236]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e067      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b32:	4b37      	ldr	r3, [pc, #220]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f023 0203 	bic.w	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	4934      	ldr	r1, [pc, #208]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b44:	f7fe fb70 	bl	8002228 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4a:	e00a      	b.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4c:	f7fe fb6c 	bl	8002228 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e04f      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 020c 	and.w	r2, r3, #12
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d1eb      	bne.n	8003b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b74:	4b25      	ldr	r3, [pc, #148]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d20c      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b82:	4b22      	ldr	r3, [pc, #136]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	b2d2      	uxtb	r2, r2
 8003b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8a:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <HAL_RCC_ClockConfig+0x1b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d001      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e032      	b.n	8003c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba8:	4b19      	ldr	r3, [pc, #100]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4916      	ldr	r1, [pc, #88]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	490e      	ldr	r1, [pc, #56]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bda:	f000 fb7f 	bl	80042dc <HAL_RCC_GetSysClockFreq>
 8003bde:	4601      	mov	r1, r0
 8003be0:	4b0b      	ldr	r3, [pc, #44]	; (8003c10 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	5cd3      	ldrb	r3, [r2, r3]
 8003bee:	fa21 f303 	lsr.w	r3, r1, r3
 8003bf2:	4a09      	ldr	r2, [pc, #36]	; (8003c18 <HAL_RCC_ClockConfig+0x1c4>)
 8003bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bf6:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x1c8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fad0 	bl	80021a0 <HAL_InitTick>

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023c00 	.word	0x40023c00
 8003c10:	40023800 	.word	0x40023800
 8003c14:	08009ba4 	.word	0x08009ba4
 8003c18:	20000010 	.word	0x20000010
 8003c1c:	20000014 	.word	0x20000014

08003c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c24:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c26:	681b      	ldr	r3, [r3, #0]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000010 	.word	0x20000010

08003c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c3c:	f7ff fff0 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8003c40:	4601      	mov	r1, r0
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	0a9b      	lsrs	r3, r3, #10
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4a03      	ldr	r2, [pc, #12]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4e:	5cd3      	ldrb	r3, [r2, r3]
 8003c50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	08009bb4 	.word	0x08009bb4

08003c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c64:	f7ff ffdc 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8003c68:	4601      	mov	r1, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	0b5b      	lsrs	r3, r3, #13
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4a03      	ldr	r2, [pc, #12]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c76:	5cd3      	ldrb	r3, [r2, r3]
 8003c78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40023800 	.word	0x40023800
 8003c84:	08009bb4 	.word	0x08009bb4

08003c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08c      	sub	sp, #48	; 0x30
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d010      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8003cc0:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	496c      	ldr	r1, [pc, #432]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d010      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8003cee:	4b64      	ldr	r3, [pc, #400]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cfc:	4960      	ldr	r1, [pc, #384]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d017      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1c:	4b58      	ldr	r3, [pc, #352]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2a:	4955      	ldr	r1, [pc, #340]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d017      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d58:	4b49      	ldr	r3, [pc, #292]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d66:	4946      	ldr	r1, [pc, #280]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d76:	d101      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8003d84:	2301      	movs	r3, #1
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0320 	and.w	r3, r3, #32
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 808a 	beq.w	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a38      	ldr	r2, [pc, #224]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003db2:	4b34      	ldr	r3, [pc, #208]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a33      	ldr	r2, [pc, #204]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dbe:	f7fe fa33 	bl	8002228 <HAL_GetTick>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dc6:	f7fe fa2f 	bl	8002228 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e278      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de4:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dec:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d02f      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d028      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e02:	4b1f      	ldr	r3, [pc, #124]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e0c:	4b1e      	ldr	r3, [pc, #120]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e12:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003e18:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e1e:	4b18      	ldr	r3, [pc, #96]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d114      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003e2a:	f7fe f9fd 	bl	8002228 <HAL_GetTick>
 8003e2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fe f9f9 	bl	8002228 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e240      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e48:	4b0d      	ldr	r3, [pc, #52]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ee      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e60:	d114      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003e62:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e76:	4902      	ldr	r1, [pc, #8]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	608b      	str	r3, [r1, #8]
 8003e7c:	e00c      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40007000 	.word	0x40007000
 8003e88:	42470e40 	.word	0x42470e40
 8003e8c:	4b4a      	ldr	r3, [pc, #296]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	4a49      	ldr	r2, [pc, #292]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e92:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e96:	6093      	str	r3, [r2, #8]
 8003e98:	4b47      	ldr	r3, [pc, #284]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003e9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea4:	4944      	ldr	r1, [pc, #272]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0310 	and.w	r3, r3, #16
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d004      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8003ebc:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003ebe:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003ecc:	4b3a      	ldr	r3, [pc, #232]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	4937      	ldr	r1, [pc, #220]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003eee:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efc:	492e      	ldr	r1, [pc, #184]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d011      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f10:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f16:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	4926      	ldr	r1, [pc, #152]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003f30:	2301      	movs	r3, #1
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	491a      	ldr	r1, [pc, #104]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d011      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003f62:	4b15      	ldr	r3, [pc, #84]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f68:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f70:	4911      	ldr	r1, [pc, #68]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f80:	d101      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8003f82:	2301      	movs	r3, #1
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f94:	f040 80ff 	bne.w	8004196 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f98:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f9e:	f7fe f943 	bl	8002228 <HAL_GetTick>
 8003fa2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fa4:	e00e      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fa6:	f7fe f93f 	bl	8002228 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d907      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e188      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	424711e0 	.word	0x424711e0
 8003fc0:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fc4:	4b7e      	ldr	r3, [pc, #504]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ea      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d009      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d028      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d124      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003ff8:	4b71      	ldr	r3, [pc, #452]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffe:	0c1b      	lsrs	r3, r3, #16
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	3301      	adds	r3, #1
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800400a:	4b6d      	ldr	r3, [pc, #436]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800400c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004010:	0e1b      	lsrs	r3, r3, #24
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	019b      	lsls	r3, r3, #6
 8004022:	431a      	orrs	r2, r3
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	085b      	lsrs	r3, r3, #1
 8004028:	3b01      	subs	r3, #1
 800402a:	041b      	lsls	r3, r3, #16
 800402c:	431a      	orrs	r2, r3
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	071b      	lsls	r3, r3, #28
 800403a:	4961      	ldr	r1, [pc, #388]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	d004      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004060:	2b00      	cmp	r3, #0
 8004062:	d035      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800406c:	d130      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800406e:	4b54      	ldr	r3, [pc, #336]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004074:	0c1b      	lsrs	r3, r3, #16
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	3301      	adds	r3, #1
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004080:	4b4f      	ldr	r3, [pc, #316]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004086:	0f1b      	lsrs	r3, r3, #28
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	019b      	lsls	r3, r3, #6
 8004098:	431a      	orrs	r2, r3
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	3b01      	subs	r3, #1
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	061b      	lsls	r3, r3, #24
 80040aa:	431a      	orrs	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	071b      	lsls	r3, r3, #28
 80040b0:	4943      	ldr	r1, [pc, #268]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040b8:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040be:	f023 021f 	bic.w	r2, r3, #31
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	3b01      	subs	r3, #1
 80040c8:	493d      	ldr	r1, [pc, #244]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d029      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e4:	d124      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80040e6:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0303 	and.w	r3, r3, #3
 80040f2:	3301      	adds	r3, #1
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040f8:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80040fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fe:	0f1b      	lsrs	r3, r3, #28
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	019b      	lsls	r3, r3, #6
 8004110:	431a      	orrs	r2, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	085b      	lsrs	r3, r3, #1
 8004118:	3b01      	subs	r3, #1
 800411a:	041b      	lsls	r3, r3, #16
 800411c:	431a      	orrs	r2, r3
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	061b      	lsls	r3, r3, #24
 8004122:	431a      	orrs	r2, r3
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	071b      	lsls	r3, r3, #28
 8004128:	4925      	ldr	r1, [pc, #148]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004138:	2b00      	cmp	r3, #0
 800413a:	d016      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	019b      	lsls	r3, r3, #6
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	085b      	lsrs	r3, r3, #1
 800414e:	3b01      	subs	r3, #1
 8004150:	041b      	lsls	r3, r3, #16
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	061b      	lsls	r3, r3, #24
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	071b      	lsls	r3, r3, #28
 8004162:	4917      	ldr	r1, [pc, #92]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800416a:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004170:	f7fe f85a 	bl	8002228 <HAL_GetTick>
 8004174:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004178:	f7fe f856 	bl	8002228 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e09f      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2b01      	cmp	r3, #1
 800419a:	f040 8095 	bne.w	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800419e:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041a4:	f7fe f840 	bl	8002228 <HAL_GetTick>
 80041a8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041aa:	e00f      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80041ac:	f7fe f83c 	bl	8002228 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d908      	bls.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e085      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x642>
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	42470068 	.word	0x42470068
 80041c8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041cc:	4b41      	ldr	r3, [pc, #260]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041d8:	d0e8      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x566>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d02b      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d127      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004202:	4b34      	ldr	r3, [pc, #208]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	3301      	adds	r3, #1
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	019b      	lsls	r3, r3, #6
 800421e:	431a      	orrs	r2, r3
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	3b01      	subs	r3, #1
 8004226:	041b      	lsls	r3, r3, #16
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	061b      	lsls	r3, r3, #24
 8004230:	4928      	ldr	r1, [pc, #160]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004238:	4b26      	ldr	r3, [pc, #152]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800423a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800423e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004246:	3b01      	subs	r3, #1
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	4922      	ldr	r1, [pc, #136]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01d      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004266:	d118      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004268:	4b1a      	ldr	r3, [pc, #104]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426e:	0e1b      	lsrs	r3, r3, #24
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	019b      	lsls	r3, r3, #6
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	085b      	lsrs	r3, r3, #1
 8004288:	3b01      	subs	r3, #1
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	431a      	orrs	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	061b      	lsls	r3, r3, #24
 8004292:	4910      	ldr	r1, [pc, #64]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800429a:	4b0f      	ldr	r3, [pc, #60]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800429c:	2201      	movs	r2, #1
 800429e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042a0:	f7fd ffc2 	bl	8002228 <HAL_GetTick>
 80042a4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80042a8:	f7fd ffbe 	bl	8002228 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e007      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042c6:	d1ef      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3730      	adds	r7, #48	; 0x30
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800
 80042d8:	42470070 	.word	0x42470070

080042dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042f6:	4bc6      	ldr	r3, [pc, #792]	; (8004610 <HAL_RCC_GetSysClockFreq+0x334>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b0c      	cmp	r3, #12
 8004300:	f200 817e 	bhi.w	8004600 <HAL_RCC_GetSysClockFreq+0x324>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <HAL_RCC_GetSysClockFreq+0x30>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004341 	.word	0x08004341
 8004310:	08004601 	.word	0x08004601
 8004314:	08004601 	.word	0x08004601
 8004318:	08004601 	.word	0x08004601
 800431c:	08004347 	.word	0x08004347
 8004320:	08004601 	.word	0x08004601
 8004324:	08004601 	.word	0x08004601
 8004328:	08004601 	.word	0x08004601
 800432c:	0800434d 	.word	0x0800434d
 8004330:	08004601 	.word	0x08004601
 8004334:	08004601 	.word	0x08004601
 8004338:	08004601 	.word	0x08004601
 800433c:	080044a9 	.word	0x080044a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004340:	4bb4      	ldr	r3, [pc, #720]	; (8004614 <HAL_RCC_GetSysClockFreq+0x338>)
 8004342:	613b      	str	r3, [r7, #16]
       break;
 8004344:	e15f      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004346:	4bb4      	ldr	r3, [pc, #720]	; (8004618 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004348:	613b      	str	r3, [r7, #16]
      break;
 800434a:	e15c      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800434c:	4bb0      	ldr	r3, [pc, #704]	; (8004610 <HAL_RCC_GetSysClockFreq+0x334>)
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004354:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004356:	4bae      	ldr	r3, [pc, #696]	; (8004610 <HAL_RCC_GetSysClockFreq+0x334>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d04a      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004362:	4bab      	ldr	r3, [pc, #684]	; (8004610 <HAL_RCC_GetSysClockFreq+0x334>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	f04f 0400 	mov.w	r4, #0
 800436c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	ea03 0501 	and.w	r5, r3, r1
 8004378:	ea04 0602 	and.w	r6, r4, r2
 800437c:	4629      	mov	r1, r5
 800437e:	4632      	mov	r2, r6
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	f04f 0400 	mov.w	r4, #0
 8004388:	0154      	lsls	r4, r2, #5
 800438a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800438e:	014b      	lsls	r3, r1, #5
 8004390:	4619      	mov	r1, r3
 8004392:	4622      	mov	r2, r4
 8004394:	1b49      	subs	r1, r1, r5
 8004396:	eb62 0206 	sbc.w	r2, r2, r6
 800439a:	f04f 0300 	mov.w	r3, #0
 800439e:	f04f 0400 	mov.w	r4, #0
 80043a2:	0194      	lsls	r4, r2, #6
 80043a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80043a8:	018b      	lsls	r3, r1, #6
 80043aa:	1a5b      	subs	r3, r3, r1
 80043ac:	eb64 0402 	sbc.w	r4, r4, r2
 80043b0:	f04f 0100 	mov.w	r1, #0
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	00e2      	lsls	r2, r4, #3
 80043ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80043be:	00d9      	lsls	r1, r3, #3
 80043c0:	460b      	mov	r3, r1
 80043c2:	4614      	mov	r4, r2
 80043c4:	195b      	adds	r3, r3, r5
 80043c6:	eb44 0406 	adc.w	r4, r4, r6
 80043ca:	f04f 0100 	mov.w	r1, #0
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	0262      	lsls	r2, r4, #9
 80043d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80043d8:	0259      	lsls	r1, r3, #9
 80043da:	460b      	mov	r3, r1
 80043dc:	4614      	mov	r4, r2
 80043de:	4618      	mov	r0, r3
 80043e0:	4621      	mov	r1, r4
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f04f 0400 	mov.w	r4, #0
 80043e8:	461a      	mov	r2, r3
 80043ea:	4623      	mov	r3, r4
 80043ec:	f7fc fc1c 	bl	8000c28 <__aeabi_uldivmod>
 80043f0:	4603      	mov	r3, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	e049      	b.n	800448c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043f8:	4b85      	ldr	r3, [pc, #532]	; (8004610 <HAL_RCC_GetSysClockFreq+0x334>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	099b      	lsrs	r3, r3, #6
 80043fe:	f04f 0400 	mov.w	r4, #0
 8004402:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	ea03 0501 	and.w	r5, r3, r1
 800440e:	ea04 0602 	and.w	r6, r4, r2
 8004412:	4629      	mov	r1, r5
 8004414:	4632      	mov	r2, r6
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	f04f 0400 	mov.w	r4, #0
 800441e:	0154      	lsls	r4, r2, #5
 8004420:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004424:	014b      	lsls	r3, r1, #5
 8004426:	4619      	mov	r1, r3
 8004428:	4622      	mov	r2, r4
 800442a:	1b49      	subs	r1, r1, r5
 800442c:	eb62 0206 	sbc.w	r2, r2, r6
 8004430:	f04f 0300 	mov.w	r3, #0
 8004434:	f04f 0400 	mov.w	r4, #0
 8004438:	0194      	lsls	r4, r2, #6
 800443a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800443e:	018b      	lsls	r3, r1, #6
 8004440:	1a5b      	subs	r3, r3, r1
 8004442:	eb64 0402 	sbc.w	r4, r4, r2
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	00e2      	lsls	r2, r4, #3
 8004450:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004454:	00d9      	lsls	r1, r3, #3
 8004456:	460b      	mov	r3, r1
 8004458:	4614      	mov	r4, r2
 800445a:	195b      	adds	r3, r3, r5
 800445c:	eb44 0406 	adc.w	r4, r4, r6
 8004460:	f04f 0100 	mov.w	r1, #0
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	02a2      	lsls	r2, r4, #10
 800446a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800446e:	0299      	lsls	r1, r3, #10
 8004470:	460b      	mov	r3, r1
 8004472:	4614      	mov	r4, r2
 8004474:	4618      	mov	r0, r3
 8004476:	4621      	mov	r1, r4
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f04f 0400 	mov.w	r4, #0
 800447e:	461a      	mov	r2, r3
 8004480:	4623      	mov	r3, r4
 8004482:	f7fc fbd1 	bl	8000c28 <__aeabi_uldivmod>
 8004486:	4603      	mov	r3, r0
 8004488:	460c      	mov	r4, r1
 800448a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800448c:	4b60      	ldr	r3, [pc, #384]	; (8004610 <HAL_RCC_GetSysClockFreq+0x334>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	3301      	adds	r3, #1
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a4:	613b      	str	r3, [r7, #16]
      break;
 80044a6:	e0ae      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044a8:	4b59      	ldr	r3, [pc, #356]	; (8004610 <HAL_RCC_GetSysClockFreq+0x334>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044b0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b2:	4b57      	ldr	r3, [pc, #348]	; (8004610 <HAL_RCC_GetSysClockFreq+0x334>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d04a      	beq.n	8004554 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044be:	4b54      	ldr	r3, [pc, #336]	; (8004610 <HAL_RCC_GetSysClockFreq+0x334>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	099b      	lsrs	r3, r3, #6
 80044c4:	f04f 0400 	mov.w	r4, #0
 80044c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044cc:	f04f 0200 	mov.w	r2, #0
 80044d0:	ea03 0501 	and.w	r5, r3, r1
 80044d4:	ea04 0602 	and.w	r6, r4, r2
 80044d8:	4629      	mov	r1, r5
 80044da:	4632      	mov	r2, r6
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	f04f 0400 	mov.w	r4, #0
 80044e4:	0154      	lsls	r4, r2, #5
 80044e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044ea:	014b      	lsls	r3, r1, #5
 80044ec:	4619      	mov	r1, r3
 80044ee:	4622      	mov	r2, r4
 80044f0:	1b49      	subs	r1, r1, r5
 80044f2:	eb62 0206 	sbc.w	r2, r2, r6
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	f04f 0400 	mov.w	r4, #0
 80044fe:	0194      	lsls	r4, r2, #6
 8004500:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004504:	018b      	lsls	r3, r1, #6
 8004506:	1a5b      	subs	r3, r3, r1
 8004508:	eb64 0402 	sbc.w	r4, r4, r2
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	00e2      	lsls	r2, r4, #3
 8004516:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800451a:	00d9      	lsls	r1, r3, #3
 800451c:	460b      	mov	r3, r1
 800451e:	4614      	mov	r4, r2
 8004520:	195b      	adds	r3, r3, r5
 8004522:	eb44 0406 	adc.w	r4, r4, r6
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	0262      	lsls	r2, r4, #9
 8004530:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004534:	0259      	lsls	r1, r3, #9
 8004536:	460b      	mov	r3, r1
 8004538:	4614      	mov	r4, r2
 800453a:	4618      	mov	r0, r3
 800453c:	4621      	mov	r1, r4
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f04f 0400 	mov.w	r4, #0
 8004544:	461a      	mov	r2, r3
 8004546:	4623      	mov	r3, r4
 8004548:	f7fc fb6e 	bl	8000c28 <__aeabi_uldivmod>
 800454c:	4603      	mov	r3, r0
 800454e:	460c      	mov	r4, r1
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e049      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004554:	4b2e      	ldr	r3, [pc, #184]	; (8004610 <HAL_RCC_GetSysClockFreq+0x334>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	099b      	lsrs	r3, r3, #6
 800455a:	f04f 0400 	mov.w	r4, #0
 800455e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	ea03 0501 	and.w	r5, r3, r1
 800456a:	ea04 0602 	and.w	r6, r4, r2
 800456e:	4629      	mov	r1, r5
 8004570:	4632      	mov	r2, r6
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	f04f 0400 	mov.w	r4, #0
 800457a:	0154      	lsls	r4, r2, #5
 800457c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004580:	014b      	lsls	r3, r1, #5
 8004582:	4619      	mov	r1, r3
 8004584:	4622      	mov	r2, r4
 8004586:	1b49      	subs	r1, r1, r5
 8004588:	eb62 0206 	sbc.w	r2, r2, r6
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	f04f 0400 	mov.w	r4, #0
 8004594:	0194      	lsls	r4, r2, #6
 8004596:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800459a:	018b      	lsls	r3, r1, #6
 800459c:	1a5b      	subs	r3, r3, r1
 800459e:	eb64 0402 	sbc.w	r4, r4, r2
 80045a2:	f04f 0100 	mov.w	r1, #0
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	00e2      	lsls	r2, r4, #3
 80045ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80045b0:	00d9      	lsls	r1, r3, #3
 80045b2:	460b      	mov	r3, r1
 80045b4:	4614      	mov	r4, r2
 80045b6:	195b      	adds	r3, r3, r5
 80045b8:	eb44 0406 	adc.w	r4, r4, r6
 80045bc:	f04f 0100 	mov.w	r1, #0
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	02a2      	lsls	r2, r4, #10
 80045c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80045ca:	0299      	lsls	r1, r3, #10
 80045cc:	460b      	mov	r3, r1
 80045ce:	4614      	mov	r4, r2
 80045d0:	4618      	mov	r0, r3
 80045d2:	4621      	mov	r1, r4
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f04f 0400 	mov.w	r4, #0
 80045da:	461a      	mov	r2, r3
 80045dc:	4623      	mov	r3, r4
 80045de:	f7fc fb23 	bl	8000c28 <__aeabi_uldivmod>
 80045e2:	4603      	mov	r3, r0
 80045e4:	460c      	mov	r4, r1
 80045e6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <HAL_RCC_GetSysClockFreq+0x334>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	0f1b      	lsrs	r3, r3, #28
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fc:	613b      	str	r3, [r7, #16]
      break;
 80045fe:	e002      	b.n	8004606 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <HAL_RCC_GetSysClockFreq+0x338>)
 8004602:	613b      	str	r3, [r7, #16]
      break;
 8004604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004606:	693b      	ldr	r3, [r7, #16]
}
 8004608:	4618      	mov	r0, r3
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004610:	40023800 	.word	0x40023800
 8004614:	00f42400 	.word	0x00f42400
 8004618:	007a1200 	.word	0x007a1200

0800461c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 8083 	beq.w	800473c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004636:	4b95      	ldr	r3, [pc, #596]	; (800488c <HAL_RCC_OscConfig+0x270>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b04      	cmp	r3, #4
 8004640:	d019      	beq.n	8004676 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004642:	4b92      	ldr	r3, [pc, #584]	; (800488c <HAL_RCC_OscConfig+0x270>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800464a:	2b08      	cmp	r3, #8
 800464c:	d106      	bne.n	800465c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800464e:	4b8f      	ldr	r3, [pc, #572]	; (800488c <HAL_RCC_OscConfig+0x270>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800465a:	d00c      	beq.n	8004676 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800465c:	4b8b      	ldr	r3, [pc, #556]	; (800488c <HAL_RCC_OscConfig+0x270>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004664:	2b0c      	cmp	r3, #12
 8004666:	d112      	bne.n	800468e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004668:	4b88      	ldr	r3, [pc, #544]	; (800488c <HAL_RCC_OscConfig+0x270>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004674:	d10b      	bne.n	800468e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004676:	4b85      	ldr	r3, [pc, #532]	; (800488c <HAL_RCC_OscConfig+0x270>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d05b      	beq.n	800473a <HAL_RCC_OscConfig+0x11e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d157      	bne.n	800473a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e216      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004696:	d106      	bne.n	80046a6 <HAL_RCC_OscConfig+0x8a>
 8004698:	4b7c      	ldr	r3, [pc, #496]	; (800488c <HAL_RCC_OscConfig+0x270>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a7b      	ldr	r2, [pc, #492]	; (800488c <HAL_RCC_OscConfig+0x270>)
 800469e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	e01d      	b.n	80046e2 <HAL_RCC_OscConfig+0xc6>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046ae:	d10c      	bne.n	80046ca <HAL_RCC_OscConfig+0xae>
 80046b0:	4b76      	ldr	r3, [pc, #472]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a75      	ldr	r2, [pc, #468]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80046b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	4b73      	ldr	r3, [pc, #460]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a72      	ldr	r2, [pc, #456]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	e00b      	b.n	80046e2 <HAL_RCC_OscConfig+0xc6>
 80046ca:	4b70      	ldr	r3, [pc, #448]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a6f      	ldr	r2, [pc, #444]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80046d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	4b6d      	ldr	r3, [pc, #436]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a6c      	ldr	r2, [pc, #432]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80046dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d013      	beq.n	8004712 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fd fd9d 	bl	8002228 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046f2:	f7fd fd99 	bl	8002228 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b64      	cmp	r3, #100	; 0x64
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1db      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004704:	4b61      	ldr	r3, [pc, #388]	; (800488c <HAL_RCC_OscConfig+0x270>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0xd6>
 8004710:	e014      	b.n	800473c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004712:	f7fd fd89 	bl	8002228 <HAL_GetTick>
 8004716:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004718:	e008      	b.n	800472c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800471a:	f7fd fd85 	bl	8002228 <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b64      	cmp	r3, #100	; 0x64
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e1c7      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472c:	4b57      	ldr	r3, [pc, #348]	; (800488c <HAL_RCC_OscConfig+0x270>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1f0      	bne.n	800471a <HAL_RCC_OscConfig+0xfe>
 8004738:	e000      	b.n	800473c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d06f      	beq.n	8004828 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004748:	4b50      	ldr	r3, [pc, #320]	; (800488c <HAL_RCC_OscConfig+0x270>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b00      	cmp	r3, #0
 8004752:	d017      	beq.n	8004784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004754:	4b4d      	ldr	r3, [pc, #308]	; (800488c <HAL_RCC_OscConfig+0x270>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800475c:	2b08      	cmp	r3, #8
 800475e:	d105      	bne.n	800476c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004760:	4b4a      	ldr	r3, [pc, #296]	; (800488c <HAL_RCC_OscConfig+0x270>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476c:	4b47      	ldr	r3, [pc, #284]	; (800488c <HAL_RCC_OscConfig+0x270>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004774:	2b0c      	cmp	r3, #12
 8004776:	d11c      	bne.n	80047b2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004778:	4b44      	ldr	r3, [pc, #272]	; (800488c <HAL_RCC_OscConfig+0x270>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d116      	bne.n	80047b2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004784:	4b41      	ldr	r3, [pc, #260]	; (800488c <HAL_RCC_OscConfig+0x270>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_RCC_OscConfig+0x180>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d001      	beq.n	800479c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e18f      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479c:	4b3b      	ldr	r3, [pc, #236]	; (800488c <HAL_RCC_OscConfig+0x270>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4938      	ldr	r1, [pc, #224]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047b0:	e03a      	b.n	8004828 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d020      	beq.n	80047fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047ba:	4b35      	ldr	r3, [pc, #212]	; (8004890 <HAL_RCC_OscConfig+0x274>)
 80047bc:	2201      	movs	r2, #1
 80047be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd fd32 	bl	8002228 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c8:	f7fd fd2e 	bl	8002228 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e170      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047da:	4b2c      	ldr	r3, [pc, #176]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e6:	4b29      	ldr	r3, [pc, #164]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4925      	ldr	r1, [pc, #148]	; (800488c <HAL_RCC_OscConfig+0x270>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]
 80047fa:	e015      	b.n	8004828 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fc:	4b24      	ldr	r3, [pc, #144]	; (8004890 <HAL_RCC_OscConfig+0x274>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004802:	f7fd fd11 	bl	8002228 <HAL_GetTick>
 8004806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004808:	e008      	b.n	800481c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800480a:	f7fd fd0d 	bl	8002228 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e14f      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481c:	4b1b      	ldr	r3, [pc, #108]	; (800488c <HAL_RCC_OscConfig+0x270>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1f0      	bne.n	800480a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d037      	beq.n	80048a4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d016      	beq.n	800486a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483c:	4b15      	ldr	r3, [pc, #84]	; (8004894 <HAL_RCC_OscConfig+0x278>)
 800483e:	2201      	movs	r2, #1
 8004840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004842:	f7fd fcf1 	bl	8002228 <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004848:	e008      	b.n	800485c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484a:	f7fd fced 	bl	8002228 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e12f      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <HAL_RCC_OscConfig+0x270>)
 800485e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCC_OscConfig+0x22e>
 8004868:	e01c      	b.n	80048a4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486a:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <HAL_RCC_OscConfig+0x278>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fd fcda 	bl	8002228 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004876:	e00f      	b.n	8004898 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004878:	f7fd fcd6 	bl	8002228 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d908      	bls.n	8004898 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e118      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800
 8004890:	42470000 	.word	0x42470000
 8004894:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004898:	4b8a      	ldr	r3, [pc, #552]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 800489a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e9      	bne.n	8004878 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 8097 	beq.w	80049e0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b6:	4b83      	ldr	r3, [pc, #524]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	4b7f      	ldr	r3, [pc, #508]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	4a7e      	ldr	r2, [pc, #504]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 80048cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d0:	6413      	str	r3, [r2, #64]	; 0x40
 80048d2:	4b7c      	ldr	r3, [pc, #496]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048de:	2301      	movs	r3, #1
 80048e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e2:	4b79      	ldr	r3, [pc, #484]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d118      	bne.n	8004920 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ee:	4b76      	ldr	r3, [pc, #472]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a75      	ldr	r2, [pc, #468]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 80048f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048fa:	f7fd fc95 	bl	8002228 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004902:	f7fd fc91 	bl	8002228 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e0d3      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004914:	4b6c      	ldr	r3, [pc, #432]	; (8004ac8 <HAL_RCC_OscConfig+0x4ac>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0f0      	beq.n	8004902 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d106      	bne.n	8004936 <HAL_RCC_OscConfig+0x31a>
 8004928:	4b66      	ldr	r3, [pc, #408]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492c:	4a65      	ldr	r2, [pc, #404]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 800492e:	f043 0301 	orr.w	r3, r3, #1
 8004932:	6713      	str	r3, [r2, #112]	; 0x70
 8004934:	e01c      	b.n	8004970 <HAL_RCC_OscConfig+0x354>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b05      	cmp	r3, #5
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0x33c>
 800493e:	4b61      	ldr	r3, [pc, #388]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 8004940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004942:	4a60      	ldr	r2, [pc, #384]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 8004944:	f043 0304 	orr.w	r3, r3, #4
 8004948:	6713      	str	r3, [r2, #112]	; 0x70
 800494a:	4b5e      	ldr	r3, [pc, #376]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 800494c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494e:	4a5d      	ldr	r2, [pc, #372]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6713      	str	r3, [r2, #112]	; 0x70
 8004956:	e00b      	b.n	8004970 <HAL_RCC_OscConfig+0x354>
 8004958:	4b5a      	ldr	r3, [pc, #360]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 800495a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495c:	4a59      	ldr	r2, [pc, #356]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 800495e:	f023 0301 	bic.w	r3, r3, #1
 8004962:	6713      	str	r3, [r2, #112]	; 0x70
 8004964:	4b57      	ldr	r3, [pc, #348]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 8004966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004968:	4a56      	ldr	r2, [pc, #344]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 800496a:	f023 0304 	bic.w	r3, r3, #4
 800496e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d015      	beq.n	80049a4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004978:	f7fd fc56 	bl	8002228 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497e:	e00a      	b.n	8004996 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004980:	f7fd fc52 	bl	8002228 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	; 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e092      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004996:	4b4b      	ldr	r3, [pc, #300]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0ee      	beq.n	8004980 <HAL_RCC_OscConfig+0x364>
 80049a2:	e014      	b.n	80049ce <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a4:	f7fd fc40 	bl	8002228 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ac:	f7fd fc3c 	bl	8002228 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e07c      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c2:	4b40      	ldr	r3, [pc, #256]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 80049c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1ee      	bne.n	80049ac <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d105      	bne.n	80049e0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d4:	4b3b      	ldr	r3, [pc, #236]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	4a3a      	ldr	r2, [pc, #232]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 80049da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d068      	beq.n	8004aba <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049e8:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 030c 	and.w	r3, r3, #12
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d060      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d145      	bne.n	8004a88 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fc:	4b33      	ldr	r3, [pc, #204]	; (8004acc <HAL_RCC_OscConfig+0x4b0>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fd fc11 	bl	8002228 <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0a:	f7fd fc0d 	bl	8002228 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e04f      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1c:	4b29      	ldr	r3, [pc, #164]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f0      	bne.n	8004a0a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	019b      	lsls	r3, r3, #6
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	085b      	lsrs	r3, r3, #1
 8004a40:	3b01      	subs	r3, #1
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	061b      	lsls	r3, r3, #24
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	071b      	lsls	r3, r3, #28
 8004a54:	491b      	ldr	r1, [pc, #108]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a5a:	4b1c      	ldr	r3, [pc, #112]	; (8004acc <HAL_RCC_OscConfig+0x4b0>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a60:	f7fd fbe2 	bl	8002228 <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a68:	f7fd fbde 	bl	8002228 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d901      	bls.n	8004a7a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e020      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0f0      	beq.n	8004a68 <HAL_RCC_OscConfig+0x44c>
 8004a86:	e018      	b.n	8004aba <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a88:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_RCC_OscConfig+0x4b0>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8e:	f7fd fbcb 	bl	8002228 <HAL_GetTick>
 8004a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a96:	f7fd fbc7 	bl	8002228 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e009      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <HAL_RCC_OscConfig+0x4a8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x47a>
 8004ab4:	e001      	b.n	8004aba <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	40007000 	.word	0x40007000
 8004acc:	42470060 	.word	0x42470060

08004ad0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e083      	b.n	8004bea <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	7f5b      	ldrb	r3, [r3, #29]
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fd f844 	bl	8001b80 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2202      	movs	r2, #2
 8004afc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	22ca      	movs	r2, #202	; 0xca
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2253      	movs	r2, #83	; 0x53
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 faa8 	bl	8005064 <RTC_EnterInitMode>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d008      	beq.n	8004b2c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	22ff      	movs	r2, #255	; 0xff
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2204      	movs	r2, #4
 8004b26:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e05e      	b.n	8004bea <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6899      	ldr	r1, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68d2      	ldr	r2, [r2, #12]
 8004b66:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6919      	ldr	r1, [r3, #16]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	041a      	lsls	r2, r3, #16
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b8a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0320 	and.w	r3, r3, #32
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10e      	bne.n	8004bb8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fa3a 	bl	8005014 <HAL_RTC_WaitForSynchro>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d008      	beq.n	8004bb8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	22ff      	movs	r2, #255	; 0xff
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2204      	movs	r2, #4
 8004bb2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e018      	b.n	8004bea <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bc6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	22ff      	movs	r2, #255	; 0xff
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004be8:	2300      	movs	r3, #0
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004bf2:	b590      	push	{r4, r7, lr}
 8004bf4:	b087      	sub	sp, #28
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	7f1b      	ldrb	r3, [r3, #28]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_RTC_SetTime+0x1c>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e0aa      	b.n	8004d64 <HAL_RTC_SetTime+0x172>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2202      	movs	r2, #2
 8004c18:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d126      	bne.n	8004c6e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2200      	movs	r2, #0
 8004c32:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fa3f 	bl	80050bc <RTC_ByteToBcd2>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	785b      	ldrb	r3, [r3, #1]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fa38 	bl	80050bc <RTC_ByteToBcd2>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c50:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	789b      	ldrb	r3, [r3, #2]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fa30 	bl	80050bc <RTC_ByteToBcd2>
 8004c5c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c5e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	78db      	ldrb	r3, [r3, #3]
 8004c66:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e018      	b.n	8004ca0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d102      	bne.n	8004c82 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	785b      	ldrb	r3, [r3, #1]
 8004c8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c8e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c94:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	78db      	ldrb	r3, [r3, #3]
 8004c9a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	22ca      	movs	r2, #202	; 0xca
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2253      	movs	r2, #83	; 0x53
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f9d7 	bl	8005064 <RTC_EnterInitMode>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00b      	beq.n	8004cd4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	22ff      	movs	r2, #255	; 0xff
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e047      	b.n	8004d64 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004cde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ce2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cf2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6899      	ldr	r1, [r3, #8]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d1a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d111      	bne.n	8004d4e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f972 	bl	8005014 <HAL_RTC_WaitForSynchro>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	22ff      	movs	r2, #255	; 0xff
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2204      	movs	r2, #4
 8004d42:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e00a      	b.n	8004d64 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	22ff      	movs	r2, #255	; 0xff
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8004d62:	2300      	movs	r3, #0
  }
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	371c      	adds	r7, #28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd90      	pop	{r4, r7, pc}

08004d6c <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004d9e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004da2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	0c1b      	lsrs	r3, r3, #16
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	0a1b      	lsrs	r3, r3, #8
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11a      	bne.n	8004e1e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f983 	bl	80050f8 <RTC_Bcd2ToByte>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 f97a 	bl	80050f8 <RTC_Bcd2ToByte>
 8004e04:	4603      	mov	r3, r0
 8004e06:	461a      	mov	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	789b      	ldrb	r3, [r3, #2]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 f971 	bl	80050f8 <RTC_Bcd2ToByte>
 8004e16:	4603      	mov	r3, r0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3718      	adds	r7, #24
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b087      	sub	sp, #28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	7f1b      	ldrb	r3, [r3, #28]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_RTC_SetDate+0x1c>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e094      	b.n	8004f6e <HAL_RTC_SetDate+0x146>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10e      	bne.n	8004e74 <HAL_RTC_SetDate+0x4c>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	785b      	ldrb	r3, [r3, #1]
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d008      	beq.n	8004e74 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	785b      	ldrb	r3, [r3, #1]
 8004e66:	f023 0310 	bic.w	r3, r3, #16
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	330a      	adds	r3, #10
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d11c      	bne.n	8004eb4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	78db      	ldrb	r3, [r3, #3]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f91c 	bl	80050bc <RTC_ByteToBcd2>
 8004e84:	4603      	mov	r3, r0
 8004e86:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	785b      	ldrb	r3, [r3, #1]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 f915 	bl	80050bc <RTC_ByteToBcd2>
 8004e92:	4603      	mov	r3, r0
 8004e94:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004e96:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	789b      	ldrb	r3, [r3, #2]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f90d 	bl	80050bc <RTC_ByteToBcd2>
 8004ea2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004ea4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e00e      	b.n	8004ed2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	78db      	ldrb	r3, [r3, #3]
 8004eb8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ec0:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004ec6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	22ca      	movs	r2, #202	; 0xca
 8004ed8:	625a      	str	r2, [r3, #36]	; 0x24
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2253      	movs	r2, #83	; 0x53
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	f000 f8be 	bl	8005064 <RTC_EnterInitMode>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	22ff      	movs	r2, #255	; 0xff
 8004ef4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e033      	b.n	8004f6e <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f14:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f24:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d111      	bne.n	8004f58 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f86d 	bl	8005014 <HAL_RTC_WaitForSynchro>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00b      	beq.n	8004f58 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	22ff      	movs	r2, #255	; 0xff
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e00a      	b.n	8004f6e <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	22ff      	movs	r2, #255	; 0xff
 8004f5e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
  }
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd90      	pop	{r4, r7, pc}

08004f76 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f94:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	0a1b      	lsrs	r3, r3, #8
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f003 031f 	and.w	r3, r3, #31
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	0b5b      	lsrs	r3, r3, #13
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d11a      	bne.n	800500a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	78db      	ldrb	r3, [r3, #3]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f88d 	bl	80050f8 <RTC_Bcd2ToByte>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	785b      	ldrb	r3, [r3, #1]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 f884 	bl	80050f8 <RTC_Bcd2ToByte>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	789b      	ldrb	r3, [r3, #2]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 f87b 	bl	80050f8 <RTC_Bcd2ToByte>
 8005002:	4603      	mov	r3, r0
 8005004:	461a      	mov	r2, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800502e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005030:	f7fd f8fa 	bl	8002228 <HAL_GetTick>
 8005034:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005036:	e009      	b.n	800504c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005038:	f7fd f8f6 	bl	8002228 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005046:	d901      	bls.n	800504c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e007      	b.n	800505c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f003 0320 	and.w	r3, r3, #32
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0ee      	beq.n	8005038 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d119      	bne.n	80050b2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005086:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005088:	f7fd f8ce 	bl	8002228 <HAL_GetTick>
 800508c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800508e:	e009      	b.n	80050a4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005090:	f7fd f8ca 	bl	8002228 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800509e:	d901      	bls.n	80050a4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e007      	b.n	80050b4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0ee      	beq.n	8005090 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	4603      	mov	r3, r0
 80050c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80050ca:	e005      	b.n	80050d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3301      	adds	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	3b0a      	subs	r3, #10
 80050d6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	2b09      	cmp	r3, #9
 80050dc:	d8f6      	bhi.n	80050cc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	79fb      	ldrb	r3, [r7, #7]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	b2db      	uxtb	r3, r3
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	4603      	mov	r3, r0
 8005100:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	091b      	lsrs	r3, r3, #4
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	b2da      	uxtb	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	4413      	add	r3, r2
 8005126:	b2db      	uxtb	r3, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3350      	adds	r3, #80	; 0x50
 800514a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4413      	add	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	601a      	str	r2, [r3, #0]
}
 800515c:	bf00      	nop
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e01d      	b.n	80051b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc fd0c 	bl	8001bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4619      	mov	r1, r3
 80051a6:	4610      	mov	r0, r2
 80051a8:	f000 f82e 	bl	8005208 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2202      	movs	r2, #2
 80051ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f003 0307 	and.w	r3, r3, #7
 80051d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b06      	cmp	r3, #6
 80051de:	d007      	beq.n	80051f0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
	...

08005208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a40      	ldr	r2, [pc, #256]	; (800531c <TIM_Base_SetConfig+0x114>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <TIM_Base_SetConfig+0x40>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005226:	d00f      	beq.n	8005248 <TIM_Base_SetConfig+0x40>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a3d      	ldr	r2, [pc, #244]	; (8005320 <TIM_Base_SetConfig+0x118>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00b      	beq.n	8005248 <TIM_Base_SetConfig+0x40>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a3c      	ldr	r2, [pc, #240]	; (8005324 <TIM_Base_SetConfig+0x11c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_Base_SetConfig+0x40>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a3b      	ldr	r2, [pc, #236]	; (8005328 <TIM_Base_SetConfig+0x120>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_Base_SetConfig+0x40>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a3a      	ldr	r2, [pc, #232]	; (800532c <TIM_Base_SetConfig+0x124>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d108      	bne.n	800525a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2f      	ldr	r2, [pc, #188]	; (800531c <TIM_Base_SetConfig+0x114>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d02b      	beq.n	80052ba <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005268:	d027      	beq.n	80052ba <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2c      	ldr	r2, [pc, #176]	; (8005320 <TIM_Base_SetConfig+0x118>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d023      	beq.n	80052ba <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2b      	ldr	r2, [pc, #172]	; (8005324 <TIM_Base_SetConfig+0x11c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d01f      	beq.n	80052ba <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2a      	ldr	r2, [pc, #168]	; (8005328 <TIM_Base_SetConfig+0x120>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01b      	beq.n	80052ba <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a29      	ldr	r2, [pc, #164]	; (800532c <TIM_Base_SetConfig+0x124>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d017      	beq.n	80052ba <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a28      	ldr	r2, [pc, #160]	; (8005330 <TIM_Base_SetConfig+0x128>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d013      	beq.n	80052ba <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a27      	ldr	r2, [pc, #156]	; (8005334 <TIM_Base_SetConfig+0x12c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00f      	beq.n	80052ba <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a26      	ldr	r2, [pc, #152]	; (8005338 <TIM_Base_SetConfig+0x130>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00b      	beq.n	80052ba <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a25      	ldr	r2, [pc, #148]	; (800533c <TIM_Base_SetConfig+0x134>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d007      	beq.n	80052ba <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a24      	ldr	r2, [pc, #144]	; (8005340 <TIM_Base_SetConfig+0x138>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d003      	beq.n	80052ba <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a23      	ldr	r2, [pc, #140]	; (8005344 <TIM_Base_SetConfig+0x13c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d108      	bne.n	80052cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	689a      	ldr	r2, [r3, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a0a      	ldr	r2, [pc, #40]	; (800531c <TIM_Base_SetConfig+0x114>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_Base_SetConfig+0xf8>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a0c      	ldr	r2, [pc, #48]	; (800532c <TIM_Base_SetConfig+0x124>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d103      	bne.n	8005308 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	615a      	str	r2, [r3, #20]
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40010000 	.word	0x40010000
 8005320:	40000400 	.word	0x40000400
 8005324:	40000800 	.word	0x40000800
 8005328:	40000c00 	.word	0x40000c00
 800532c:	40010400 	.word	0x40010400
 8005330:	40014000 	.word	0x40014000
 8005334:	40014400 	.word	0x40014400
 8005338:	40014800 	.word	0x40014800
 800533c:	40001800 	.word	0x40001800
 8005340:	40001c00 	.word	0x40001c00
 8005344:	40002000 	.word	0x40002000

08005348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e05a      	b.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a21      	ldr	r2, [pc, #132]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d01d      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d018      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1a      	ldr	r2, [pc, #104]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d10c      	bne.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40010000 	.word	0x40010000
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40010400 	.word	0x40010400
 8005438:	40014000 	.word	0x40014000
 800543c:	40001800 	.word	0x40001800

08005440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e03f      	b.n	80054d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fc fbee 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2224      	movs	r2, #36	; 0x24
 8005470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fbf1 	bl	8005c6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695a      	ldr	r2, [r3, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2220      	movs	r2, #32
 80054c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b088      	sub	sp, #32
 80054de:	af02      	add	r7, sp, #8
 80054e0:	60f8      	str	r0, [r7, #12]
 80054e2:	60b9      	str	r1, [r7, #8]
 80054e4:	603b      	str	r3, [r7, #0]
 80054e6:	4613      	mov	r3, r2
 80054e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	f040 8083 	bne.w	8005602 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_UART_Transmit+0x2e>
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e07b      	b.n	8005604 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_UART_Transmit+0x40>
 8005516:	2302      	movs	r3, #2
 8005518:	e074      	b.n	8005604 <HAL_UART_Transmit+0x12a>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2221      	movs	r2, #33	; 0x21
 800552c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005530:	f7fc fe7a 	bl	8002228 <HAL_GetTick>
 8005534:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	88fa      	ldrh	r2, [r7, #6]
 800553a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	88fa      	ldrh	r2, [r7, #6]
 8005540:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800554a:	e042      	b.n	80055d2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005550:	b29b      	uxth	r3, r3
 8005552:	3b01      	subs	r3, #1
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005562:	d122      	bne.n	80055aa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2200      	movs	r2, #0
 800556c:	2180      	movs	r1, #128	; 0x80
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 fa10 	bl	8005994 <UART_WaitOnFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e042      	b.n	8005604 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005590:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	3302      	adds	r3, #2
 800559e:	60bb      	str	r3, [r7, #8]
 80055a0:	e017      	b.n	80055d2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	3301      	adds	r3, #1
 80055a6:	60bb      	str	r3, [r7, #8]
 80055a8:	e013      	b.n	80055d2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2200      	movs	r2, #0
 80055b2:	2180      	movs	r1, #128	; 0x80
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 f9ed 	bl	8005994 <UART_WaitOnFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e01f      	b.n	8005604 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	60ba      	str	r2, [r7, #8]
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1b7      	bne.n	800554c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2200      	movs	r2, #0
 80055e4:	2140      	movs	r1, #64	; 0x40
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 f9d4 	bl	8005994 <UART_WaitOnFlagUntilTimeout>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e006      	b.n	8005604 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	e000      	b.n	8005604 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005602:	2302      	movs	r3, #2
  }
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800561c:	2300      	movs	r3, #0
 800561e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b20      	cmp	r3, #32
 800562a:	f040 8090 	bne.w	800574e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_UART_Receive+0x2e>
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e088      	b.n	8005750 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_UART_Receive+0x40>
 8005648:	2302      	movs	r3, #2
 800564a:	e081      	b.n	8005750 <HAL_UART_Receive+0x144>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2222      	movs	r2, #34	; 0x22
 800565e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005662:	f7fc fde1 	bl	8002228 <HAL_GetTick>
 8005666:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	88fa      	ldrh	r2, [r7, #6]
 800566c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	88fa      	ldrh	r2, [r7, #6]
 8005672:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800567c:	e05c      	b.n	8005738 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005694:	d12b      	bne.n	80056ee <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2200      	movs	r2, #0
 800569e:	2120      	movs	r1, #32
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f977 	bl	8005994 <UART_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e04f      	b.n	8005750 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10c      	bne.n	80056d6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	3302      	adds	r3, #2
 80056d2:	60bb      	str	r3, [r7, #8]
 80056d4:	e030      	b.n	8005738 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	3301      	adds	r3, #1
 80056ea:	60bb      	str	r3, [r7, #8]
 80056ec:	e024      	b.n	8005738 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2120      	movs	r1, #32
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f94b 	bl	8005994 <UART_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e023      	b.n	8005750 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d108      	bne.n	8005722 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6859      	ldr	r1, [r3, #4]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	60ba      	str	r2, [r7, #8]
 800571c:	b2ca      	uxtb	r2, r1
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e00a      	b.n	8005738 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	1c59      	adds	r1, r3, #1
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d19d      	bne.n	800567e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800574a:	2300      	movs	r3, #0
 800574c:	e000      	b.n	8005750 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800574e:	2302      	movs	r3, #2
  }
}
 8005750:	4618      	mov	r0, r3
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b088      	sub	sp, #32
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005778:	2300      	movs	r3, #0
 800577a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10d      	bne.n	80057aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_UART_IRQHandler+0x52>
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f9e0 	bl	8005b68 <UART_Receive_IT>
      return;
 80057a8:	e0d1      	b.n	800594e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80b0 	beq.w	8005912 <HAL_UART_IRQHandler+0x1ba>
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d105      	bne.n	80057c8 <HAL_UART_IRQHandler+0x70>
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 80a5 	beq.w	8005912 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <HAL_UART_IRQHandler+0x90>
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e0:	f043 0201 	orr.w	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <HAL_UART_IRQHandler+0xb0>
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d005      	beq.n	8005808 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005800:	f043 0202 	orr.w	r2, r3, #2
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HAL_UART_IRQHandler+0xd0>
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	f043 0204 	orr.w	r2, r3, #4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f003 0308 	and.w	r3, r3, #8
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00f      	beq.n	8005852 <HAL_UART_IRQHandler+0xfa>
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f003 0320 	and.w	r3, r3, #32
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <HAL_UART_IRQHandler+0xee>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584a:	f043 0208 	orr.w	r2, r3, #8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d078      	beq.n	800594c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	f003 0320 	and.w	r3, r3, #32
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <HAL_UART_IRQHandler+0x11c>
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f97a 	bl	8005b68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b40      	cmp	r3, #64	; 0x40
 8005880:	bf0c      	ite	eq
 8005882:	2301      	moveq	r3, #1
 8005884:	2300      	movne	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	f003 0308 	and.w	r3, r3, #8
 8005892:	2b00      	cmp	r3, #0
 8005894:	d102      	bne.n	800589c <HAL_UART_IRQHandler+0x144>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d031      	beq.n	8005900 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f8c3 	bl	8005a28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d123      	bne.n	80058f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695a      	ldr	r2, [r3, #20]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d013      	beq.n	80058f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058cc:	4a21      	ldr	r2, [pc, #132]	; (8005954 <HAL_UART_IRQHandler+0x1fc>)
 80058ce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fd fc6f 	bl	80031b8 <HAL_DMA_Abort_IT>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d016      	beq.n	800590e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058ea:	4610      	mov	r0, r2
 80058ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ee:	e00e      	b.n	800590e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f845 	bl	8005980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f6:	e00a      	b.n	800590e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f841 	bl	8005980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058fe:	e006      	b.n	800590e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f83d 	bl	8005980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800590c:	e01e      	b.n	800594c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590e:	bf00      	nop
    return;
 8005910:	e01c      	b.n	800594c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005918:	2b00      	cmp	r3, #0
 800591a:	d008      	beq.n	800592e <HAL_UART_IRQHandler+0x1d6>
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f8b0 	bl	8005a8c <UART_Transmit_IT>
    return;
 800592c:	e00f      	b.n	800594e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <HAL_UART_IRQHandler+0x1f6>
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 f8f8 	bl	8005b38 <UART_EndTransmit_IT>
    return;
 8005948:	bf00      	nop
 800594a:	e000      	b.n	800594e <HAL_UART_IRQHandler+0x1f6>
    return;
 800594c:	bf00      	nop
  }
}
 800594e:	3720      	adds	r7, #32
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	08005a65 	.word	0x08005a65

08005958 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a4:	e02c      	b.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059ac:	d028      	beq.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80059b4:	f7fc fc38 	bl	8002228 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d21d      	bcs.n	8005a00 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80059d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	695a      	ldr	r2, [r3, #20]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f022 0201 	bic.w	r2, r2, #1
 80059e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e00f      	b.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	bf0c      	ite	eq
 8005a10:	2301      	moveq	r3, #1
 8005a12:	2300      	movne	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d0c3      	beq.n	80059a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695a      	ldr	r2, [r3, #20]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0201 	bic.w	r2, r2, #1
 8005a4e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f7ff ff7e 	bl	8005980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b21      	cmp	r3, #33	; 0x21
 8005a9e:	d144      	bne.n	8005b2a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa8:	d11a      	bne.n	8005ae0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005abe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	1c9a      	adds	r2, r3, #2
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	621a      	str	r2, [r3, #32]
 8005ad2:	e00e      	b.n	8005af2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	1c5a      	adds	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	621a      	str	r2, [r3, #32]
 8005ade:	e008      	b.n	8005af2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	1c59      	adds	r1, r3, #1
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6211      	str	r1, [r2, #32]
 8005aea:	781a      	ldrb	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	4619      	mov	r1, r3
 8005b00:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10f      	bne.n	8005b26 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b26:	2300      	movs	r3, #0
 8005b28:	e000      	b.n	8005b2c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005b2a:	2302      	movs	r3, #2
  }
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fefd 	bl	8005958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2b22      	cmp	r3, #34	; 0x22
 8005b7a:	d171      	bne.n	8005c60 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b84:	d123      	bne.n	8005bce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10e      	bne.n	8005bb2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005baa:	1c9a      	adds	r2, r3, #2
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	629a      	str	r2, [r3, #40]	; 0x28
 8005bb0:	e029      	b.n	8005c06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	629a      	str	r2, [r3, #40]	; 0x28
 8005bcc:	e01b      	b.n	8005c06 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6858      	ldr	r0, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	1c59      	adds	r1, r3, #1
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6291      	str	r1, [r2, #40]	; 0x28
 8005be6:	b2c2      	uxtb	r2, r0
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e00c      	b.n	8005c06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	b2da      	uxtb	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	1c58      	adds	r0, r3, #1
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	6288      	str	r0, [r1, #40]	; 0x28
 8005bfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c02:	b2d2      	uxtb	r2, r2
 8005c04:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	4619      	mov	r1, r3
 8005c14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d120      	bne.n	8005c5c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0220 	bic.w	r2, r2, #32
 8005c28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695a      	ldr	r2, [r3, #20]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0201 	bic.w	r2, r2, #1
 8005c48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff fe8a 	bl	800596c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e002      	b.n	8005c62 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e000      	b.n	8005c62 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005c60:	2302      	movs	r3, #2
  }
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c70:	b085      	sub	sp, #20
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689a      	ldr	r2, [r3, #8]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	69db      	ldr	r3, [r3, #28]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005cae:	f023 030c 	bic.w	r3, r3, #12
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	68f9      	ldr	r1, [r7, #12]
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cda:	f040 818b 	bne.w	8005ff4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4ac1      	ldr	r2, [pc, #772]	; (8005fe8 <UART_SetConfig+0x37c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d005      	beq.n	8005cf4 <UART_SetConfig+0x88>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4abf      	ldr	r2, [pc, #764]	; (8005fec <UART_SetConfig+0x380>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	f040 80bd 	bne.w	8005e6e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cf4:	f7fd ffb4 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 8005cf8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	461d      	mov	r5, r3
 8005cfe:	f04f 0600 	mov.w	r6, #0
 8005d02:	46a8      	mov	r8, r5
 8005d04:	46b1      	mov	r9, r6
 8005d06:	eb18 0308 	adds.w	r3, r8, r8
 8005d0a:	eb49 0409 	adc.w	r4, r9, r9
 8005d0e:	4698      	mov	r8, r3
 8005d10:	46a1      	mov	r9, r4
 8005d12:	eb18 0805 	adds.w	r8, r8, r5
 8005d16:	eb49 0906 	adc.w	r9, r9, r6
 8005d1a:	f04f 0100 	mov.w	r1, #0
 8005d1e:	f04f 0200 	mov.w	r2, #0
 8005d22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d2e:	4688      	mov	r8, r1
 8005d30:	4691      	mov	r9, r2
 8005d32:	eb18 0005 	adds.w	r0, r8, r5
 8005d36:	eb49 0106 	adc.w	r1, r9, r6
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	461d      	mov	r5, r3
 8005d40:	f04f 0600 	mov.w	r6, #0
 8005d44:	196b      	adds	r3, r5, r5
 8005d46:	eb46 0406 	adc.w	r4, r6, r6
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	4623      	mov	r3, r4
 8005d4e:	f7fa ff6b 	bl	8000c28 <__aeabi_uldivmod>
 8005d52:	4603      	mov	r3, r0
 8005d54:	460c      	mov	r4, r1
 8005d56:	461a      	mov	r2, r3
 8005d58:	4ba5      	ldr	r3, [pc, #660]	; (8005ff0 <UART_SetConfig+0x384>)
 8005d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	461d      	mov	r5, r3
 8005d68:	f04f 0600 	mov.w	r6, #0
 8005d6c:	46a9      	mov	r9, r5
 8005d6e:	46b2      	mov	sl, r6
 8005d70:	eb19 0309 	adds.w	r3, r9, r9
 8005d74:	eb4a 040a 	adc.w	r4, sl, sl
 8005d78:	4699      	mov	r9, r3
 8005d7a:	46a2      	mov	sl, r4
 8005d7c:	eb19 0905 	adds.w	r9, r9, r5
 8005d80:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d84:	f04f 0100 	mov.w	r1, #0
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d98:	4689      	mov	r9, r1
 8005d9a:	4692      	mov	sl, r2
 8005d9c:	eb19 0005 	adds.w	r0, r9, r5
 8005da0:	eb4a 0106 	adc.w	r1, sl, r6
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	461d      	mov	r5, r3
 8005daa:	f04f 0600 	mov.w	r6, #0
 8005dae:	196b      	adds	r3, r5, r5
 8005db0:	eb46 0406 	adc.w	r4, r6, r6
 8005db4:	461a      	mov	r2, r3
 8005db6:	4623      	mov	r3, r4
 8005db8:	f7fa ff36 	bl	8000c28 <__aeabi_uldivmod>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4b8b      	ldr	r3, [pc, #556]	; (8005ff0 <UART_SetConfig+0x384>)
 8005dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dc8:	095b      	lsrs	r3, r3, #5
 8005dca:	2164      	movs	r1, #100	; 0x64
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	3332      	adds	r3, #50	; 0x32
 8005dd6:	4a86      	ldr	r2, [pc, #536]	; (8005ff0 <UART_SetConfig+0x384>)
 8005dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005de4:	4498      	add	r8, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	461d      	mov	r5, r3
 8005dea:	f04f 0600 	mov.w	r6, #0
 8005dee:	46a9      	mov	r9, r5
 8005df0:	46b2      	mov	sl, r6
 8005df2:	eb19 0309 	adds.w	r3, r9, r9
 8005df6:	eb4a 040a 	adc.w	r4, sl, sl
 8005dfa:	4699      	mov	r9, r3
 8005dfc:	46a2      	mov	sl, r4
 8005dfe:	eb19 0905 	adds.w	r9, r9, r5
 8005e02:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e06:	f04f 0100 	mov.w	r1, #0
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e1a:	4689      	mov	r9, r1
 8005e1c:	4692      	mov	sl, r2
 8005e1e:	eb19 0005 	adds.w	r0, r9, r5
 8005e22:	eb4a 0106 	adc.w	r1, sl, r6
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	461d      	mov	r5, r3
 8005e2c:	f04f 0600 	mov.w	r6, #0
 8005e30:	196b      	adds	r3, r5, r5
 8005e32:	eb46 0406 	adc.w	r4, r6, r6
 8005e36:	461a      	mov	r2, r3
 8005e38:	4623      	mov	r3, r4
 8005e3a:	f7fa fef5 	bl	8000c28 <__aeabi_uldivmod>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	460c      	mov	r4, r1
 8005e42:	461a      	mov	r2, r3
 8005e44:	4b6a      	ldr	r3, [pc, #424]	; (8005ff0 <UART_SetConfig+0x384>)
 8005e46:	fba3 1302 	umull	r1, r3, r3, r2
 8005e4a:	095b      	lsrs	r3, r3, #5
 8005e4c:	2164      	movs	r1, #100	; 0x64
 8005e4e:	fb01 f303 	mul.w	r3, r1, r3
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	3332      	adds	r3, #50	; 0x32
 8005e58:	4a65      	ldr	r2, [pc, #404]	; (8005ff0 <UART_SetConfig+0x384>)
 8005e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e5e:	095b      	lsrs	r3, r3, #5
 8005e60:	f003 0207 	and.w	r2, r3, #7
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4442      	add	r2, r8
 8005e6a:	609a      	str	r2, [r3, #8]
 8005e6c:	e26f      	b.n	800634e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e6e:	f7fd fee3 	bl	8003c38 <HAL_RCC_GetPCLK1Freq>
 8005e72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	461d      	mov	r5, r3
 8005e78:	f04f 0600 	mov.w	r6, #0
 8005e7c:	46a8      	mov	r8, r5
 8005e7e:	46b1      	mov	r9, r6
 8005e80:	eb18 0308 	adds.w	r3, r8, r8
 8005e84:	eb49 0409 	adc.w	r4, r9, r9
 8005e88:	4698      	mov	r8, r3
 8005e8a:	46a1      	mov	r9, r4
 8005e8c:	eb18 0805 	adds.w	r8, r8, r5
 8005e90:	eb49 0906 	adc.w	r9, r9, r6
 8005e94:	f04f 0100 	mov.w	r1, #0
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005ea0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005ea4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ea8:	4688      	mov	r8, r1
 8005eaa:	4691      	mov	r9, r2
 8005eac:	eb18 0005 	adds.w	r0, r8, r5
 8005eb0:	eb49 0106 	adc.w	r1, r9, r6
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	461d      	mov	r5, r3
 8005eba:	f04f 0600 	mov.w	r6, #0
 8005ebe:	196b      	adds	r3, r5, r5
 8005ec0:	eb46 0406 	adc.w	r4, r6, r6
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	f7fa feae 	bl	8000c28 <__aeabi_uldivmod>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4b47      	ldr	r3, [pc, #284]	; (8005ff0 <UART_SetConfig+0x384>)
 8005ed4:	fba3 2302 	umull	r2, r3, r3, r2
 8005ed8:	095b      	lsrs	r3, r3, #5
 8005eda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	461d      	mov	r5, r3
 8005ee2:	f04f 0600 	mov.w	r6, #0
 8005ee6:	46a9      	mov	r9, r5
 8005ee8:	46b2      	mov	sl, r6
 8005eea:	eb19 0309 	adds.w	r3, r9, r9
 8005eee:	eb4a 040a 	adc.w	r4, sl, sl
 8005ef2:	4699      	mov	r9, r3
 8005ef4:	46a2      	mov	sl, r4
 8005ef6:	eb19 0905 	adds.w	r9, r9, r5
 8005efa:	eb4a 0a06 	adc.w	sl, sl, r6
 8005efe:	f04f 0100 	mov.w	r1, #0
 8005f02:	f04f 0200 	mov.w	r2, #0
 8005f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f12:	4689      	mov	r9, r1
 8005f14:	4692      	mov	sl, r2
 8005f16:	eb19 0005 	adds.w	r0, r9, r5
 8005f1a:	eb4a 0106 	adc.w	r1, sl, r6
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	461d      	mov	r5, r3
 8005f24:	f04f 0600 	mov.w	r6, #0
 8005f28:	196b      	adds	r3, r5, r5
 8005f2a:	eb46 0406 	adc.w	r4, r6, r6
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4623      	mov	r3, r4
 8005f32:	f7fa fe79 	bl	8000c28 <__aeabi_uldivmod>
 8005f36:	4603      	mov	r3, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4b2c      	ldr	r3, [pc, #176]	; (8005ff0 <UART_SetConfig+0x384>)
 8005f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	2164      	movs	r1, #100	; 0x64
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	3332      	adds	r3, #50	; 0x32
 8005f50:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <UART_SetConfig+0x384>)
 8005f52:	fba2 2303 	umull	r2, r3, r2, r3
 8005f56:	095b      	lsrs	r3, r3, #5
 8005f58:	005b      	lsls	r3, r3, #1
 8005f5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f5e:	4498      	add	r8, r3
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	461d      	mov	r5, r3
 8005f64:	f04f 0600 	mov.w	r6, #0
 8005f68:	46a9      	mov	r9, r5
 8005f6a:	46b2      	mov	sl, r6
 8005f6c:	eb19 0309 	adds.w	r3, r9, r9
 8005f70:	eb4a 040a 	adc.w	r4, sl, sl
 8005f74:	4699      	mov	r9, r3
 8005f76:	46a2      	mov	sl, r4
 8005f78:	eb19 0905 	adds.w	r9, r9, r5
 8005f7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f80:	f04f 0100 	mov.w	r1, #0
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f94:	4689      	mov	r9, r1
 8005f96:	4692      	mov	sl, r2
 8005f98:	eb19 0005 	adds.w	r0, r9, r5
 8005f9c:	eb4a 0106 	adc.w	r1, sl, r6
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	461d      	mov	r5, r3
 8005fa6:	f04f 0600 	mov.w	r6, #0
 8005faa:	196b      	adds	r3, r5, r5
 8005fac:	eb46 0406 	adc.w	r4, r6, r6
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	4623      	mov	r3, r4
 8005fb4:	f7fa fe38 	bl	8000c28 <__aeabi_uldivmod>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4b0c      	ldr	r3, [pc, #48]	; (8005ff0 <UART_SetConfig+0x384>)
 8005fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fc4:	095b      	lsrs	r3, r3, #5
 8005fc6:	2164      	movs	r1, #100	; 0x64
 8005fc8:	fb01 f303 	mul.w	r3, r1, r3
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	3332      	adds	r3, #50	; 0x32
 8005fd2:	4a07      	ldr	r2, [pc, #28]	; (8005ff0 <UART_SetConfig+0x384>)
 8005fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	f003 0207 	and.w	r2, r3, #7
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4442      	add	r2, r8
 8005fe4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005fe6:	e1b2      	b.n	800634e <UART_SetConfig+0x6e2>
 8005fe8:	40011000 	.word	0x40011000
 8005fec:	40011400 	.word	0x40011400
 8005ff0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4ad7      	ldr	r2, [pc, #860]	; (8006358 <UART_SetConfig+0x6ec>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d005      	beq.n	800600a <UART_SetConfig+0x39e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4ad6      	ldr	r2, [pc, #856]	; (800635c <UART_SetConfig+0x6f0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	f040 80d1 	bne.w	80061ac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800600a:	f7fd fe29 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 800600e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	469a      	mov	sl, r3
 8006014:	f04f 0b00 	mov.w	fp, #0
 8006018:	46d0      	mov	r8, sl
 800601a:	46d9      	mov	r9, fp
 800601c:	eb18 0308 	adds.w	r3, r8, r8
 8006020:	eb49 0409 	adc.w	r4, r9, r9
 8006024:	4698      	mov	r8, r3
 8006026:	46a1      	mov	r9, r4
 8006028:	eb18 080a 	adds.w	r8, r8, sl
 800602c:	eb49 090b 	adc.w	r9, r9, fp
 8006030:	f04f 0100 	mov.w	r1, #0
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800603c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006040:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006044:	4688      	mov	r8, r1
 8006046:	4691      	mov	r9, r2
 8006048:	eb1a 0508 	adds.w	r5, sl, r8
 800604c:	eb4b 0609 	adc.w	r6, fp, r9
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4619      	mov	r1, r3
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	f04f 0400 	mov.w	r4, #0
 8006062:	0094      	lsls	r4, r2, #2
 8006064:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006068:	008b      	lsls	r3, r1, #2
 800606a:	461a      	mov	r2, r3
 800606c:	4623      	mov	r3, r4
 800606e:	4628      	mov	r0, r5
 8006070:	4631      	mov	r1, r6
 8006072:	f7fa fdd9 	bl	8000c28 <__aeabi_uldivmod>
 8006076:	4603      	mov	r3, r0
 8006078:	460c      	mov	r4, r1
 800607a:	461a      	mov	r2, r3
 800607c:	4bb8      	ldr	r3, [pc, #736]	; (8006360 <UART_SetConfig+0x6f4>)
 800607e:	fba3 2302 	umull	r2, r3, r3, r2
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	469b      	mov	fp, r3
 800608c:	f04f 0c00 	mov.w	ip, #0
 8006090:	46d9      	mov	r9, fp
 8006092:	46e2      	mov	sl, ip
 8006094:	eb19 0309 	adds.w	r3, r9, r9
 8006098:	eb4a 040a 	adc.w	r4, sl, sl
 800609c:	4699      	mov	r9, r3
 800609e:	46a2      	mov	sl, r4
 80060a0:	eb19 090b 	adds.w	r9, r9, fp
 80060a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060a8:	f04f 0100 	mov.w	r1, #0
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060bc:	4689      	mov	r9, r1
 80060be:	4692      	mov	sl, r2
 80060c0:	eb1b 0509 	adds.w	r5, fp, r9
 80060c4:	eb4c 060a 	adc.w	r6, ip, sl
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	4619      	mov	r1, r3
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	f04f 0400 	mov.w	r4, #0
 80060da:	0094      	lsls	r4, r2, #2
 80060dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060e0:	008b      	lsls	r3, r1, #2
 80060e2:	461a      	mov	r2, r3
 80060e4:	4623      	mov	r3, r4
 80060e6:	4628      	mov	r0, r5
 80060e8:	4631      	mov	r1, r6
 80060ea:	f7fa fd9d 	bl	8000c28 <__aeabi_uldivmod>
 80060ee:	4603      	mov	r3, r0
 80060f0:	460c      	mov	r4, r1
 80060f2:	461a      	mov	r2, r3
 80060f4:	4b9a      	ldr	r3, [pc, #616]	; (8006360 <UART_SetConfig+0x6f4>)
 80060f6:	fba3 1302 	umull	r1, r3, r3, r2
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	2164      	movs	r1, #100	; 0x64
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	3332      	adds	r3, #50	; 0x32
 8006108:	4a95      	ldr	r2, [pc, #596]	; (8006360 <UART_SetConfig+0x6f4>)
 800610a:	fba2 2303 	umull	r2, r3, r2, r3
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006114:	4498      	add	r8, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	469b      	mov	fp, r3
 800611a:	f04f 0c00 	mov.w	ip, #0
 800611e:	46d9      	mov	r9, fp
 8006120:	46e2      	mov	sl, ip
 8006122:	eb19 0309 	adds.w	r3, r9, r9
 8006126:	eb4a 040a 	adc.w	r4, sl, sl
 800612a:	4699      	mov	r9, r3
 800612c:	46a2      	mov	sl, r4
 800612e:	eb19 090b 	adds.w	r9, r9, fp
 8006132:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006136:	f04f 0100 	mov.w	r1, #0
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006142:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006146:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800614a:	4689      	mov	r9, r1
 800614c:	4692      	mov	sl, r2
 800614e:	eb1b 0509 	adds.w	r5, fp, r9
 8006152:	eb4c 060a 	adc.w	r6, ip, sl
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4619      	mov	r1, r3
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	f04f 0400 	mov.w	r4, #0
 8006168:	0094      	lsls	r4, r2, #2
 800616a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800616e:	008b      	lsls	r3, r1, #2
 8006170:	461a      	mov	r2, r3
 8006172:	4623      	mov	r3, r4
 8006174:	4628      	mov	r0, r5
 8006176:	4631      	mov	r1, r6
 8006178:	f7fa fd56 	bl	8000c28 <__aeabi_uldivmod>
 800617c:	4603      	mov	r3, r0
 800617e:	460c      	mov	r4, r1
 8006180:	461a      	mov	r2, r3
 8006182:	4b77      	ldr	r3, [pc, #476]	; (8006360 <UART_SetConfig+0x6f4>)
 8006184:	fba3 1302 	umull	r1, r3, r3, r2
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	2164      	movs	r1, #100	; 0x64
 800618c:	fb01 f303 	mul.w	r3, r1, r3
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	3332      	adds	r3, #50	; 0x32
 8006196:	4a72      	ldr	r2, [pc, #456]	; (8006360 <UART_SetConfig+0x6f4>)
 8006198:	fba2 2303 	umull	r2, r3, r2, r3
 800619c:	095b      	lsrs	r3, r3, #5
 800619e:	f003 020f 	and.w	r2, r3, #15
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4442      	add	r2, r8
 80061a8:	609a      	str	r2, [r3, #8]
 80061aa:	e0d0      	b.n	800634e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80061ac:	f7fd fd44 	bl	8003c38 <HAL_RCC_GetPCLK1Freq>
 80061b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	469a      	mov	sl, r3
 80061b6:	f04f 0b00 	mov.w	fp, #0
 80061ba:	46d0      	mov	r8, sl
 80061bc:	46d9      	mov	r9, fp
 80061be:	eb18 0308 	adds.w	r3, r8, r8
 80061c2:	eb49 0409 	adc.w	r4, r9, r9
 80061c6:	4698      	mov	r8, r3
 80061c8:	46a1      	mov	r9, r4
 80061ca:	eb18 080a 	adds.w	r8, r8, sl
 80061ce:	eb49 090b 	adc.w	r9, r9, fp
 80061d2:	f04f 0100 	mov.w	r1, #0
 80061d6:	f04f 0200 	mov.w	r2, #0
 80061da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061e6:	4688      	mov	r8, r1
 80061e8:	4691      	mov	r9, r2
 80061ea:	eb1a 0508 	adds.w	r5, sl, r8
 80061ee:	eb4b 0609 	adc.w	r6, fp, r9
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	4619      	mov	r1, r3
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	f04f 0400 	mov.w	r4, #0
 8006204:	0094      	lsls	r4, r2, #2
 8006206:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800620a:	008b      	lsls	r3, r1, #2
 800620c:	461a      	mov	r2, r3
 800620e:	4623      	mov	r3, r4
 8006210:	4628      	mov	r0, r5
 8006212:	4631      	mov	r1, r6
 8006214:	f7fa fd08 	bl	8000c28 <__aeabi_uldivmod>
 8006218:	4603      	mov	r3, r0
 800621a:	460c      	mov	r4, r1
 800621c:	461a      	mov	r2, r3
 800621e:	4b50      	ldr	r3, [pc, #320]	; (8006360 <UART_SetConfig+0x6f4>)
 8006220:	fba3 2302 	umull	r2, r3, r3, r2
 8006224:	095b      	lsrs	r3, r3, #5
 8006226:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	469b      	mov	fp, r3
 800622e:	f04f 0c00 	mov.w	ip, #0
 8006232:	46d9      	mov	r9, fp
 8006234:	46e2      	mov	sl, ip
 8006236:	eb19 0309 	adds.w	r3, r9, r9
 800623a:	eb4a 040a 	adc.w	r4, sl, sl
 800623e:	4699      	mov	r9, r3
 8006240:	46a2      	mov	sl, r4
 8006242:	eb19 090b 	adds.w	r9, r9, fp
 8006246:	eb4a 0a0c 	adc.w	sl, sl, ip
 800624a:	f04f 0100 	mov.w	r1, #0
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006256:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800625a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800625e:	4689      	mov	r9, r1
 8006260:	4692      	mov	sl, r2
 8006262:	eb1b 0509 	adds.w	r5, fp, r9
 8006266:	eb4c 060a 	adc.w	r6, ip, sl
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4619      	mov	r1, r3
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	f04f 0400 	mov.w	r4, #0
 800627c:	0094      	lsls	r4, r2, #2
 800627e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006282:	008b      	lsls	r3, r1, #2
 8006284:	461a      	mov	r2, r3
 8006286:	4623      	mov	r3, r4
 8006288:	4628      	mov	r0, r5
 800628a:	4631      	mov	r1, r6
 800628c:	f7fa fccc 	bl	8000c28 <__aeabi_uldivmod>
 8006290:	4603      	mov	r3, r0
 8006292:	460c      	mov	r4, r1
 8006294:	461a      	mov	r2, r3
 8006296:	4b32      	ldr	r3, [pc, #200]	; (8006360 <UART_SetConfig+0x6f4>)
 8006298:	fba3 1302 	umull	r1, r3, r3, r2
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	2164      	movs	r1, #100	; 0x64
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	3332      	adds	r3, #50	; 0x32
 80062aa:	4a2d      	ldr	r2, [pc, #180]	; (8006360 <UART_SetConfig+0x6f4>)
 80062ac:	fba2 2303 	umull	r2, r3, r2, r3
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b6:	4498      	add	r8, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	469b      	mov	fp, r3
 80062bc:	f04f 0c00 	mov.w	ip, #0
 80062c0:	46d9      	mov	r9, fp
 80062c2:	46e2      	mov	sl, ip
 80062c4:	eb19 0309 	adds.w	r3, r9, r9
 80062c8:	eb4a 040a 	adc.w	r4, sl, sl
 80062cc:	4699      	mov	r9, r3
 80062ce:	46a2      	mov	sl, r4
 80062d0:	eb19 090b 	adds.w	r9, r9, fp
 80062d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062d8:	f04f 0100 	mov.w	r1, #0
 80062dc:	f04f 0200 	mov.w	r2, #0
 80062e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062ec:	4689      	mov	r9, r1
 80062ee:	4692      	mov	sl, r2
 80062f0:	eb1b 0509 	adds.w	r5, fp, r9
 80062f4:	eb4c 060a 	adc.w	r6, ip, sl
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4619      	mov	r1, r3
 80062fe:	f04f 0200 	mov.w	r2, #0
 8006302:	f04f 0300 	mov.w	r3, #0
 8006306:	f04f 0400 	mov.w	r4, #0
 800630a:	0094      	lsls	r4, r2, #2
 800630c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006310:	008b      	lsls	r3, r1, #2
 8006312:	461a      	mov	r2, r3
 8006314:	4623      	mov	r3, r4
 8006316:	4628      	mov	r0, r5
 8006318:	4631      	mov	r1, r6
 800631a:	f7fa fc85 	bl	8000c28 <__aeabi_uldivmod>
 800631e:	4603      	mov	r3, r0
 8006320:	460c      	mov	r4, r1
 8006322:	461a      	mov	r2, r3
 8006324:	4b0e      	ldr	r3, [pc, #56]	; (8006360 <UART_SetConfig+0x6f4>)
 8006326:	fba3 1302 	umull	r1, r3, r3, r2
 800632a:	095b      	lsrs	r3, r3, #5
 800632c:	2164      	movs	r1, #100	; 0x64
 800632e:	fb01 f303 	mul.w	r3, r1, r3
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	3332      	adds	r3, #50	; 0x32
 8006338:	4a09      	ldr	r2, [pc, #36]	; (8006360 <UART_SetConfig+0x6f4>)
 800633a:	fba2 2303 	umull	r2, r3, r2, r3
 800633e:	095b      	lsrs	r3, r3, #5
 8006340:	f003 020f 	and.w	r2, r3, #15
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4442      	add	r2, r8
 800634a:	609a      	str	r2, [r3, #8]
}
 800634c:	e7ff      	b.n	800634e <UART_SetConfig+0x6e2>
 800634e:	bf00      	nop
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006358:	40011000 	.word	0x40011000
 800635c:	40011400 	.word	0x40011400
 8006360:	51eb851f 	.word	0x51eb851f

08006364 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006368:	4904      	ldr	r1, [pc, #16]	; (800637c <MX_FATFS_Init+0x18>)
 800636a:	4805      	ldr	r0, [pc, #20]	; (8006380 <MX_FATFS_Init+0x1c>)
 800636c:	f000 f8b0 	bl	80064d0 <FATFS_LinkDriver>
 8006370:	4603      	mov	r3, r0
 8006372:	461a      	mov	r2, r3
 8006374:	4b03      	ldr	r3, [pc, #12]	; (8006384 <MX_FATFS_Init+0x20>)
 8006376:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006378:	bf00      	nop
 800637a:	bd80      	pop	{r7, pc}
 800637c:	200005bc 	.word	0x200005bc
 8006380:	2000001c 	.word	0x2000001c
 8006384:	200005c0 	.word	0x200005c0

08006388 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006392:	4b06      	ldr	r3, [pc, #24]	; (80063ac <USER_initialize+0x24>)
 8006394:	2201      	movs	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <USER_initialize+0x24>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20000019 	.word	0x20000019

080063b0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80063ba:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <USER_status+0x24>)
 80063bc:	2201      	movs	r2, #1
 80063be:	701a      	strb	r2, [r3, #0]
    return Stat;
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <USER_status+0x24>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000019 	.word	0x20000019

080063d8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	603b      	str	r3, [r7, #0]
 80063e4:	4603      	mov	r3, r0
 80063e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80063e8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]
 8006400:	603b      	str	r3, [r7, #0]
 8006402:	4603      	mov	r3, r0
 8006404:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006406:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	4603      	mov	r3, r0
 800641c:	603a      	str	r2, [r7, #0]
 800641e:	71fb      	strb	r3, [r7, #7]
 8006420:	460b      	mov	r3, r1
 8006422:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	73fb      	strb	r3, [r7, #15]
    return res;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	4613      	mov	r3, r2
 8006444:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006446:	2301      	movs	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800644e:	4b1f      	ldr	r3, [pc, #124]	; (80064cc <FATFS_LinkDriverEx+0x94>)
 8006450:	7a5b      	ldrb	r3, [r3, #9]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d131      	bne.n	80064bc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006458:	4b1c      	ldr	r3, [pc, #112]	; (80064cc <FATFS_LinkDriverEx+0x94>)
 800645a:	7a5b      	ldrb	r3, [r3, #9]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	4b1a      	ldr	r3, [pc, #104]	; (80064cc <FATFS_LinkDriverEx+0x94>)
 8006462:	2100      	movs	r1, #0
 8006464:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006466:	4b19      	ldr	r3, [pc, #100]	; (80064cc <FATFS_LinkDriverEx+0x94>)
 8006468:	7a5b      	ldrb	r3, [r3, #9]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	4a17      	ldr	r2, [pc, #92]	; (80064cc <FATFS_LinkDriverEx+0x94>)
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006476:	4b15      	ldr	r3, [pc, #84]	; (80064cc <FATFS_LinkDriverEx+0x94>)
 8006478:	7a5b      	ldrb	r3, [r3, #9]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	461a      	mov	r2, r3
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <FATFS_LinkDriverEx+0x94>)
 8006480:	4413      	add	r3, r2
 8006482:	79fa      	ldrb	r2, [r7, #7]
 8006484:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006486:	4b11      	ldr	r3, [pc, #68]	; (80064cc <FATFS_LinkDriverEx+0x94>)
 8006488:	7a5b      	ldrb	r3, [r3, #9]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	b2d1      	uxtb	r1, r2
 8006490:	4a0e      	ldr	r2, [pc, #56]	; (80064cc <FATFS_LinkDriverEx+0x94>)
 8006492:	7251      	strb	r1, [r2, #9]
 8006494:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006496:	7dbb      	ldrb	r3, [r7, #22]
 8006498:	3330      	adds	r3, #48	; 0x30
 800649a:	b2da      	uxtb	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	3301      	adds	r3, #1
 80064a4:	223a      	movs	r2, #58	; 0x3a
 80064a6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	3302      	adds	r3, #2
 80064ac:	222f      	movs	r2, #47	; 0x2f
 80064ae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	3303      	adds	r3, #3
 80064b4:	2200      	movs	r2, #0
 80064b6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	20000224 	.word	0x20000224

080064d0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80064da:	2200      	movs	r2, #0
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7ff ffaa 	bl	8006438 <FATFS_LinkDriverEx>
 80064e4:	4603      	mov	r3, r0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <__errno>:
 80064f0:	4b01      	ldr	r3, [pc, #4]	; (80064f8 <__errno+0x8>)
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	20000030 	.word	0x20000030

080064fc <__libc_init_array>:
 80064fc:	b570      	push	{r4, r5, r6, lr}
 80064fe:	4e0d      	ldr	r6, [pc, #52]	; (8006534 <__libc_init_array+0x38>)
 8006500:	4c0d      	ldr	r4, [pc, #52]	; (8006538 <__libc_init_array+0x3c>)
 8006502:	1ba4      	subs	r4, r4, r6
 8006504:	10a4      	asrs	r4, r4, #2
 8006506:	2500      	movs	r5, #0
 8006508:	42a5      	cmp	r5, r4
 800650a:	d109      	bne.n	8006520 <__libc_init_array+0x24>
 800650c:	4e0b      	ldr	r6, [pc, #44]	; (800653c <__libc_init_array+0x40>)
 800650e:	4c0c      	ldr	r4, [pc, #48]	; (8006540 <__libc_init_array+0x44>)
 8006510:	f003 faf8 	bl	8009b04 <_init>
 8006514:	1ba4      	subs	r4, r4, r6
 8006516:	10a4      	asrs	r4, r4, #2
 8006518:	2500      	movs	r5, #0
 800651a:	42a5      	cmp	r5, r4
 800651c:	d105      	bne.n	800652a <__libc_init_array+0x2e>
 800651e:	bd70      	pop	{r4, r5, r6, pc}
 8006520:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006524:	4798      	blx	r3
 8006526:	3501      	adds	r5, #1
 8006528:	e7ee      	b.n	8006508 <__libc_init_array+0xc>
 800652a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800652e:	4798      	blx	r3
 8006530:	3501      	adds	r5, #1
 8006532:	e7f2      	b.n	800651a <__libc_init_array+0x1e>
 8006534:	08009e70 	.word	0x08009e70
 8006538:	08009e70 	.word	0x08009e70
 800653c:	08009e70 	.word	0x08009e70
 8006540:	08009e74 	.word	0x08009e74

08006544 <memset>:
 8006544:	4402      	add	r2, r0
 8006546:	4603      	mov	r3, r0
 8006548:	4293      	cmp	r3, r2
 800654a:	d100      	bne.n	800654e <memset+0xa>
 800654c:	4770      	bx	lr
 800654e:	f803 1b01 	strb.w	r1, [r3], #1
 8006552:	e7f9      	b.n	8006548 <memset+0x4>

08006554 <__cvt>:
 8006554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	ec55 4b10 	vmov	r4, r5, d0
 800655c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800655e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006562:	2d00      	cmp	r5, #0
 8006564:	460e      	mov	r6, r1
 8006566:	4691      	mov	r9, r2
 8006568:	4619      	mov	r1, r3
 800656a:	bfb8      	it	lt
 800656c:	4622      	movlt	r2, r4
 800656e:	462b      	mov	r3, r5
 8006570:	f027 0720 	bic.w	r7, r7, #32
 8006574:	bfbb      	ittet	lt
 8006576:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800657a:	461d      	movlt	r5, r3
 800657c:	2300      	movge	r3, #0
 800657e:	232d      	movlt	r3, #45	; 0x2d
 8006580:	bfb8      	it	lt
 8006582:	4614      	movlt	r4, r2
 8006584:	2f46      	cmp	r7, #70	; 0x46
 8006586:	700b      	strb	r3, [r1, #0]
 8006588:	d004      	beq.n	8006594 <__cvt+0x40>
 800658a:	2f45      	cmp	r7, #69	; 0x45
 800658c:	d100      	bne.n	8006590 <__cvt+0x3c>
 800658e:	3601      	adds	r6, #1
 8006590:	2102      	movs	r1, #2
 8006592:	e000      	b.n	8006596 <__cvt+0x42>
 8006594:	2103      	movs	r1, #3
 8006596:	ab03      	add	r3, sp, #12
 8006598:	9301      	str	r3, [sp, #4]
 800659a:	ab02      	add	r3, sp, #8
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	4632      	mov	r2, r6
 80065a0:	4653      	mov	r3, sl
 80065a2:	ec45 4b10 	vmov	d0, r4, r5
 80065a6:	f000 fcef 	bl	8006f88 <_dtoa_r>
 80065aa:	2f47      	cmp	r7, #71	; 0x47
 80065ac:	4680      	mov	r8, r0
 80065ae:	d102      	bne.n	80065b6 <__cvt+0x62>
 80065b0:	f019 0f01 	tst.w	r9, #1
 80065b4:	d026      	beq.n	8006604 <__cvt+0xb0>
 80065b6:	2f46      	cmp	r7, #70	; 0x46
 80065b8:	eb08 0906 	add.w	r9, r8, r6
 80065bc:	d111      	bne.n	80065e2 <__cvt+0x8e>
 80065be:	f898 3000 	ldrb.w	r3, [r8]
 80065c2:	2b30      	cmp	r3, #48	; 0x30
 80065c4:	d10a      	bne.n	80065dc <__cvt+0x88>
 80065c6:	2200      	movs	r2, #0
 80065c8:	2300      	movs	r3, #0
 80065ca:	4620      	mov	r0, r4
 80065cc:	4629      	mov	r1, r5
 80065ce:	f7fa fa9b 	bl	8000b08 <__aeabi_dcmpeq>
 80065d2:	b918      	cbnz	r0, 80065dc <__cvt+0x88>
 80065d4:	f1c6 0601 	rsb	r6, r6, #1
 80065d8:	f8ca 6000 	str.w	r6, [sl]
 80065dc:	f8da 3000 	ldr.w	r3, [sl]
 80065e0:	4499      	add	r9, r3
 80065e2:	2200      	movs	r2, #0
 80065e4:	2300      	movs	r3, #0
 80065e6:	4620      	mov	r0, r4
 80065e8:	4629      	mov	r1, r5
 80065ea:	f7fa fa8d 	bl	8000b08 <__aeabi_dcmpeq>
 80065ee:	b938      	cbnz	r0, 8006600 <__cvt+0xac>
 80065f0:	2230      	movs	r2, #48	; 0x30
 80065f2:	9b03      	ldr	r3, [sp, #12]
 80065f4:	454b      	cmp	r3, r9
 80065f6:	d205      	bcs.n	8006604 <__cvt+0xb0>
 80065f8:	1c59      	adds	r1, r3, #1
 80065fa:	9103      	str	r1, [sp, #12]
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	e7f8      	b.n	80065f2 <__cvt+0x9e>
 8006600:	f8cd 900c 	str.w	r9, [sp, #12]
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006608:	eba3 0308 	sub.w	r3, r3, r8
 800660c:	4640      	mov	r0, r8
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	b004      	add	sp, #16
 8006612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006616 <__exponent>:
 8006616:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006618:	2900      	cmp	r1, #0
 800661a:	4604      	mov	r4, r0
 800661c:	bfba      	itte	lt
 800661e:	4249      	neglt	r1, r1
 8006620:	232d      	movlt	r3, #45	; 0x2d
 8006622:	232b      	movge	r3, #43	; 0x2b
 8006624:	2909      	cmp	r1, #9
 8006626:	f804 2b02 	strb.w	r2, [r4], #2
 800662a:	7043      	strb	r3, [r0, #1]
 800662c:	dd20      	ble.n	8006670 <__exponent+0x5a>
 800662e:	f10d 0307 	add.w	r3, sp, #7
 8006632:	461f      	mov	r7, r3
 8006634:	260a      	movs	r6, #10
 8006636:	fb91 f5f6 	sdiv	r5, r1, r6
 800663a:	fb06 1115 	mls	r1, r6, r5, r1
 800663e:	3130      	adds	r1, #48	; 0x30
 8006640:	2d09      	cmp	r5, #9
 8006642:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006646:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800664a:	4629      	mov	r1, r5
 800664c:	dc09      	bgt.n	8006662 <__exponent+0x4c>
 800664e:	3130      	adds	r1, #48	; 0x30
 8006650:	3b02      	subs	r3, #2
 8006652:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006656:	42bb      	cmp	r3, r7
 8006658:	4622      	mov	r2, r4
 800665a:	d304      	bcc.n	8006666 <__exponent+0x50>
 800665c:	1a10      	subs	r0, r2, r0
 800665e:	b003      	add	sp, #12
 8006660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006662:	4613      	mov	r3, r2
 8006664:	e7e7      	b.n	8006636 <__exponent+0x20>
 8006666:	f813 2b01 	ldrb.w	r2, [r3], #1
 800666a:	f804 2b01 	strb.w	r2, [r4], #1
 800666e:	e7f2      	b.n	8006656 <__exponent+0x40>
 8006670:	2330      	movs	r3, #48	; 0x30
 8006672:	4419      	add	r1, r3
 8006674:	7083      	strb	r3, [r0, #2]
 8006676:	1d02      	adds	r2, r0, #4
 8006678:	70c1      	strb	r1, [r0, #3]
 800667a:	e7ef      	b.n	800665c <__exponent+0x46>

0800667c <_printf_float>:
 800667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	b08d      	sub	sp, #52	; 0x34
 8006682:	460c      	mov	r4, r1
 8006684:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006688:	4616      	mov	r6, r2
 800668a:	461f      	mov	r7, r3
 800668c:	4605      	mov	r5, r0
 800668e:	f001 fa33 	bl	8007af8 <_localeconv_r>
 8006692:	6803      	ldr	r3, [r0, #0]
 8006694:	9304      	str	r3, [sp, #16]
 8006696:	4618      	mov	r0, r3
 8006698:	f7f9 fdba 	bl	8000210 <strlen>
 800669c:	2300      	movs	r3, #0
 800669e:	930a      	str	r3, [sp, #40]	; 0x28
 80066a0:	f8d8 3000 	ldr.w	r3, [r8]
 80066a4:	9005      	str	r0, [sp, #20]
 80066a6:	3307      	adds	r3, #7
 80066a8:	f023 0307 	bic.w	r3, r3, #7
 80066ac:	f103 0208 	add.w	r2, r3, #8
 80066b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066b4:	f8d4 b000 	ldr.w	fp, [r4]
 80066b8:	f8c8 2000 	str.w	r2, [r8]
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066c4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066cc:	9307      	str	r3, [sp, #28]
 80066ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80066d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066d6:	4ba7      	ldr	r3, [pc, #668]	; (8006974 <_printf_float+0x2f8>)
 80066d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066dc:	f7fa fa46 	bl	8000b6c <__aeabi_dcmpun>
 80066e0:	bb70      	cbnz	r0, 8006740 <_printf_float+0xc4>
 80066e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066e6:	4ba3      	ldr	r3, [pc, #652]	; (8006974 <_printf_float+0x2f8>)
 80066e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ec:	f7fa fa20 	bl	8000b30 <__aeabi_dcmple>
 80066f0:	bb30      	cbnz	r0, 8006740 <_printf_float+0xc4>
 80066f2:	2200      	movs	r2, #0
 80066f4:	2300      	movs	r3, #0
 80066f6:	4640      	mov	r0, r8
 80066f8:	4649      	mov	r1, r9
 80066fa:	f7fa fa0f 	bl	8000b1c <__aeabi_dcmplt>
 80066fe:	b110      	cbz	r0, 8006706 <_printf_float+0x8a>
 8006700:	232d      	movs	r3, #45	; 0x2d
 8006702:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006706:	4a9c      	ldr	r2, [pc, #624]	; (8006978 <_printf_float+0x2fc>)
 8006708:	4b9c      	ldr	r3, [pc, #624]	; (800697c <_printf_float+0x300>)
 800670a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800670e:	bf8c      	ite	hi
 8006710:	4690      	movhi	r8, r2
 8006712:	4698      	movls	r8, r3
 8006714:	2303      	movs	r3, #3
 8006716:	f02b 0204 	bic.w	r2, fp, #4
 800671a:	6123      	str	r3, [r4, #16]
 800671c:	6022      	str	r2, [r4, #0]
 800671e:	f04f 0900 	mov.w	r9, #0
 8006722:	9700      	str	r7, [sp, #0]
 8006724:	4633      	mov	r3, r6
 8006726:	aa0b      	add	r2, sp, #44	; 0x2c
 8006728:	4621      	mov	r1, r4
 800672a:	4628      	mov	r0, r5
 800672c:	f000 f9e6 	bl	8006afc <_printf_common>
 8006730:	3001      	adds	r0, #1
 8006732:	f040 808d 	bne.w	8006850 <_printf_float+0x1d4>
 8006736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800673a:	b00d      	add	sp, #52	; 0x34
 800673c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006740:	4642      	mov	r2, r8
 8006742:	464b      	mov	r3, r9
 8006744:	4640      	mov	r0, r8
 8006746:	4649      	mov	r1, r9
 8006748:	f7fa fa10 	bl	8000b6c <__aeabi_dcmpun>
 800674c:	b110      	cbz	r0, 8006754 <_printf_float+0xd8>
 800674e:	4a8c      	ldr	r2, [pc, #560]	; (8006980 <_printf_float+0x304>)
 8006750:	4b8c      	ldr	r3, [pc, #560]	; (8006984 <_printf_float+0x308>)
 8006752:	e7da      	b.n	800670a <_printf_float+0x8e>
 8006754:	6861      	ldr	r1, [r4, #4]
 8006756:	1c4b      	adds	r3, r1, #1
 8006758:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800675c:	a80a      	add	r0, sp, #40	; 0x28
 800675e:	d13e      	bne.n	80067de <_printf_float+0x162>
 8006760:	2306      	movs	r3, #6
 8006762:	6063      	str	r3, [r4, #4]
 8006764:	2300      	movs	r3, #0
 8006766:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800676a:	ab09      	add	r3, sp, #36	; 0x24
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	ec49 8b10 	vmov	d0, r8, r9
 8006772:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006776:	6022      	str	r2, [r4, #0]
 8006778:	f8cd a004 	str.w	sl, [sp, #4]
 800677c:	6861      	ldr	r1, [r4, #4]
 800677e:	4628      	mov	r0, r5
 8006780:	f7ff fee8 	bl	8006554 <__cvt>
 8006784:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006788:	2b47      	cmp	r3, #71	; 0x47
 800678a:	4680      	mov	r8, r0
 800678c:	d109      	bne.n	80067a2 <_printf_float+0x126>
 800678e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006790:	1cd8      	adds	r0, r3, #3
 8006792:	db02      	blt.n	800679a <_printf_float+0x11e>
 8006794:	6862      	ldr	r2, [r4, #4]
 8006796:	4293      	cmp	r3, r2
 8006798:	dd47      	ble.n	800682a <_printf_float+0x1ae>
 800679a:	f1aa 0a02 	sub.w	sl, sl, #2
 800679e:	fa5f fa8a 	uxtb.w	sl, sl
 80067a2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80067a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067a8:	d824      	bhi.n	80067f4 <_printf_float+0x178>
 80067aa:	3901      	subs	r1, #1
 80067ac:	4652      	mov	r2, sl
 80067ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067b2:	9109      	str	r1, [sp, #36]	; 0x24
 80067b4:	f7ff ff2f 	bl	8006616 <__exponent>
 80067b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067ba:	1813      	adds	r3, r2, r0
 80067bc:	2a01      	cmp	r2, #1
 80067be:	4681      	mov	r9, r0
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	dc02      	bgt.n	80067ca <_printf_float+0x14e>
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	07d1      	lsls	r1, r2, #31
 80067c8:	d501      	bpl.n	80067ce <_printf_float+0x152>
 80067ca:	3301      	adds	r3, #1
 80067cc:	6123      	str	r3, [r4, #16]
 80067ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0a5      	beq.n	8006722 <_printf_float+0xa6>
 80067d6:	232d      	movs	r3, #45	; 0x2d
 80067d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067dc:	e7a1      	b.n	8006722 <_printf_float+0xa6>
 80067de:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80067e2:	f000 8177 	beq.w	8006ad4 <_printf_float+0x458>
 80067e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80067ea:	d1bb      	bne.n	8006764 <_printf_float+0xe8>
 80067ec:	2900      	cmp	r1, #0
 80067ee:	d1b9      	bne.n	8006764 <_printf_float+0xe8>
 80067f0:	2301      	movs	r3, #1
 80067f2:	e7b6      	b.n	8006762 <_printf_float+0xe6>
 80067f4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80067f8:	d119      	bne.n	800682e <_printf_float+0x1b2>
 80067fa:	2900      	cmp	r1, #0
 80067fc:	6863      	ldr	r3, [r4, #4]
 80067fe:	dd0c      	ble.n	800681a <_printf_float+0x19e>
 8006800:	6121      	str	r1, [r4, #16]
 8006802:	b913      	cbnz	r3, 800680a <_printf_float+0x18e>
 8006804:	6822      	ldr	r2, [r4, #0]
 8006806:	07d2      	lsls	r2, r2, #31
 8006808:	d502      	bpl.n	8006810 <_printf_float+0x194>
 800680a:	3301      	adds	r3, #1
 800680c:	440b      	add	r3, r1
 800680e:	6123      	str	r3, [r4, #16]
 8006810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006812:	65a3      	str	r3, [r4, #88]	; 0x58
 8006814:	f04f 0900 	mov.w	r9, #0
 8006818:	e7d9      	b.n	80067ce <_printf_float+0x152>
 800681a:	b913      	cbnz	r3, 8006822 <_printf_float+0x1a6>
 800681c:	6822      	ldr	r2, [r4, #0]
 800681e:	07d0      	lsls	r0, r2, #31
 8006820:	d501      	bpl.n	8006826 <_printf_float+0x1aa>
 8006822:	3302      	adds	r3, #2
 8006824:	e7f3      	b.n	800680e <_printf_float+0x192>
 8006826:	2301      	movs	r3, #1
 8006828:	e7f1      	b.n	800680e <_printf_float+0x192>
 800682a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800682e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006832:	4293      	cmp	r3, r2
 8006834:	db05      	blt.n	8006842 <_printf_float+0x1c6>
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	6123      	str	r3, [r4, #16]
 800683a:	07d1      	lsls	r1, r2, #31
 800683c:	d5e8      	bpl.n	8006810 <_printf_float+0x194>
 800683e:	3301      	adds	r3, #1
 8006840:	e7e5      	b.n	800680e <_printf_float+0x192>
 8006842:	2b00      	cmp	r3, #0
 8006844:	bfd4      	ite	le
 8006846:	f1c3 0302 	rsble	r3, r3, #2
 800684a:	2301      	movgt	r3, #1
 800684c:	4413      	add	r3, r2
 800684e:	e7de      	b.n	800680e <_printf_float+0x192>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	055a      	lsls	r2, r3, #21
 8006854:	d407      	bmi.n	8006866 <_printf_float+0x1ea>
 8006856:	6923      	ldr	r3, [r4, #16]
 8006858:	4642      	mov	r2, r8
 800685a:	4631      	mov	r1, r6
 800685c:	4628      	mov	r0, r5
 800685e:	47b8      	blx	r7
 8006860:	3001      	adds	r0, #1
 8006862:	d12b      	bne.n	80068bc <_printf_float+0x240>
 8006864:	e767      	b.n	8006736 <_printf_float+0xba>
 8006866:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800686a:	f240 80dc 	bls.w	8006a26 <_printf_float+0x3aa>
 800686e:	2200      	movs	r2, #0
 8006870:	2300      	movs	r3, #0
 8006872:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006876:	f7fa f947 	bl	8000b08 <__aeabi_dcmpeq>
 800687a:	2800      	cmp	r0, #0
 800687c:	d033      	beq.n	80068e6 <_printf_float+0x26a>
 800687e:	2301      	movs	r3, #1
 8006880:	4a41      	ldr	r2, [pc, #260]	; (8006988 <_printf_float+0x30c>)
 8006882:	4631      	mov	r1, r6
 8006884:	4628      	mov	r0, r5
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	f43f af54 	beq.w	8006736 <_printf_float+0xba>
 800688e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006892:	429a      	cmp	r2, r3
 8006894:	db02      	blt.n	800689c <_printf_float+0x220>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	07d8      	lsls	r0, r3, #31
 800689a:	d50f      	bpl.n	80068bc <_printf_float+0x240>
 800689c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	f43f af45 	beq.w	8006736 <_printf_float+0xba>
 80068ac:	f04f 0800 	mov.w	r8, #0
 80068b0:	f104 091a 	add.w	r9, r4, #26
 80068b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b6:	3b01      	subs	r3, #1
 80068b8:	4543      	cmp	r3, r8
 80068ba:	dc09      	bgt.n	80068d0 <_printf_float+0x254>
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	079b      	lsls	r3, r3, #30
 80068c0:	f100 8103 	bmi.w	8006aca <_printf_float+0x44e>
 80068c4:	68e0      	ldr	r0, [r4, #12]
 80068c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c8:	4298      	cmp	r0, r3
 80068ca:	bfb8      	it	lt
 80068cc:	4618      	movlt	r0, r3
 80068ce:	e734      	b.n	800673a <_printf_float+0xbe>
 80068d0:	2301      	movs	r3, #1
 80068d2:	464a      	mov	r2, r9
 80068d4:	4631      	mov	r1, r6
 80068d6:	4628      	mov	r0, r5
 80068d8:	47b8      	blx	r7
 80068da:	3001      	adds	r0, #1
 80068dc:	f43f af2b 	beq.w	8006736 <_printf_float+0xba>
 80068e0:	f108 0801 	add.w	r8, r8, #1
 80068e4:	e7e6      	b.n	80068b4 <_printf_float+0x238>
 80068e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	dc2b      	bgt.n	8006944 <_printf_float+0x2c8>
 80068ec:	2301      	movs	r3, #1
 80068ee:	4a26      	ldr	r2, [pc, #152]	; (8006988 <_printf_float+0x30c>)
 80068f0:	4631      	mov	r1, r6
 80068f2:	4628      	mov	r0, r5
 80068f4:	47b8      	blx	r7
 80068f6:	3001      	adds	r0, #1
 80068f8:	f43f af1d 	beq.w	8006736 <_printf_float+0xba>
 80068fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068fe:	b923      	cbnz	r3, 800690a <_printf_float+0x28e>
 8006900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006902:	b913      	cbnz	r3, 800690a <_printf_float+0x28e>
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	07d9      	lsls	r1, r3, #31
 8006908:	d5d8      	bpl.n	80068bc <_printf_float+0x240>
 800690a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	f43f af0e 	beq.w	8006736 <_printf_float+0xba>
 800691a:	f04f 0900 	mov.w	r9, #0
 800691e:	f104 0a1a 	add.w	sl, r4, #26
 8006922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006924:	425b      	negs	r3, r3
 8006926:	454b      	cmp	r3, r9
 8006928:	dc01      	bgt.n	800692e <_printf_float+0x2b2>
 800692a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800692c:	e794      	b.n	8006858 <_printf_float+0x1dc>
 800692e:	2301      	movs	r3, #1
 8006930:	4652      	mov	r2, sl
 8006932:	4631      	mov	r1, r6
 8006934:	4628      	mov	r0, r5
 8006936:	47b8      	blx	r7
 8006938:	3001      	adds	r0, #1
 800693a:	f43f aefc 	beq.w	8006736 <_printf_float+0xba>
 800693e:	f109 0901 	add.w	r9, r9, #1
 8006942:	e7ee      	b.n	8006922 <_printf_float+0x2a6>
 8006944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006946:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006948:	429a      	cmp	r2, r3
 800694a:	bfa8      	it	ge
 800694c:	461a      	movge	r2, r3
 800694e:	2a00      	cmp	r2, #0
 8006950:	4691      	mov	r9, r2
 8006952:	dd07      	ble.n	8006964 <_printf_float+0x2e8>
 8006954:	4613      	mov	r3, r2
 8006956:	4631      	mov	r1, r6
 8006958:	4642      	mov	r2, r8
 800695a:	4628      	mov	r0, r5
 800695c:	47b8      	blx	r7
 800695e:	3001      	adds	r0, #1
 8006960:	f43f aee9 	beq.w	8006736 <_printf_float+0xba>
 8006964:	f104 031a 	add.w	r3, r4, #26
 8006968:	f04f 0b00 	mov.w	fp, #0
 800696c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006970:	9306      	str	r3, [sp, #24]
 8006972:	e015      	b.n	80069a0 <_printf_float+0x324>
 8006974:	7fefffff 	.word	0x7fefffff
 8006978:	08009bc8 	.word	0x08009bc8
 800697c:	08009bc4 	.word	0x08009bc4
 8006980:	08009bd0 	.word	0x08009bd0
 8006984:	08009bcc 	.word	0x08009bcc
 8006988:	08009bd4 	.word	0x08009bd4
 800698c:	2301      	movs	r3, #1
 800698e:	9a06      	ldr	r2, [sp, #24]
 8006990:	4631      	mov	r1, r6
 8006992:	4628      	mov	r0, r5
 8006994:	47b8      	blx	r7
 8006996:	3001      	adds	r0, #1
 8006998:	f43f aecd 	beq.w	8006736 <_printf_float+0xba>
 800699c:	f10b 0b01 	add.w	fp, fp, #1
 80069a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80069a4:	ebaa 0309 	sub.w	r3, sl, r9
 80069a8:	455b      	cmp	r3, fp
 80069aa:	dcef      	bgt.n	800698c <_printf_float+0x310>
 80069ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069b0:	429a      	cmp	r2, r3
 80069b2:	44d0      	add	r8, sl
 80069b4:	db15      	blt.n	80069e2 <_printf_float+0x366>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	07da      	lsls	r2, r3, #31
 80069ba:	d412      	bmi.n	80069e2 <_printf_float+0x366>
 80069bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069c0:	eba3 020a 	sub.w	r2, r3, sl
 80069c4:	eba3 0a01 	sub.w	sl, r3, r1
 80069c8:	4592      	cmp	sl, r2
 80069ca:	bfa8      	it	ge
 80069cc:	4692      	movge	sl, r2
 80069ce:	f1ba 0f00 	cmp.w	sl, #0
 80069d2:	dc0e      	bgt.n	80069f2 <_printf_float+0x376>
 80069d4:	f04f 0800 	mov.w	r8, #0
 80069d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069dc:	f104 091a 	add.w	r9, r4, #26
 80069e0:	e019      	b.n	8006a16 <_printf_float+0x39a>
 80069e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069e6:	4631      	mov	r1, r6
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b8      	blx	r7
 80069ec:	3001      	adds	r0, #1
 80069ee:	d1e5      	bne.n	80069bc <_printf_float+0x340>
 80069f0:	e6a1      	b.n	8006736 <_printf_float+0xba>
 80069f2:	4653      	mov	r3, sl
 80069f4:	4642      	mov	r2, r8
 80069f6:	4631      	mov	r1, r6
 80069f8:	4628      	mov	r0, r5
 80069fa:	47b8      	blx	r7
 80069fc:	3001      	adds	r0, #1
 80069fe:	d1e9      	bne.n	80069d4 <_printf_float+0x358>
 8006a00:	e699      	b.n	8006736 <_printf_float+0xba>
 8006a02:	2301      	movs	r3, #1
 8006a04:	464a      	mov	r2, r9
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b8      	blx	r7
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	f43f ae92 	beq.w	8006736 <_printf_float+0xba>
 8006a12:	f108 0801 	add.w	r8, r8, #1
 8006a16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a1a:	1a9b      	subs	r3, r3, r2
 8006a1c:	eba3 030a 	sub.w	r3, r3, sl
 8006a20:	4543      	cmp	r3, r8
 8006a22:	dcee      	bgt.n	8006a02 <_printf_float+0x386>
 8006a24:	e74a      	b.n	80068bc <_printf_float+0x240>
 8006a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a28:	2a01      	cmp	r2, #1
 8006a2a:	dc01      	bgt.n	8006a30 <_printf_float+0x3b4>
 8006a2c:	07db      	lsls	r3, r3, #31
 8006a2e:	d53a      	bpl.n	8006aa6 <_printf_float+0x42a>
 8006a30:	2301      	movs	r3, #1
 8006a32:	4642      	mov	r2, r8
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	f43f ae7b 	beq.w	8006736 <_printf_float+0xba>
 8006a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	f108 0801 	add.w	r8, r8, #1
 8006a50:	f43f ae71 	beq.w	8006736 <_printf_float+0xba>
 8006a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a56:	2200      	movs	r2, #0
 8006a58:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006a5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a60:	2300      	movs	r3, #0
 8006a62:	f7fa f851 	bl	8000b08 <__aeabi_dcmpeq>
 8006a66:	b9c8      	cbnz	r0, 8006a9c <_printf_float+0x420>
 8006a68:	4653      	mov	r3, sl
 8006a6a:	4642      	mov	r2, r8
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	4628      	mov	r0, r5
 8006a70:	47b8      	blx	r7
 8006a72:	3001      	adds	r0, #1
 8006a74:	d10e      	bne.n	8006a94 <_printf_float+0x418>
 8006a76:	e65e      	b.n	8006736 <_printf_float+0xba>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	4652      	mov	r2, sl
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	f43f ae57 	beq.w	8006736 <_printf_float+0xba>
 8006a88:	f108 0801 	add.w	r8, r8, #1
 8006a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a8e:	3b01      	subs	r3, #1
 8006a90:	4543      	cmp	r3, r8
 8006a92:	dcf1      	bgt.n	8006a78 <_printf_float+0x3fc>
 8006a94:	464b      	mov	r3, r9
 8006a96:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a9a:	e6de      	b.n	800685a <_printf_float+0x1de>
 8006a9c:	f04f 0800 	mov.w	r8, #0
 8006aa0:	f104 0a1a 	add.w	sl, r4, #26
 8006aa4:	e7f2      	b.n	8006a8c <_printf_float+0x410>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e7df      	b.n	8006a6a <_printf_float+0x3ee>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	464a      	mov	r2, r9
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	f43f ae3e 	beq.w	8006736 <_printf_float+0xba>
 8006aba:	f108 0801 	add.w	r8, r8, #1
 8006abe:	68e3      	ldr	r3, [r4, #12]
 8006ac0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ac2:	1a9b      	subs	r3, r3, r2
 8006ac4:	4543      	cmp	r3, r8
 8006ac6:	dcf0      	bgt.n	8006aaa <_printf_float+0x42e>
 8006ac8:	e6fc      	b.n	80068c4 <_printf_float+0x248>
 8006aca:	f04f 0800 	mov.w	r8, #0
 8006ace:	f104 0919 	add.w	r9, r4, #25
 8006ad2:	e7f4      	b.n	8006abe <_printf_float+0x442>
 8006ad4:	2900      	cmp	r1, #0
 8006ad6:	f43f ae8b 	beq.w	80067f0 <_printf_float+0x174>
 8006ada:	2300      	movs	r3, #0
 8006adc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006ae0:	ab09      	add	r3, sp, #36	; 0x24
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	ec49 8b10 	vmov	d0, r8, r9
 8006ae8:	6022      	str	r2, [r4, #0]
 8006aea:	f8cd a004 	str.w	sl, [sp, #4]
 8006aee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006af2:	4628      	mov	r0, r5
 8006af4:	f7ff fd2e 	bl	8006554 <__cvt>
 8006af8:	4680      	mov	r8, r0
 8006afa:	e648      	b.n	800678e <_printf_float+0x112>

08006afc <_printf_common>:
 8006afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	4691      	mov	r9, r2
 8006b02:	461f      	mov	r7, r3
 8006b04:	688a      	ldr	r2, [r1, #8]
 8006b06:	690b      	ldr	r3, [r1, #16]
 8006b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	bfb8      	it	lt
 8006b10:	4613      	movlt	r3, r2
 8006b12:	f8c9 3000 	str.w	r3, [r9]
 8006b16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	460c      	mov	r4, r1
 8006b1e:	b112      	cbz	r2, 8006b26 <_printf_common+0x2a>
 8006b20:	3301      	adds	r3, #1
 8006b22:	f8c9 3000 	str.w	r3, [r9]
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	0699      	lsls	r1, r3, #26
 8006b2a:	bf42      	ittt	mi
 8006b2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b30:	3302      	addmi	r3, #2
 8006b32:	f8c9 3000 	strmi.w	r3, [r9]
 8006b36:	6825      	ldr	r5, [r4, #0]
 8006b38:	f015 0506 	ands.w	r5, r5, #6
 8006b3c:	d107      	bne.n	8006b4e <_printf_common+0x52>
 8006b3e:	f104 0a19 	add.w	sl, r4, #25
 8006b42:	68e3      	ldr	r3, [r4, #12]
 8006b44:	f8d9 2000 	ldr.w	r2, [r9]
 8006b48:	1a9b      	subs	r3, r3, r2
 8006b4a:	42ab      	cmp	r3, r5
 8006b4c:	dc28      	bgt.n	8006ba0 <_printf_common+0xa4>
 8006b4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b52:	6822      	ldr	r2, [r4, #0]
 8006b54:	3300      	adds	r3, #0
 8006b56:	bf18      	it	ne
 8006b58:	2301      	movne	r3, #1
 8006b5a:	0692      	lsls	r2, r2, #26
 8006b5c:	d42d      	bmi.n	8006bba <_printf_common+0xbe>
 8006b5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b62:	4639      	mov	r1, r7
 8006b64:	4630      	mov	r0, r6
 8006b66:	47c0      	blx	r8
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d020      	beq.n	8006bae <_printf_common+0xb2>
 8006b6c:	6823      	ldr	r3, [r4, #0]
 8006b6e:	68e5      	ldr	r5, [r4, #12]
 8006b70:	f8d9 2000 	ldr.w	r2, [r9]
 8006b74:	f003 0306 	and.w	r3, r3, #6
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	bf08      	it	eq
 8006b7c:	1aad      	subeq	r5, r5, r2
 8006b7e:	68a3      	ldr	r3, [r4, #8]
 8006b80:	6922      	ldr	r2, [r4, #16]
 8006b82:	bf0c      	ite	eq
 8006b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b88:	2500      	movne	r5, #0
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	bfc4      	itt	gt
 8006b8e:	1a9b      	subgt	r3, r3, r2
 8006b90:	18ed      	addgt	r5, r5, r3
 8006b92:	f04f 0900 	mov.w	r9, #0
 8006b96:	341a      	adds	r4, #26
 8006b98:	454d      	cmp	r5, r9
 8006b9a:	d11a      	bne.n	8006bd2 <_printf_common+0xd6>
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e008      	b.n	8006bb2 <_printf_common+0xb6>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	4652      	mov	r2, sl
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	47c0      	blx	r8
 8006baa:	3001      	adds	r0, #1
 8006bac:	d103      	bne.n	8006bb6 <_printf_common+0xba>
 8006bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb6:	3501      	adds	r5, #1
 8006bb8:	e7c3      	b.n	8006b42 <_printf_common+0x46>
 8006bba:	18e1      	adds	r1, r4, r3
 8006bbc:	1c5a      	adds	r2, r3, #1
 8006bbe:	2030      	movs	r0, #48	; 0x30
 8006bc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bc4:	4422      	add	r2, r4
 8006bc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bce:	3302      	adds	r3, #2
 8006bd0:	e7c5      	b.n	8006b5e <_printf_common+0x62>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4622      	mov	r2, r4
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	4630      	mov	r0, r6
 8006bda:	47c0      	blx	r8
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d0e6      	beq.n	8006bae <_printf_common+0xb2>
 8006be0:	f109 0901 	add.w	r9, r9, #1
 8006be4:	e7d8      	b.n	8006b98 <_printf_common+0x9c>
	...

08006be8 <_printf_i>:
 8006be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	7e09      	ldrb	r1, [r1, #24]
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	296e      	cmp	r1, #110	; 0x6e
 8006bf8:	4617      	mov	r7, r2
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	4698      	mov	r8, r3
 8006bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c00:	f000 80b3 	beq.w	8006d6a <_printf_i+0x182>
 8006c04:	d822      	bhi.n	8006c4c <_printf_i+0x64>
 8006c06:	2963      	cmp	r1, #99	; 0x63
 8006c08:	d036      	beq.n	8006c78 <_printf_i+0x90>
 8006c0a:	d80a      	bhi.n	8006c22 <_printf_i+0x3a>
 8006c0c:	2900      	cmp	r1, #0
 8006c0e:	f000 80b9 	beq.w	8006d84 <_printf_i+0x19c>
 8006c12:	2958      	cmp	r1, #88	; 0x58
 8006c14:	f000 8083 	beq.w	8006d1e <_printf_i+0x136>
 8006c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006c20:	e032      	b.n	8006c88 <_printf_i+0xa0>
 8006c22:	2964      	cmp	r1, #100	; 0x64
 8006c24:	d001      	beq.n	8006c2a <_printf_i+0x42>
 8006c26:	2969      	cmp	r1, #105	; 0x69
 8006c28:	d1f6      	bne.n	8006c18 <_printf_i+0x30>
 8006c2a:	6820      	ldr	r0, [r4, #0]
 8006c2c:	6813      	ldr	r3, [r2, #0]
 8006c2e:	0605      	lsls	r5, r0, #24
 8006c30:	f103 0104 	add.w	r1, r3, #4
 8006c34:	d52a      	bpl.n	8006c8c <_printf_i+0xa4>
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6011      	str	r1, [r2, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	da03      	bge.n	8006c46 <_printf_i+0x5e>
 8006c3e:	222d      	movs	r2, #45	; 0x2d
 8006c40:	425b      	negs	r3, r3
 8006c42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c46:	486f      	ldr	r0, [pc, #444]	; (8006e04 <_printf_i+0x21c>)
 8006c48:	220a      	movs	r2, #10
 8006c4a:	e039      	b.n	8006cc0 <_printf_i+0xd8>
 8006c4c:	2973      	cmp	r1, #115	; 0x73
 8006c4e:	f000 809d 	beq.w	8006d8c <_printf_i+0x1a4>
 8006c52:	d808      	bhi.n	8006c66 <_printf_i+0x7e>
 8006c54:	296f      	cmp	r1, #111	; 0x6f
 8006c56:	d020      	beq.n	8006c9a <_printf_i+0xb2>
 8006c58:	2970      	cmp	r1, #112	; 0x70
 8006c5a:	d1dd      	bne.n	8006c18 <_printf_i+0x30>
 8006c5c:	6823      	ldr	r3, [r4, #0]
 8006c5e:	f043 0320 	orr.w	r3, r3, #32
 8006c62:	6023      	str	r3, [r4, #0]
 8006c64:	e003      	b.n	8006c6e <_printf_i+0x86>
 8006c66:	2975      	cmp	r1, #117	; 0x75
 8006c68:	d017      	beq.n	8006c9a <_printf_i+0xb2>
 8006c6a:	2978      	cmp	r1, #120	; 0x78
 8006c6c:	d1d4      	bne.n	8006c18 <_printf_i+0x30>
 8006c6e:	2378      	movs	r3, #120	; 0x78
 8006c70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c74:	4864      	ldr	r0, [pc, #400]	; (8006e08 <_printf_i+0x220>)
 8006c76:	e055      	b.n	8006d24 <_printf_i+0x13c>
 8006c78:	6813      	ldr	r3, [r2, #0]
 8006c7a:	1d19      	adds	r1, r3, #4
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6011      	str	r1, [r2, #0]
 8006c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e08c      	b.n	8006da6 <_printf_i+0x1be>
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6011      	str	r1, [r2, #0]
 8006c90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c94:	bf18      	it	ne
 8006c96:	b21b      	sxthne	r3, r3
 8006c98:	e7cf      	b.n	8006c3a <_printf_i+0x52>
 8006c9a:	6813      	ldr	r3, [r2, #0]
 8006c9c:	6825      	ldr	r5, [r4, #0]
 8006c9e:	1d18      	adds	r0, r3, #4
 8006ca0:	6010      	str	r0, [r2, #0]
 8006ca2:	0628      	lsls	r0, r5, #24
 8006ca4:	d501      	bpl.n	8006caa <_printf_i+0xc2>
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	e002      	b.n	8006cb0 <_printf_i+0xc8>
 8006caa:	0668      	lsls	r0, r5, #25
 8006cac:	d5fb      	bpl.n	8006ca6 <_printf_i+0xbe>
 8006cae:	881b      	ldrh	r3, [r3, #0]
 8006cb0:	4854      	ldr	r0, [pc, #336]	; (8006e04 <_printf_i+0x21c>)
 8006cb2:	296f      	cmp	r1, #111	; 0x6f
 8006cb4:	bf14      	ite	ne
 8006cb6:	220a      	movne	r2, #10
 8006cb8:	2208      	moveq	r2, #8
 8006cba:	2100      	movs	r1, #0
 8006cbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cc0:	6865      	ldr	r5, [r4, #4]
 8006cc2:	60a5      	str	r5, [r4, #8]
 8006cc4:	2d00      	cmp	r5, #0
 8006cc6:	f2c0 8095 	blt.w	8006df4 <_printf_i+0x20c>
 8006cca:	6821      	ldr	r1, [r4, #0]
 8006ccc:	f021 0104 	bic.w	r1, r1, #4
 8006cd0:	6021      	str	r1, [r4, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d13d      	bne.n	8006d52 <_printf_i+0x16a>
 8006cd6:	2d00      	cmp	r5, #0
 8006cd8:	f040 808e 	bne.w	8006df8 <_printf_i+0x210>
 8006cdc:	4665      	mov	r5, ip
 8006cde:	2a08      	cmp	r2, #8
 8006ce0:	d10b      	bne.n	8006cfa <_printf_i+0x112>
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	07db      	lsls	r3, r3, #31
 8006ce6:	d508      	bpl.n	8006cfa <_printf_i+0x112>
 8006ce8:	6923      	ldr	r3, [r4, #16]
 8006cea:	6862      	ldr	r2, [r4, #4]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	bfde      	ittt	le
 8006cf0:	2330      	movle	r3, #48	; 0x30
 8006cf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cf6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006cfa:	ebac 0305 	sub.w	r3, ip, r5
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	f8cd 8000 	str.w	r8, [sp]
 8006d04:	463b      	mov	r3, r7
 8006d06:	aa03      	add	r2, sp, #12
 8006d08:	4621      	mov	r1, r4
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	f7ff fef6 	bl	8006afc <_printf_common>
 8006d10:	3001      	adds	r0, #1
 8006d12:	d14d      	bne.n	8006db0 <_printf_i+0x1c8>
 8006d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d18:	b005      	add	sp, #20
 8006d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d1e:	4839      	ldr	r0, [pc, #228]	; (8006e04 <_printf_i+0x21c>)
 8006d20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d24:	6813      	ldr	r3, [r2, #0]
 8006d26:	6821      	ldr	r1, [r4, #0]
 8006d28:	1d1d      	adds	r5, r3, #4
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6015      	str	r5, [r2, #0]
 8006d2e:	060a      	lsls	r2, r1, #24
 8006d30:	d50b      	bpl.n	8006d4a <_printf_i+0x162>
 8006d32:	07ca      	lsls	r2, r1, #31
 8006d34:	bf44      	itt	mi
 8006d36:	f041 0120 	orrmi.w	r1, r1, #32
 8006d3a:	6021      	strmi	r1, [r4, #0]
 8006d3c:	b91b      	cbnz	r3, 8006d46 <_printf_i+0x15e>
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	f022 0220 	bic.w	r2, r2, #32
 8006d44:	6022      	str	r2, [r4, #0]
 8006d46:	2210      	movs	r2, #16
 8006d48:	e7b7      	b.n	8006cba <_printf_i+0xd2>
 8006d4a:	064d      	lsls	r5, r1, #25
 8006d4c:	bf48      	it	mi
 8006d4e:	b29b      	uxthmi	r3, r3
 8006d50:	e7ef      	b.n	8006d32 <_printf_i+0x14a>
 8006d52:	4665      	mov	r5, ip
 8006d54:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d58:	fb02 3311 	mls	r3, r2, r1, r3
 8006d5c:	5cc3      	ldrb	r3, [r0, r3]
 8006d5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d62:	460b      	mov	r3, r1
 8006d64:	2900      	cmp	r1, #0
 8006d66:	d1f5      	bne.n	8006d54 <_printf_i+0x16c>
 8006d68:	e7b9      	b.n	8006cde <_printf_i+0xf6>
 8006d6a:	6813      	ldr	r3, [r2, #0]
 8006d6c:	6825      	ldr	r5, [r4, #0]
 8006d6e:	6961      	ldr	r1, [r4, #20]
 8006d70:	1d18      	adds	r0, r3, #4
 8006d72:	6010      	str	r0, [r2, #0]
 8006d74:	0628      	lsls	r0, r5, #24
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	d501      	bpl.n	8006d7e <_printf_i+0x196>
 8006d7a:	6019      	str	r1, [r3, #0]
 8006d7c:	e002      	b.n	8006d84 <_printf_i+0x19c>
 8006d7e:	066a      	lsls	r2, r5, #25
 8006d80:	d5fb      	bpl.n	8006d7a <_printf_i+0x192>
 8006d82:	8019      	strh	r1, [r3, #0]
 8006d84:	2300      	movs	r3, #0
 8006d86:	6123      	str	r3, [r4, #16]
 8006d88:	4665      	mov	r5, ip
 8006d8a:	e7b9      	b.n	8006d00 <_printf_i+0x118>
 8006d8c:	6813      	ldr	r3, [r2, #0]
 8006d8e:	1d19      	adds	r1, r3, #4
 8006d90:	6011      	str	r1, [r2, #0]
 8006d92:	681d      	ldr	r5, [r3, #0]
 8006d94:	6862      	ldr	r2, [r4, #4]
 8006d96:	2100      	movs	r1, #0
 8006d98:	4628      	mov	r0, r5
 8006d9a:	f7f9 fa41 	bl	8000220 <memchr>
 8006d9e:	b108      	cbz	r0, 8006da4 <_printf_i+0x1bc>
 8006da0:	1b40      	subs	r0, r0, r5
 8006da2:	6060      	str	r0, [r4, #4]
 8006da4:	6863      	ldr	r3, [r4, #4]
 8006da6:	6123      	str	r3, [r4, #16]
 8006da8:	2300      	movs	r3, #0
 8006daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dae:	e7a7      	b.n	8006d00 <_printf_i+0x118>
 8006db0:	6923      	ldr	r3, [r4, #16]
 8006db2:	462a      	mov	r2, r5
 8006db4:	4639      	mov	r1, r7
 8006db6:	4630      	mov	r0, r6
 8006db8:	47c0      	blx	r8
 8006dba:	3001      	adds	r0, #1
 8006dbc:	d0aa      	beq.n	8006d14 <_printf_i+0x12c>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	079b      	lsls	r3, r3, #30
 8006dc2:	d413      	bmi.n	8006dec <_printf_i+0x204>
 8006dc4:	68e0      	ldr	r0, [r4, #12]
 8006dc6:	9b03      	ldr	r3, [sp, #12]
 8006dc8:	4298      	cmp	r0, r3
 8006dca:	bfb8      	it	lt
 8006dcc:	4618      	movlt	r0, r3
 8006dce:	e7a3      	b.n	8006d18 <_printf_i+0x130>
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	464a      	mov	r2, r9
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	47c0      	blx	r8
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d09a      	beq.n	8006d14 <_printf_i+0x12c>
 8006dde:	3501      	adds	r5, #1
 8006de0:	68e3      	ldr	r3, [r4, #12]
 8006de2:	9a03      	ldr	r2, [sp, #12]
 8006de4:	1a9b      	subs	r3, r3, r2
 8006de6:	42ab      	cmp	r3, r5
 8006de8:	dcf2      	bgt.n	8006dd0 <_printf_i+0x1e8>
 8006dea:	e7eb      	b.n	8006dc4 <_printf_i+0x1dc>
 8006dec:	2500      	movs	r5, #0
 8006dee:	f104 0919 	add.w	r9, r4, #25
 8006df2:	e7f5      	b.n	8006de0 <_printf_i+0x1f8>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1ac      	bne.n	8006d52 <_printf_i+0x16a>
 8006df8:	7803      	ldrb	r3, [r0, #0]
 8006dfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dfe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e02:	e76c      	b.n	8006cde <_printf_i+0xf6>
 8006e04:	08009bd6 	.word	0x08009bd6
 8006e08:	08009be7 	.word	0x08009be7

08006e0c <siprintf>:
 8006e0c:	b40e      	push	{r1, r2, r3}
 8006e0e:	b500      	push	{lr}
 8006e10:	b09c      	sub	sp, #112	; 0x70
 8006e12:	ab1d      	add	r3, sp, #116	; 0x74
 8006e14:	9002      	str	r0, [sp, #8]
 8006e16:	9006      	str	r0, [sp, #24]
 8006e18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e1c:	4809      	ldr	r0, [pc, #36]	; (8006e44 <siprintf+0x38>)
 8006e1e:	9107      	str	r1, [sp, #28]
 8006e20:	9104      	str	r1, [sp, #16]
 8006e22:	4909      	ldr	r1, [pc, #36]	; (8006e48 <siprintf+0x3c>)
 8006e24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e28:	9105      	str	r1, [sp, #20]
 8006e2a:	6800      	ldr	r0, [r0, #0]
 8006e2c:	9301      	str	r3, [sp, #4]
 8006e2e:	a902      	add	r1, sp, #8
 8006e30:	f001 fa6e 	bl	8008310 <_svfiprintf_r>
 8006e34:	9b02      	ldr	r3, [sp, #8]
 8006e36:	2200      	movs	r2, #0
 8006e38:	701a      	strb	r2, [r3, #0]
 8006e3a:	b01c      	add	sp, #112	; 0x70
 8006e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e40:	b003      	add	sp, #12
 8006e42:	4770      	bx	lr
 8006e44:	20000030 	.word	0x20000030
 8006e48:	ffff0208 	.word	0xffff0208

08006e4c <strcat>:
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	4603      	mov	r3, r0
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	1c5c      	adds	r4, r3, #1
 8006e54:	b93a      	cbnz	r2, 8006e66 <strcat+0x1a>
 8006e56:	3b01      	subs	r3, #1
 8006e58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e60:	2a00      	cmp	r2, #0
 8006e62:	d1f9      	bne.n	8006e58 <strcat+0xc>
 8006e64:	bd10      	pop	{r4, pc}
 8006e66:	4623      	mov	r3, r4
 8006e68:	e7f2      	b.n	8006e50 <strcat+0x4>

08006e6a <quorem>:
 8006e6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e6e:	6903      	ldr	r3, [r0, #16]
 8006e70:	690c      	ldr	r4, [r1, #16]
 8006e72:	42a3      	cmp	r3, r4
 8006e74:	4680      	mov	r8, r0
 8006e76:	f2c0 8082 	blt.w	8006f7e <quorem+0x114>
 8006e7a:	3c01      	subs	r4, #1
 8006e7c:	f101 0714 	add.w	r7, r1, #20
 8006e80:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006e84:	f100 0614 	add.w	r6, r0, #20
 8006e88:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006e8c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006e90:	eb06 030c 	add.w	r3, r6, ip
 8006e94:	3501      	adds	r5, #1
 8006e96:	eb07 090c 	add.w	r9, r7, ip
 8006e9a:	9301      	str	r3, [sp, #4]
 8006e9c:	fbb0 f5f5 	udiv	r5, r0, r5
 8006ea0:	b395      	cbz	r5, 8006f08 <quorem+0x9e>
 8006ea2:	f04f 0a00 	mov.w	sl, #0
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	46b6      	mov	lr, r6
 8006eaa:	46d3      	mov	fp, sl
 8006eac:	f850 2b04 	ldr.w	r2, [r0], #4
 8006eb0:	b293      	uxth	r3, r2
 8006eb2:	fb05 a303 	mla	r3, r5, r3, sl
 8006eb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	ebab 0303 	sub.w	r3, fp, r3
 8006ec0:	0c12      	lsrs	r2, r2, #16
 8006ec2:	f8de b000 	ldr.w	fp, [lr]
 8006ec6:	fb05 a202 	mla	r2, r5, r2, sl
 8006eca:	fa13 f38b 	uxtah	r3, r3, fp
 8006ece:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006ed2:	fa1f fb82 	uxth.w	fp, r2
 8006ed6:	f8de 2000 	ldr.w	r2, [lr]
 8006eda:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006ede:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ee8:	4581      	cmp	r9, r0
 8006eea:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006eee:	f84e 3b04 	str.w	r3, [lr], #4
 8006ef2:	d2db      	bcs.n	8006eac <quorem+0x42>
 8006ef4:	f856 300c 	ldr.w	r3, [r6, ip]
 8006ef8:	b933      	cbnz	r3, 8006f08 <quorem+0x9e>
 8006efa:	9b01      	ldr	r3, [sp, #4]
 8006efc:	3b04      	subs	r3, #4
 8006efe:	429e      	cmp	r6, r3
 8006f00:	461a      	mov	r2, r3
 8006f02:	d330      	bcc.n	8006f66 <quorem+0xfc>
 8006f04:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f08:	4640      	mov	r0, r8
 8006f0a:	f001 f82b 	bl	8007f64 <__mcmp>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	db25      	blt.n	8006f5e <quorem+0xf4>
 8006f12:	3501      	adds	r5, #1
 8006f14:	4630      	mov	r0, r6
 8006f16:	f04f 0c00 	mov.w	ip, #0
 8006f1a:	f857 2b04 	ldr.w	r2, [r7], #4
 8006f1e:	f8d0 e000 	ldr.w	lr, [r0]
 8006f22:	b293      	uxth	r3, r2
 8006f24:	ebac 0303 	sub.w	r3, ip, r3
 8006f28:	0c12      	lsrs	r2, r2, #16
 8006f2a:	fa13 f38e 	uxtah	r3, r3, lr
 8006f2e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f3c:	45b9      	cmp	r9, r7
 8006f3e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f42:	f840 3b04 	str.w	r3, [r0], #4
 8006f46:	d2e8      	bcs.n	8006f1a <quorem+0xb0>
 8006f48:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006f4c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006f50:	b92a      	cbnz	r2, 8006f5e <quorem+0xf4>
 8006f52:	3b04      	subs	r3, #4
 8006f54:	429e      	cmp	r6, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	d30b      	bcc.n	8006f72 <quorem+0x108>
 8006f5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8006f5e:	4628      	mov	r0, r5
 8006f60:	b003      	add	sp, #12
 8006f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	3b04      	subs	r3, #4
 8006f6a:	2a00      	cmp	r2, #0
 8006f6c:	d1ca      	bne.n	8006f04 <quorem+0x9a>
 8006f6e:	3c01      	subs	r4, #1
 8006f70:	e7c5      	b.n	8006efe <quorem+0x94>
 8006f72:	6812      	ldr	r2, [r2, #0]
 8006f74:	3b04      	subs	r3, #4
 8006f76:	2a00      	cmp	r2, #0
 8006f78:	d1ef      	bne.n	8006f5a <quorem+0xf0>
 8006f7a:	3c01      	subs	r4, #1
 8006f7c:	e7ea      	b.n	8006f54 <quorem+0xea>
 8006f7e:	2000      	movs	r0, #0
 8006f80:	e7ee      	b.n	8006f60 <quorem+0xf6>
 8006f82:	0000      	movs	r0, r0
 8006f84:	0000      	movs	r0, r0
	...

08006f88 <_dtoa_r>:
 8006f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8c:	ec57 6b10 	vmov	r6, r7, d0
 8006f90:	b097      	sub	sp, #92	; 0x5c
 8006f92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f94:	9106      	str	r1, [sp, #24]
 8006f96:	4604      	mov	r4, r0
 8006f98:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f9a:	9312      	str	r3, [sp, #72]	; 0x48
 8006f9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fa0:	e9cd 6700 	strd	r6, r7, [sp]
 8006fa4:	b93d      	cbnz	r5, 8006fb6 <_dtoa_r+0x2e>
 8006fa6:	2010      	movs	r0, #16
 8006fa8:	f000 fdb4 	bl	8007b14 <malloc>
 8006fac:	6260      	str	r0, [r4, #36]	; 0x24
 8006fae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fb2:	6005      	str	r5, [r0, #0]
 8006fb4:	60c5      	str	r5, [r0, #12]
 8006fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb8:	6819      	ldr	r1, [r3, #0]
 8006fba:	b151      	cbz	r1, 8006fd2 <_dtoa_r+0x4a>
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	604a      	str	r2, [r1, #4]
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4093      	lsls	r3, r2
 8006fc4:	608b      	str	r3, [r1, #8]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 fdeb 	bl	8007ba2 <_Bfree>
 8006fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	1e3b      	subs	r3, r7, #0
 8006fd4:	bfbb      	ittet	lt
 8006fd6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006fda:	9301      	strlt	r3, [sp, #4]
 8006fdc:	2300      	movge	r3, #0
 8006fde:	2201      	movlt	r2, #1
 8006fe0:	bfac      	ite	ge
 8006fe2:	f8c8 3000 	strge.w	r3, [r8]
 8006fe6:	f8c8 2000 	strlt.w	r2, [r8]
 8006fea:	4baf      	ldr	r3, [pc, #700]	; (80072a8 <_dtoa_r+0x320>)
 8006fec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006ff0:	ea33 0308 	bics.w	r3, r3, r8
 8006ff4:	d114      	bne.n	8007020 <_dtoa_r+0x98>
 8006ff6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ff8:	f242 730f 	movw	r3, #9999	; 0x270f
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	9b00      	ldr	r3, [sp, #0]
 8007000:	b923      	cbnz	r3, 800700c <_dtoa_r+0x84>
 8007002:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007006:	2800      	cmp	r0, #0
 8007008:	f000 8542 	beq.w	8007a90 <_dtoa_r+0xb08>
 800700c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800700e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80072bc <_dtoa_r+0x334>
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8544 	beq.w	8007aa0 <_dtoa_r+0xb18>
 8007018:	f10b 0303 	add.w	r3, fp, #3
 800701c:	f000 bd3e 	b.w	8007a9c <_dtoa_r+0xb14>
 8007020:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007024:	2200      	movs	r2, #0
 8007026:	2300      	movs	r3, #0
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	f7f9 fd6c 	bl	8000b08 <__aeabi_dcmpeq>
 8007030:	4681      	mov	r9, r0
 8007032:	b168      	cbz	r0, 8007050 <_dtoa_r+0xc8>
 8007034:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007036:	2301      	movs	r3, #1
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800703c:	2b00      	cmp	r3, #0
 800703e:	f000 8524 	beq.w	8007a8a <_dtoa_r+0xb02>
 8007042:	4b9a      	ldr	r3, [pc, #616]	; (80072ac <_dtoa_r+0x324>)
 8007044:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007046:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800704a:	6013      	str	r3, [r2, #0]
 800704c:	f000 bd28 	b.w	8007aa0 <_dtoa_r+0xb18>
 8007050:	aa14      	add	r2, sp, #80	; 0x50
 8007052:	a915      	add	r1, sp, #84	; 0x54
 8007054:	ec47 6b10 	vmov	d0, r6, r7
 8007058:	4620      	mov	r0, r4
 800705a:	f000 fffa 	bl	8008052 <__d2b>
 800705e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007062:	9004      	str	r0, [sp, #16]
 8007064:	2d00      	cmp	r5, #0
 8007066:	d07c      	beq.n	8007162 <_dtoa_r+0x1da>
 8007068:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800706c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007070:	46b2      	mov	sl, r6
 8007072:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800707a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800707e:	2200      	movs	r2, #0
 8007080:	4b8b      	ldr	r3, [pc, #556]	; (80072b0 <_dtoa_r+0x328>)
 8007082:	4650      	mov	r0, sl
 8007084:	4659      	mov	r1, fp
 8007086:	f7f9 f91f 	bl	80002c8 <__aeabi_dsub>
 800708a:	a381      	add	r3, pc, #516	; (adr r3, 8007290 <_dtoa_r+0x308>)
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	f7f9 fad2 	bl	8000638 <__aeabi_dmul>
 8007094:	a380      	add	r3, pc, #512	; (adr r3, 8007298 <_dtoa_r+0x310>)
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f7f9 f917 	bl	80002cc <__adddf3>
 800709e:	4606      	mov	r6, r0
 80070a0:	4628      	mov	r0, r5
 80070a2:	460f      	mov	r7, r1
 80070a4:	f7f9 fa5e 	bl	8000564 <__aeabi_i2d>
 80070a8:	a37d      	add	r3, pc, #500	; (adr r3, 80072a0 <_dtoa_r+0x318>)
 80070aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ae:	f7f9 fac3 	bl	8000638 <__aeabi_dmul>
 80070b2:	4602      	mov	r2, r0
 80070b4:	460b      	mov	r3, r1
 80070b6:	4630      	mov	r0, r6
 80070b8:	4639      	mov	r1, r7
 80070ba:	f7f9 f907 	bl	80002cc <__adddf3>
 80070be:	4606      	mov	r6, r0
 80070c0:	460f      	mov	r7, r1
 80070c2:	f7f9 fd69 	bl	8000b98 <__aeabi_d2iz>
 80070c6:	2200      	movs	r2, #0
 80070c8:	4682      	mov	sl, r0
 80070ca:	2300      	movs	r3, #0
 80070cc:	4630      	mov	r0, r6
 80070ce:	4639      	mov	r1, r7
 80070d0:	f7f9 fd24 	bl	8000b1c <__aeabi_dcmplt>
 80070d4:	b148      	cbz	r0, 80070ea <_dtoa_r+0x162>
 80070d6:	4650      	mov	r0, sl
 80070d8:	f7f9 fa44 	bl	8000564 <__aeabi_i2d>
 80070dc:	4632      	mov	r2, r6
 80070de:	463b      	mov	r3, r7
 80070e0:	f7f9 fd12 	bl	8000b08 <__aeabi_dcmpeq>
 80070e4:	b908      	cbnz	r0, 80070ea <_dtoa_r+0x162>
 80070e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80070ea:	f1ba 0f16 	cmp.w	sl, #22
 80070ee:	d859      	bhi.n	80071a4 <_dtoa_r+0x21c>
 80070f0:	4970      	ldr	r1, [pc, #448]	; (80072b4 <_dtoa_r+0x32c>)
 80070f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80070f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070fe:	f7f9 fd2b 	bl	8000b58 <__aeabi_dcmpgt>
 8007102:	2800      	cmp	r0, #0
 8007104:	d050      	beq.n	80071a8 <_dtoa_r+0x220>
 8007106:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800710a:	2300      	movs	r3, #0
 800710c:	930f      	str	r3, [sp, #60]	; 0x3c
 800710e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007110:	1b5d      	subs	r5, r3, r5
 8007112:	f1b5 0801 	subs.w	r8, r5, #1
 8007116:	bf49      	itett	mi
 8007118:	f1c5 0301 	rsbmi	r3, r5, #1
 800711c:	2300      	movpl	r3, #0
 800711e:	9305      	strmi	r3, [sp, #20]
 8007120:	f04f 0800 	movmi.w	r8, #0
 8007124:	bf58      	it	pl
 8007126:	9305      	strpl	r3, [sp, #20]
 8007128:	f1ba 0f00 	cmp.w	sl, #0
 800712c:	db3e      	blt.n	80071ac <_dtoa_r+0x224>
 800712e:	2300      	movs	r3, #0
 8007130:	44d0      	add	r8, sl
 8007132:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007136:	9307      	str	r3, [sp, #28]
 8007138:	9b06      	ldr	r3, [sp, #24]
 800713a:	2b09      	cmp	r3, #9
 800713c:	f200 8090 	bhi.w	8007260 <_dtoa_r+0x2d8>
 8007140:	2b05      	cmp	r3, #5
 8007142:	bfc4      	itt	gt
 8007144:	3b04      	subgt	r3, #4
 8007146:	9306      	strgt	r3, [sp, #24]
 8007148:	9b06      	ldr	r3, [sp, #24]
 800714a:	f1a3 0302 	sub.w	r3, r3, #2
 800714e:	bfcc      	ite	gt
 8007150:	2500      	movgt	r5, #0
 8007152:	2501      	movle	r5, #1
 8007154:	2b03      	cmp	r3, #3
 8007156:	f200 808f 	bhi.w	8007278 <_dtoa_r+0x2f0>
 800715a:	e8df f003 	tbb	[pc, r3]
 800715e:	7f7d      	.short	0x7f7d
 8007160:	7131      	.short	0x7131
 8007162:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007166:	441d      	add	r5, r3
 8007168:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800716c:	2820      	cmp	r0, #32
 800716e:	dd13      	ble.n	8007198 <_dtoa_r+0x210>
 8007170:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007174:	9b00      	ldr	r3, [sp, #0]
 8007176:	fa08 f800 	lsl.w	r8, r8, r0
 800717a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800717e:	fa23 f000 	lsr.w	r0, r3, r0
 8007182:	ea48 0000 	orr.w	r0, r8, r0
 8007186:	f7f9 f9dd 	bl	8000544 <__aeabi_ui2d>
 800718a:	2301      	movs	r3, #1
 800718c:	4682      	mov	sl, r0
 800718e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007192:	3d01      	subs	r5, #1
 8007194:	9313      	str	r3, [sp, #76]	; 0x4c
 8007196:	e772      	b.n	800707e <_dtoa_r+0xf6>
 8007198:	9b00      	ldr	r3, [sp, #0]
 800719a:	f1c0 0020 	rsb	r0, r0, #32
 800719e:	fa03 f000 	lsl.w	r0, r3, r0
 80071a2:	e7f0      	b.n	8007186 <_dtoa_r+0x1fe>
 80071a4:	2301      	movs	r3, #1
 80071a6:	e7b1      	b.n	800710c <_dtoa_r+0x184>
 80071a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80071aa:	e7b0      	b.n	800710e <_dtoa_r+0x186>
 80071ac:	9b05      	ldr	r3, [sp, #20]
 80071ae:	eba3 030a 	sub.w	r3, r3, sl
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	f1ca 0300 	rsb	r3, sl, #0
 80071b8:	9307      	str	r3, [sp, #28]
 80071ba:	2300      	movs	r3, #0
 80071bc:	930e      	str	r3, [sp, #56]	; 0x38
 80071be:	e7bb      	b.n	8007138 <_dtoa_r+0x1b0>
 80071c0:	2301      	movs	r3, #1
 80071c2:	930a      	str	r3, [sp, #40]	; 0x28
 80071c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	dd59      	ble.n	800727e <_dtoa_r+0x2f6>
 80071ca:	9302      	str	r3, [sp, #8]
 80071cc:	4699      	mov	r9, r3
 80071ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071d0:	2200      	movs	r2, #0
 80071d2:	6072      	str	r2, [r6, #4]
 80071d4:	2204      	movs	r2, #4
 80071d6:	f102 0014 	add.w	r0, r2, #20
 80071da:	4298      	cmp	r0, r3
 80071dc:	6871      	ldr	r1, [r6, #4]
 80071de:	d953      	bls.n	8007288 <_dtoa_r+0x300>
 80071e0:	4620      	mov	r0, r4
 80071e2:	f000 fcaa 	bl	8007b3a <_Balloc>
 80071e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e8:	6030      	str	r0, [r6, #0]
 80071ea:	f1b9 0f0e 	cmp.w	r9, #14
 80071ee:	f8d3 b000 	ldr.w	fp, [r3]
 80071f2:	f200 80e6 	bhi.w	80073c2 <_dtoa_r+0x43a>
 80071f6:	2d00      	cmp	r5, #0
 80071f8:	f000 80e3 	beq.w	80073c2 <_dtoa_r+0x43a>
 80071fc:	ed9d 7b00 	vldr	d7, [sp]
 8007200:	f1ba 0f00 	cmp.w	sl, #0
 8007204:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007208:	dd74      	ble.n	80072f4 <_dtoa_r+0x36c>
 800720a:	4a2a      	ldr	r2, [pc, #168]	; (80072b4 <_dtoa_r+0x32c>)
 800720c:	f00a 030f 	and.w	r3, sl, #15
 8007210:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007214:	ed93 7b00 	vldr	d7, [r3]
 8007218:	ea4f 162a 	mov.w	r6, sl, asr #4
 800721c:	06f0      	lsls	r0, r6, #27
 800721e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007222:	d565      	bpl.n	80072f0 <_dtoa_r+0x368>
 8007224:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <_dtoa_r+0x330>)
 8007226:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800722a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800722e:	f7f9 fb2d 	bl	800088c <__aeabi_ddiv>
 8007232:	e9cd 0100 	strd	r0, r1, [sp]
 8007236:	f006 060f 	and.w	r6, r6, #15
 800723a:	2503      	movs	r5, #3
 800723c:	4f1e      	ldr	r7, [pc, #120]	; (80072b8 <_dtoa_r+0x330>)
 800723e:	e04c      	b.n	80072da <_dtoa_r+0x352>
 8007240:	2301      	movs	r3, #1
 8007242:	930a      	str	r3, [sp, #40]	; 0x28
 8007244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007246:	4453      	add	r3, sl
 8007248:	f103 0901 	add.w	r9, r3, #1
 800724c:	9302      	str	r3, [sp, #8]
 800724e:	464b      	mov	r3, r9
 8007250:	2b01      	cmp	r3, #1
 8007252:	bfb8      	it	lt
 8007254:	2301      	movlt	r3, #1
 8007256:	e7ba      	b.n	80071ce <_dtoa_r+0x246>
 8007258:	2300      	movs	r3, #0
 800725a:	e7b2      	b.n	80071c2 <_dtoa_r+0x23a>
 800725c:	2300      	movs	r3, #0
 800725e:	e7f0      	b.n	8007242 <_dtoa_r+0x2ba>
 8007260:	2501      	movs	r5, #1
 8007262:	2300      	movs	r3, #0
 8007264:	9306      	str	r3, [sp, #24]
 8007266:	950a      	str	r5, [sp, #40]	; 0x28
 8007268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800726c:	9302      	str	r3, [sp, #8]
 800726e:	4699      	mov	r9, r3
 8007270:	2200      	movs	r2, #0
 8007272:	2312      	movs	r3, #18
 8007274:	920b      	str	r2, [sp, #44]	; 0x2c
 8007276:	e7aa      	b.n	80071ce <_dtoa_r+0x246>
 8007278:	2301      	movs	r3, #1
 800727a:	930a      	str	r3, [sp, #40]	; 0x28
 800727c:	e7f4      	b.n	8007268 <_dtoa_r+0x2e0>
 800727e:	2301      	movs	r3, #1
 8007280:	9302      	str	r3, [sp, #8]
 8007282:	4699      	mov	r9, r3
 8007284:	461a      	mov	r2, r3
 8007286:	e7f5      	b.n	8007274 <_dtoa_r+0x2ec>
 8007288:	3101      	adds	r1, #1
 800728a:	6071      	str	r1, [r6, #4]
 800728c:	0052      	lsls	r2, r2, #1
 800728e:	e7a2      	b.n	80071d6 <_dtoa_r+0x24e>
 8007290:	636f4361 	.word	0x636f4361
 8007294:	3fd287a7 	.word	0x3fd287a7
 8007298:	8b60c8b3 	.word	0x8b60c8b3
 800729c:	3fc68a28 	.word	0x3fc68a28
 80072a0:	509f79fb 	.word	0x509f79fb
 80072a4:	3fd34413 	.word	0x3fd34413
 80072a8:	7ff00000 	.word	0x7ff00000
 80072ac:	08009bd5 	.word	0x08009bd5
 80072b0:	3ff80000 	.word	0x3ff80000
 80072b4:	08009c30 	.word	0x08009c30
 80072b8:	08009c08 	.word	0x08009c08
 80072bc:	08009c01 	.word	0x08009c01
 80072c0:	07f1      	lsls	r1, r6, #31
 80072c2:	d508      	bpl.n	80072d6 <_dtoa_r+0x34e>
 80072c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072cc:	f7f9 f9b4 	bl	8000638 <__aeabi_dmul>
 80072d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072d4:	3501      	adds	r5, #1
 80072d6:	1076      	asrs	r6, r6, #1
 80072d8:	3708      	adds	r7, #8
 80072da:	2e00      	cmp	r6, #0
 80072dc:	d1f0      	bne.n	80072c0 <_dtoa_r+0x338>
 80072de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80072e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072e6:	f7f9 fad1 	bl	800088c <__aeabi_ddiv>
 80072ea:	e9cd 0100 	strd	r0, r1, [sp]
 80072ee:	e01a      	b.n	8007326 <_dtoa_r+0x39e>
 80072f0:	2502      	movs	r5, #2
 80072f2:	e7a3      	b.n	800723c <_dtoa_r+0x2b4>
 80072f4:	f000 80a0 	beq.w	8007438 <_dtoa_r+0x4b0>
 80072f8:	f1ca 0600 	rsb	r6, sl, #0
 80072fc:	4b9f      	ldr	r3, [pc, #636]	; (800757c <_dtoa_r+0x5f4>)
 80072fe:	4fa0      	ldr	r7, [pc, #640]	; (8007580 <_dtoa_r+0x5f8>)
 8007300:	f006 020f 	and.w	r2, r6, #15
 8007304:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007310:	f7f9 f992 	bl	8000638 <__aeabi_dmul>
 8007314:	e9cd 0100 	strd	r0, r1, [sp]
 8007318:	1136      	asrs	r6, r6, #4
 800731a:	2300      	movs	r3, #0
 800731c:	2502      	movs	r5, #2
 800731e:	2e00      	cmp	r6, #0
 8007320:	d17f      	bne.n	8007422 <_dtoa_r+0x49a>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e1      	bne.n	80072ea <_dtoa_r+0x362>
 8007326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8087 	beq.w	800743c <_dtoa_r+0x4b4>
 800732e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007332:	2200      	movs	r2, #0
 8007334:	4b93      	ldr	r3, [pc, #588]	; (8007584 <_dtoa_r+0x5fc>)
 8007336:	4630      	mov	r0, r6
 8007338:	4639      	mov	r1, r7
 800733a:	f7f9 fbef 	bl	8000b1c <__aeabi_dcmplt>
 800733e:	2800      	cmp	r0, #0
 8007340:	d07c      	beq.n	800743c <_dtoa_r+0x4b4>
 8007342:	f1b9 0f00 	cmp.w	r9, #0
 8007346:	d079      	beq.n	800743c <_dtoa_r+0x4b4>
 8007348:	9b02      	ldr	r3, [sp, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	dd35      	ble.n	80073ba <_dtoa_r+0x432>
 800734e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007352:	9308      	str	r3, [sp, #32]
 8007354:	4639      	mov	r1, r7
 8007356:	2200      	movs	r2, #0
 8007358:	4b8b      	ldr	r3, [pc, #556]	; (8007588 <_dtoa_r+0x600>)
 800735a:	4630      	mov	r0, r6
 800735c:	f7f9 f96c 	bl	8000638 <__aeabi_dmul>
 8007360:	e9cd 0100 	strd	r0, r1, [sp]
 8007364:	9f02      	ldr	r7, [sp, #8]
 8007366:	3501      	adds	r5, #1
 8007368:	4628      	mov	r0, r5
 800736a:	f7f9 f8fb 	bl	8000564 <__aeabi_i2d>
 800736e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007372:	f7f9 f961 	bl	8000638 <__aeabi_dmul>
 8007376:	2200      	movs	r2, #0
 8007378:	4b84      	ldr	r3, [pc, #528]	; (800758c <_dtoa_r+0x604>)
 800737a:	f7f8 ffa7 	bl	80002cc <__adddf3>
 800737e:	4605      	mov	r5, r0
 8007380:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007384:	2f00      	cmp	r7, #0
 8007386:	d15d      	bne.n	8007444 <_dtoa_r+0x4bc>
 8007388:	2200      	movs	r2, #0
 800738a:	4b81      	ldr	r3, [pc, #516]	; (8007590 <_dtoa_r+0x608>)
 800738c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007390:	f7f8 ff9a 	bl	80002c8 <__aeabi_dsub>
 8007394:	462a      	mov	r2, r5
 8007396:	4633      	mov	r3, r6
 8007398:	e9cd 0100 	strd	r0, r1, [sp]
 800739c:	f7f9 fbdc 	bl	8000b58 <__aeabi_dcmpgt>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	f040 8288 	bne.w	80078b6 <_dtoa_r+0x92e>
 80073a6:	462a      	mov	r2, r5
 80073a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80073ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073b0:	f7f9 fbb4 	bl	8000b1c <__aeabi_dcmplt>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	f040 827c 	bne.w	80078b2 <_dtoa_r+0x92a>
 80073ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073be:	e9cd 2300 	strd	r2, r3, [sp]
 80073c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f2c0 8150 	blt.w	800766a <_dtoa_r+0x6e2>
 80073ca:	f1ba 0f0e 	cmp.w	sl, #14
 80073ce:	f300 814c 	bgt.w	800766a <_dtoa_r+0x6e2>
 80073d2:	4b6a      	ldr	r3, [pc, #424]	; (800757c <_dtoa_r+0x5f4>)
 80073d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80073d8:	ed93 7b00 	vldr	d7, [r3]
 80073dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073de:	2b00      	cmp	r3, #0
 80073e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073e4:	f280 80d8 	bge.w	8007598 <_dtoa_r+0x610>
 80073e8:	f1b9 0f00 	cmp.w	r9, #0
 80073ec:	f300 80d4 	bgt.w	8007598 <_dtoa_r+0x610>
 80073f0:	f040 825e 	bne.w	80078b0 <_dtoa_r+0x928>
 80073f4:	2200      	movs	r2, #0
 80073f6:	4b66      	ldr	r3, [pc, #408]	; (8007590 <_dtoa_r+0x608>)
 80073f8:	ec51 0b17 	vmov	r0, r1, d7
 80073fc:	f7f9 f91c 	bl	8000638 <__aeabi_dmul>
 8007400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007404:	f7f9 fb9e 	bl	8000b44 <__aeabi_dcmpge>
 8007408:	464f      	mov	r7, r9
 800740a:	464e      	mov	r6, r9
 800740c:	2800      	cmp	r0, #0
 800740e:	f040 8234 	bne.w	800787a <_dtoa_r+0x8f2>
 8007412:	2331      	movs	r3, #49	; 0x31
 8007414:	f10b 0501 	add.w	r5, fp, #1
 8007418:	f88b 3000 	strb.w	r3, [fp]
 800741c:	f10a 0a01 	add.w	sl, sl, #1
 8007420:	e22f      	b.n	8007882 <_dtoa_r+0x8fa>
 8007422:	07f2      	lsls	r2, r6, #31
 8007424:	d505      	bpl.n	8007432 <_dtoa_r+0x4aa>
 8007426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800742a:	f7f9 f905 	bl	8000638 <__aeabi_dmul>
 800742e:	3501      	adds	r5, #1
 8007430:	2301      	movs	r3, #1
 8007432:	1076      	asrs	r6, r6, #1
 8007434:	3708      	adds	r7, #8
 8007436:	e772      	b.n	800731e <_dtoa_r+0x396>
 8007438:	2502      	movs	r5, #2
 800743a:	e774      	b.n	8007326 <_dtoa_r+0x39e>
 800743c:	f8cd a020 	str.w	sl, [sp, #32]
 8007440:	464f      	mov	r7, r9
 8007442:	e791      	b.n	8007368 <_dtoa_r+0x3e0>
 8007444:	4b4d      	ldr	r3, [pc, #308]	; (800757c <_dtoa_r+0x5f4>)
 8007446:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800744a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800744e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007450:	2b00      	cmp	r3, #0
 8007452:	d047      	beq.n	80074e4 <_dtoa_r+0x55c>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	2000      	movs	r0, #0
 800745a:	494e      	ldr	r1, [pc, #312]	; (8007594 <_dtoa_r+0x60c>)
 800745c:	f7f9 fa16 	bl	800088c <__aeabi_ddiv>
 8007460:	462a      	mov	r2, r5
 8007462:	4633      	mov	r3, r6
 8007464:	f7f8 ff30 	bl	80002c8 <__aeabi_dsub>
 8007468:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800746c:	465d      	mov	r5, fp
 800746e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007472:	f7f9 fb91 	bl	8000b98 <__aeabi_d2iz>
 8007476:	4606      	mov	r6, r0
 8007478:	f7f9 f874 	bl	8000564 <__aeabi_i2d>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007484:	f7f8 ff20 	bl	80002c8 <__aeabi_dsub>
 8007488:	3630      	adds	r6, #48	; 0x30
 800748a:	f805 6b01 	strb.w	r6, [r5], #1
 800748e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007492:	e9cd 0100 	strd	r0, r1, [sp]
 8007496:	f7f9 fb41 	bl	8000b1c <__aeabi_dcmplt>
 800749a:	2800      	cmp	r0, #0
 800749c:	d163      	bne.n	8007566 <_dtoa_r+0x5de>
 800749e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074a2:	2000      	movs	r0, #0
 80074a4:	4937      	ldr	r1, [pc, #220]	; (8007584 <_dtoa_r+0x5fc>)
 80074a6:	f7f8 ff0f 	bl	80002c8 <__aeabi_dsub>
 80074aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074ae:	f7f9 fb35 	bl	8000b1c <__aeabi_dcmplt>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	f040 80b7 	bne.w	8007626 <_dtoa_r+0x69e>
 80074b8:	eba5 030b 	sub.w	r3, r5, fp
 80074bc:	429f      	cmp	r7, r3
 80074be:	f77f af7c 	ble.w	80073ba <_dtoa_r+0x432>
 80074c2:	2200      	movs	r2, #0
 80074c4:	4b30      	ldr	r3, [pc, #192]	; (8007588 <_dtoa_r+0x600>)
 80074c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074ca:	f7f9 f8b5 	bl	8000638 <__aeabi_dmul>
 80074ce:	2200      	movs	r2, #0
 80074d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074d4:	4b2c      	ldr	r3, [pc, #176]	; (8007588 <_dtoa_r+0x600>)
 80074d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074da:	f7f9 f8ad 	bl	8000638 <__aeabi_dmul>
 80074de:	e9cd 0100 	strd	r0, r1, [sp]
 80074e2:	e7c4      	b.n	800746e <_dtoa_r+0x4e6>
 80074e4:	462a      	mov	r2, r5
 80074e6:	4633      	mov	r3, r6
 80074e8:	f7f9 f8a6 	bl	8000638 <__aeabi_dmul>
 80074ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80074f0:	eb0b 0507 	add.w	r5, fp, r7
 80074f4:	465e      	mov	r6, fp
 80074f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074fa:	f7f9 fb4d 	bl	8000b98 <__aeabi_d2iz>
 80074fe:	4607      	mov	r7, r0
 8007500:	f7f9 f830 	bl	8000564 <__aeabi_i2d>
 8007504:	3730      	adds	r7, #48	; 0x30
 8007506:	4602      	mov	r2, r0
 8007508:	460b      	mov	r3, r1
 800750a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800750e:	f7f8 fedb 	bl	80002c8 <__aeabi_dsub>
 8007512:	f806 7b01 	strb.w	r7, [r6], #1
 8007516:	42ae      	cmp	r6, r5
 8007518:	e9cd 0100 	strd	r0, r1, [sp]
 800751c:	f04f 0200 	mov.w	r2, #0
 8007520:	d126      	bne.n	8007570 <_dtoa_r+0x5e8>
 8007522:	4b1c      	ldr	r3, [pc, #112]	; (8007594 <_dtoa_r+0x60c>)
 8007524:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007528:	f7f8 fed0 	bl	80002cc <__adddf3>
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007534:	f7f9 fb10 	bl	8000b58 <__aeabi_dcmpgt>
 8007538:	2800      	cmp	r0, #0
 800753a:	d174      	bne.n	8007626 <_dtoa_r+0x69e>
 800753c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007540:	2000      	movs	r0, #0
 8007542:	4914      	ldr	r1, [pc, #80]	; (8007594 <_dtoa_r+0x60c>)
 8007544:	f7f8 fec0 	bl	80002c8 <__aeabi_dsub>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007550:	f7f9 fae4 	bl	8000b1c <__aeabi_dcmplt>
 8007554:	2800      	cmp	r0, #0
 8007556:	f43f af30 	beq.w	80073ba <_dtoa_r+0x432>
 800755a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800755e:	2b30      	cmp	r3, #48	; 0x30
 8007560:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007564:	d002      	beq.n	800756c <_dtoa_r+0x5e4>
 8007566:	f8dd a020 	ldr.w	sl, [sp, #32]
 800756a:	e04a      	b.n	8007602 <_dtoa_r+0x67a>
 800756c:	4615      	mov	r5, r2
 800756e:	e7f4      	b.n	800755a <_dtoa_r+0x5d2>
 8007570:	4b05      	ldr	r3, [pc, #20]	; (8007588 <_dtoa_r+0x600>)
 8007572:	f7f9 f861 	bl	8000638 <__aeabi_dmul>
 8007576:	e9cd 0100 	strd	r0, r1, [sp]
 800757a:	e7bc      	b.n	80074f6 <_dtoa_r+0x56e>
 800757c:	08009c30 	.word	0x08009c30
 8007580:	08009c08 	.word	0x08009c08
 8007584:	3ff00000 	.word	0x3ff00000
 8007588:	40240000 	.word	0x40240000
 800758c:	401c0000 	.word	0x401c0000
 8007590:	40140000 	.word	0x40140000
 8007594:	3fe00000 	.word	0x3fe00000
 8007598:	e9dd 6700 	ldrd	r6, r7, [sp]
 800759c:	465d      	mov	r5, fp
 800759e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075a2:	4630      	mov	r0, r6
 80075a4:	4639      	mov	r1, r7
 80075a6:	f7f9 f971 	bl	800088c <__aeabi_ddiv>
 80075aa:	f7f9 faf5 	bl	8000b98 <__aeabi_d2iz>
 80075ae:	4680      	mov	r8, r0
 80075b0:	f7f8 ffd8 	bl	8000564 <__aeabi_i2d>
 80075b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075b8:	f7f9 f83e 	bl	8000638 <__aeabi_dmul>
 80075bc:	4602      	mov	r2, r0
 80075be:	460b      	mov	r3, r1
 80075c0:	4630      	mov	r0, r6
 80075c2:	4639      	mov	r1, r7
 80075c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80075c8:	f7f8 fe7e 	bl	80002c8 <__aeabi_dsub>
 80075cc:	f805 6b01 	strb.w	r6, [r5], #1
 80075d0:	eba5 060b 	sub.w	r6, r5, fp
 80075d4:	45b1      	cmp	r9, r6
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	d139      	bne.n	8007650 <_dtoa_r+0x6c8>
 80075dc:	f7f8 fe76 	bl	80002cc <__adddf3>
 80075e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075e4:	4606      	mov	r6, r0
 80075e6:	460f      	mov	r7, r1
 80075e8:	f7f9 fab6 	bl	8000b58 <__aeabi_dcmpgt>
 80075ec:	b9c8      	cbnz	r0, 8007622 <_dtoa_r+0x69a>
 80075ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075f2:	4630      	mov	r0, r6
 80075f4:	4639      	mov	r1, r7
 80075f6:	f7f9 fa87 	bl	8000b08 <__aeabi_dcmpeq>
 80075fa:	b110      	cbz	r0, 8007602 <_dtoa_r+0x67a>
 80075fc:	f018 0f01 	tst.w	r8, #1
 8007600:	d10f      	bne.n	8007622 <_dtoa_r+0x69a>
 8007602:	9904      	ldr	r1, [sp, #16]
 8007604:	4620      	mov	r0, r4
 8007606:	f000 facc 	bl	8007ba2 <_Bfree>
 800760a:	2300      	movs	r3, #0
 800760c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800760e:	702b      	strb	r3, [r5, #0]
 8007610:	f10a 0301 	add.w	r3, sl, #1
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007618:	2b00      	cmp	r3, #0
 800761a:	f000 8241 	beq.w	8007aa0 <_dtoa_r+0xb18>
 800761e:	601d      	str	r5, [r3, #0]
 8007620:	e23e      	b.n	8007aa0 <_dtoa_r+0xb18>
 8007622:	f8cd a020 	str.w	sl, [sp, #32]
 8007626:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800762a:	2a39      	cmp	r2, #57	; 0x39
 800762c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007630:	d108      	bne.n	8007644 <_dtoa_r+0x6bc>
 8007632:	459b      	cmp	fp, r3
 8007634:	d10a      	bne.n	800764c <_dtoa_r+0x6c4>
 8007636:	9b08      	ldr	r3, [sp, #32]
 8007638:	3301      	adds	r3, #1
 800763a:	9308      	str	r3, [sp, #32]
 800763c:	2330      	movs	r3, #48	; 0x30
 800763e:	f88b 3000 	strb.w	r3, [fp]
 8007642:	465b      	mov	r3, fp
 8007644:	781a      	ldrb	r2, [r3, #0]
 8007646:	3201      	adds	r2, #1
 8007648:	701a      	strb	r2, [r3, #0]
 800764a:	e78c      	b.n	8007566 <_dtoa_r+0x5de>
 800764c:	461d      	mov	r5, r3
 800764e:	e7ea      	b.n	8007626 <_dtoa_r+0x69e>
 8007650:	2200      	movs	r2, #0
 8007652:	4b9b      	ldr	r3, [pc, #620]	; (80078c0 <_dtoa_r+0x938>)
 8007654:	f7f8 fff0 	bl	8000638 <__aeabi_dmul>
 8007658:	2200      	movs	r2, #0
 800765a:	2300      	movs	r3, #0
 800765c:	4606      	mov	r6, r0
 800765e:	460f      	mov	r7, r1
 8007660:	f7f9 fa52 	bl	8000b08 <__aeabi_dcmpeq>
 8007664:	2800      	cmp	r0, #0
 8007666:	d09a      	beq.n	800759e <_dtoa_r+0x616>
 8007668:	e7cb      	b.n	8007602 <_dtoa_r+0x67a>
 800766a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800766c:	2a00      	cmp	r2, #0
 800766e:	f000 808b 	beq.w	8007788 <_dtoa_r+0x800>
 8007672:	9a06      	ldr	r2, [sp, #24]
 8007674:	2a01      	cmp	r2, #1
 8007676:	dc6e      	bgt.n	8007756 <_dtoa_r+0x7ce>
 8007678:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800767a:	2a00      	cmp	r2, #0
 800767c:	d067      	beq.n	800774e <_dtoa_r+0x7c6>
 800767e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007682:	9f07      	ldr	r7, [sp, #28]
 8007684:	9d05      	ldr	r5, [sp, #20]
 8007686:	9a05      	ldr	r2, [sp, #20]
 8007688:	2101      	movs	r1, #1
 800768a:	441a      	add	r2, r3
 800768c:	4620      	mov	r0, r4
 800768e:	9205      	str	r2, [sp, #20]
 8007690:	4498      	add	r8, r3
 8007692:	f000 fb26 	bl	8007ce2 <__i2b>
 8007696:	4606      	mov	r6, r0
 8007698:	2d00      	cmp	r5, #0
 800769a:	dd0c      	ble.n	80076b6 <_dtoa_r+0x72e>
 800769c:	f1b8 0f00 	cmp.w	r8, #0
 80076a0:	dd09      	ble.n	80076b6 <_dtoa_r+0x72e>
 80076a2:	4545      	cmp	r5, r8
 80076a4:	9a05      	ldr	r2, [sp, #20]
 80076a6:	462b      	mov	r3, r5
 80076a8:	bfa8      	it	ge
 80076aa:	4643      	movge	r3, r8
 80076ac:	1ad2      	subs	r2, r2, r3
 80076ae:	9205      	str	r2, [sp, #20]
 80076b0:	1aed      	subs	r5, r5, r3
 80076b2:	eba8 0803 	sub.w	r8, r8, r3
 80076b6:	9b07      	ldr	r3, [sp, #28]
 80076b8:	b1eb      	cbz	r3, 80076f6 <_dtoa_r+0x76e>
 80076ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d067      	beq.n	8007790 <_dtoa_r+0x808>
 80076c0:	b18f      	cbz	r7, 80076e6 <_dtoa_r+0x75e>
 80076c2:	4631      	mov	r1, r6
 80076c4:	463a      	mov	r2, r7
 80076c6:	4620      	mov	r0, r4
 80076c8:	f000 fbaa 	bl	8007e20 <__pow5mult>
 80076cc:	9a04      	ldr	r2, [sp, #16]
 80076ce:	4601      	mov	r1, r0
 80076d0:	4606      	mov	r6, r0
 80076d2:	4620      	mov	r0, r4
 80076d4:	f000 fb0e 	bl	8007cf4 <__multiply>
 80076d8:	9904      	ldr	r1, [sp, #16]
 80076da:	9008      	str	r0, [sp, #32]
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 fa60 	bl	8007ba2 <_Bfree>
 80076e2:	9b08      	ldr	r3, [sp, #32]
 80076e4:	9304      	str	r3, [sp, #16]
 80076e6:	9b07      	ldr	r3, [sp, #28]
 80076e8:	1bda      	subs	r2, r3, r7
 80076ea:	d004      	beq.n	80076f6 <_dtoa_r+0x76e>
 80076ec:	9904      	ldr	r1, [sp, #16]
 80076ee:	4620      	mov	r0, r4
 80076f0:	f000 fb96 	bl	8007e20 <__pow5mult>
 80076f4:	9004      	str	r0, [sp, #16]
 80076f6:	2101      	movs	r1, #1
 80076f8:	4620      	mov	r0, r4
 80076fa:	f000 faf2 	bl	8007ce2 <__i2b>
 80076fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007700:	4607      	mov	r7, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 81d0 	beq.w	8007aa8 <_dtoa_r+0xb20>
 8007708:	461a      	mov	r2, r3
 800770a:	4601      	mov	r1, r0
 800770c:	4620      	mov	r0, r4
 800770e:	f000 fb87 	bl	8007e20 <__pow5mult>
 8007712:	9b06      	ldr	r3, [sp, #24]
 8007714:	2b01      	cmp	r3, #1
 8007716:	4607      	mov	r7, r0
 8007718:	dc40      	bgt.n	800779c <_dtoa_r+0x814>
 800771a:	9b00      	ldr	r3, [sp, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d139      	bne.n	8007794 <_dtoa_r+0x80c>
 8007720:	9b01      	ldr	r3, [sp, #4]
 8007722:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007726:	2b00      	cmp	r3, #0
 8007728:	d136      	bne.n	8007798 <_dtoa_r+0x810>
 800772a:	9b01      	ldr	r3, [sp, #4]
 800772c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007730:	0d1b      	lsrs	r3, r3, #20
 8007732:	051b      	lsls	r3, r3, #20
 8007734:	b12b      	cbz	r3, 8007742 <_dtoa_r+0x7ba>
 8007736:	9b05      	ldr	r3, [sp, #20]
 8007738:	3301      	adds	r3, #1
 800773a:	9305      	str	r3, [sp, #20]
 800773c:	f108 0801 	add.w	r8, r8, #1
 8007740:	2301      	movs	r3, #1
 8007742:	9307      	str	r3, [sp, #28]
 8007744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007746:	2b00      	cmp	r3, #0
 8007748:	d12a      	bne.n	80077a0 <_dtoa_r+0x818>
 800774a:	2001      	movs	r0, #1
 800774c:	e030      	b.n	80077b0 <_dtoa_r+0x828>
 800774e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007750:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007754:	e795      	b.n	8007682 <_dtoa_r+0x6fa>
 8007756:	9b07      	ldr	r3, [sp, #28]
 8007758:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800775c:	42bb      	cmp	r3, r7
 800775e:	bfbf      	itttt	lt
 8007760:	9b07      	ldrlt	r3, [sp, #28]
 8007762:	9707      	strlt	r7, [sp, #28]
 8007764:	1afa      	sublt	r2, r7, r3
 8007766:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007768:	bfbb      	ittet	lt
 800776a:	189b      	addlt	r3, r3, r2
 800776c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800776e:	1bdf      	subge	r7, r3, r7
 8007770:	2700      	movlt	r7, #0
 8007772:	f1b9 0f00 	cmp.w	r9, #0
 8007776:	bfb5      	itete	lt
 8007778:	9b05      	ldrlt	r3, [sp, #20]
 800777a:	9d05      	ldrge	r5, [sp, #20]
 800777c:	eba3 0509 	sublt.w	r5, r3, r9
 8007780:	464b      	movge	r3, r9
 8007782:	bfb8      	it	lt
 8007784:	2300      	movlt	r3, #0
 8007786:	e77e      	b.n	8007686 <_dtoa_r+0x6fe>
 8007788:	9f07      	ldr	r7, [sp, #28]
 800778a:	9d05      	ldr	r5, [sp, #20]
 800778c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800778e:	e783      	b.n	8007698 <_dtoa_r+0x710>
 8007790:	9a07      	ldr	r2, [sp, #28]
 8007792:	e7ab      	b.n	80076ec <_dtoa_r+0x764>
 8007794:	2300      	movs	r3, #0
 8007796:	e7d4      	b.n	8007742 <_dtoa_r+0x7ba>
 8007798:	9b00      	ldr	r3, [sp, #0]
 800779a:	e7d2      	b.n	8007742 <_dtoa_r+0x7ba>
 800779c:	2300      	movs	r3, #0
 800779e:	9307      	str	r3, [sp, #28]
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80077a6:	6918      	ldr	r0, [r3, #16]
 80077a8:	f000 fa4d 	bl	8007c46 <__hi0bits>
 80077ac:	f1c0 0020 	rsb	r0, r0, #32
 80077b0:	4440      	add	r0, r8
 80077b2:	f010 001f 	ands.w	r0, r0, #31
 80077b6:	d047      	beq.n	8007848 <_dtoa_r+0x8c0>
 80077b8:	f1c0 0320 	rsb	r3, r0, #32
 80077bc:	2b04      	cmp	r3, #4
 80077be:	dd3b      	ble.n	8007838 <_dtoa_r+0x8b0>
 80077c0:	9b05      	ldr	r3, [sp, #20]
 80077c2:	f1c0 001c 	rsb	r0, r0, #28
 80077c6:	4403      	add	r3, r0
 80077c8:	9305      	str	r3, [sp, #20]
 80077ca:	4405      	add	r5, r0
 80077cc:	4480      	add	r8, r0
 80077ce:	9b05      	ldr	r3, [sp, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dd05      	ble.n	80077e0 <_dtoa_r+0x858>
 80077d4:	461a      	mov	r2, r3
 80077d6:	9904      	ldr	r1, [sp, #16]
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 fb6f 	bl	8007ebc <__lshift>
 80077de:	9004      	str	r0, [sp, #16]
 80077e0:	f1b8 0f00 	cmp.w	r8, #0
 80077e4:	dd05      	ble.n	80077f2 <_dtoa_r+0x86a>
 80077e6:	4639      	mov	r1, r7
 80077e8:	4642      	mov	r2, r8
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 fb66 	bl	8007ebc <__lshift>
 80077f0:	4607      	mov	r7, r0
 80077f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077f4:	b353      	cbz	r3, 800784c <_dtoa_r+0x8c4>
 80077f6:	4639      	mov	r1, r7
 80077f8:	9804      	ldr	r0, [sp, #16]
 80077fa:	f000 fbb3 	bl	8007f64 <__mcmp>
 80077fe:	2800      	cmp	r0, #0
 8007800:	da24      	bge.n	800784c <_dtoa_r+0x8c4>
 8007802:	2300      	movs	r3, #0
 8007804:	220a      	movs	r2, #10
 8007806:	9904      	ldr	r1, [sp, #16]
 8007808:	4620      	mov	r0, r4
 800780a:	f000 f9e1 	bl	8007bd0 <__multadd>
 800780e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007810:	9004      	str	r0, [sp, #16]
 8007812:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 814d 	beq.w	8007ab6 <_dtoa_r+0xb2e>
 800781c:	2300      	movs	r3, #0
 800781e:	4631      	mov	r1, r6
 8007820:	220a      	movs	r2, #10
 8007822:	4620      	mov	r0, r4
 8007824:	f000 f9d4 	bl	8007bd0 <__multadd>
 8007828:	9b02      	ldr	r3, [sp, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	4606      	mov	r6, r0
 800782e:	dc4f      	bgt.n	80078d0 <_dtoa_r+0x948>
 8007830:	9b06      	ldr	r3, [sp, #24]
 8007832:	2b02      	cmp	r3, #2
 8007834:	dd4c      	ble.n	80078d0 <_dtoa_r+0x948>
 8007836:	e011      	b.n	800785c <_dtoa_r+0x8d4>
 8007838:	d0c9      	beq.n	80077ce <_dtoa_r+0x846>
 800783a:	9a05      	ldr	r2, [sp, #20]
 800783c:	331c      	adds	r3, #28
 800783e:	441a      	add	r2, r3
 8007840:	9205      	str	r2, [sp, #20]
 8007842:	441d      	add	r5, r3
 8007844:	4498      	add	r8, r3
 8007846:	e7c2      	b.n	80077ce <_dtoa_r+0x846>
 8007848:	4603      	mov	r3, r0
 800784a:	e7f6      	b.n	800783a <_dtoa_r+0x8b2>
 800784c:	f1b9 0f00 	cmp.w	r9, #0
 8007850:	dc38      	bgt.n	80078c4 <_dtoa_r+0x93c>
 8007852:	9b06      	ldr	r3, [sp, #24]
 8007854:	2b02      	cmp	r3, #2
 8007856:	dd35      	ble.n	80078c4 <_dtoa_r+0x93c>
 8007858:	f8cd 9008 	str.w	r9, [sp, #8]
 800785c:	9b02      	ldr	r3, [sp, #8]
 800785e:	b963      	cbnz	r3, 800787a <_dtoa_r+0x8f2>
 8007860:	4639      	mov	r1, r7
 8007862:	2205      	movs	r2, #5
 8007864:	4620      	mov	r0, r4
 8007866:	f000 f9b3 	bl	8007bd0 <__multadd>
 800786a:	4601      	mov	r1, r0
 800786c:	4607      	mov	r7, r0
 800786e:	9804      	ldr	r0, [sp, #16]
 8007870:	f000 fb78 	bl	8007f64 <__mcmp>
 8007874:	2800      	cmp	r0, #0
 8007876:	f73f adcc 	bgt.w	8007412 <_dtoa_r+0x48a>
 800787a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800787c:	465d      	mov	r5, fp
 800787e:	ea6f 0a03 	mvn.w	sl, r3
 8007882:	f04f 0900 	mov.w	r9, #0
 8007886:	4639      	mov	r1, r7
 8007888:	4620      	mov	r0, r4
 800788a:	f000 f98a 	bl	8007ba2 <_Bfree>
 800788e:	2e00      	cmp	r6, #0
 8007890:	f43f aeb7 	beq.w	8007602 <_dtoa_r+0x67a>
 8007894:	f1b9 0f00 	cmp.w	r9, #0
 8007898:	d005      	beq.n	80078a6 <_dtoa_r+0x91e>
 800789a:	45b1      	cmp	r9, r6
 800789c:	d003      	beq.n	80078a6 <_dtoa_r+0x91e>
 800789e:	4649      	mov	r1, r9
 80078a0:	4620      	mov	r0, r4
 80078a2:	f000 f97e 	bl	8007ba2 <_Bfree>
 80078a6:	4631      	mov	r1, r6
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 f97a 	bl	8007ba2 <_Bfree>
 80078ae:	e6a8      	b.n	8007602 <_dtoa_r+0x67a>
 80078b0:	2700      	movs	r7, #0
 80078b2:	463e      	mov	r6, r7
 80078b4:	e7e1      	b.n	800787a <_dtoa_r+0x8f2>
 80078b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80078ba:	463e      	mov	r6, r7
 80078bc:	e5a9      	b.n	8007412 <_dtoa_r+0x48a>
 80078be:	bf00      	nop
 80078c0:	40240000 	.word	0x40240000
 80078c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 80fa 	beq.w	8007ac4 <_dtoa_r+0xb3c>
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	dd05      	ble.n	80078e0 <_dtoa_r+0x958>
 80078d4:	4631      	mov	r1, r6
 80078d6:	462a      	mov	r2, r5
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 faef 	bl	8007ebc <__lshift>
 80078de:	4606      	mov	r6, r0
 80078e0:	9b07      	ldr	r3, [sp, #28]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d04c      	beq.n	8007980 <_dtoa_r+0x9f8>
 80078e6:	6871      	ldr	r1, [r6, #4]
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 f926 	bl	8007b3a <_Balloc>
 80078ee:	6932      	ldr	r2, [r6, #16]
 80078f0:	3202      	adds	r2, #2
 80078f2:	4605      	mov	r5, r0
 80078f4:	0092      	lsls	r2, r2, #2
 80078f6:	f106 010c 	add.w	r1, r6, #12
 80078fa:	300c      	adds	r0, #12
 80078fc:	f000 f912 	bl	8007b24 <memcpy>
 8007900:	2201      	movs	r2, #1
 8007902:	4629      	mov	r1, r5
 8007904:	4620      	mov	r0, r4
 8007906:	f000 fad9 	bl	8007ebc <__lshift>
 800790a:	9b00      	ldr	r3, [sp, #0]
 800790c:	f8cd b014 	str.w	fp, [sp, #20]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	46b1      	mov	r9, r6
 8007916:	9307      	str	r3, [sp, #28]
 8007918:	4606      	mov	r6, r0
 800791a:	4639      	mov	r1, r7
 800791c:	9804      	ldr	r0, [sp, #16]
 800791e:	f7ff faa4 	bl	8006e6a <quorem>
 8007922:	4649      	mov	r1, r9
 8007924:	4605      	mov	r5, r0
 8007926:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800792a:	9804      	ldr	r0, [sp, #16]
 800792c:	f000 fb1a 	bl	8007f64 <__mcmp>
 8007930:	4632      	mov	r2, r6
 8007932:	9000      	str	r0, [sp, #0]
 8007934:	4639      	mov	r1, r7
 8007936:	4620      	mov	r0, r4
 8007938:	f000 fb2e 	bl	8007f98 <__mdiff>
 800793c:	68c3      	ldr	r3, [r0, #12]
 800793e:	4602      	mov	r2, r0
 8007940:	bb03      	cbnz	r3, 8007984 <_dtoa_r+0x9fc>
 8007942:	4601      	mov	r1, r0
 8007944:	9008      	str	r0, [sp, #32]
 8007946:	9804      	ldr	r0, [sp, #16]
 8007948:	f000 fb0c 	bl	8007f64 <__mcmp>
 800794c:	9a08      	ldr	r2, [sp, #32]
 800794e:	4603      	mov	r3, r0
 8007950:	4611      	mov	r1, r2
 8007952:	4620      	mov	r0, r4
 8007954:	9308      	str	r3, [sp, #32]
 8007956:	f000 f924 	bl	8007ba2 <_Bfree>
 800795a:	9b08      	ldr	r3, [sp, #32]
 800795c:	b9a3      	cbnz	r3, 8007988 <_dtoa_r+0xa00>
 800795e:	9a06      	ldr	r2, [sp, #24]
 8007960:	b992      	cbnz	r2, 8007988 <_dtoa_r+0xa00>
 8007962:	9a07      	ldr	r2, [sp, #28]
 8007964:	b982      	cbnz	r2, 8007988 <_dtoa_r+0xa00>
 8007966:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800796a:	d029      	beq.n	80079c0 <_dtoa_r+0xa38>
 800796c:	9b00      	ldr	r3, [sp, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	dd01      	ble.n	8007976 <_dtoa_r+0x9ee>
 8007972:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007976:	9b05      	ldr	r3, [sp, #20]
 8007978:	1c5d      	adds	r5, r3, #1
 800797a:	f883 8000 	strb.w	r8, [r3]
 800797e:	e782      	b.n	8007886 <_dtoa_r+0x8fe>
 8007980:	4630      	mov	r0, r6
 8007982:	e7c2      	b.n	800790a <_dtoa_r+0x982>
 8007984:	2301      	movs	r3, #1
 8007986:	e7e3      	b.n	8007950 <_dtoa_r+0x9c8>
 8007988:	9a00      	ldr	r2, [sp, #0]
 800798a:	2a00      	cmp	r2, #0
 800798c:	db04      	blt.n	8007998 <_dtoa_r+0xa10>
 800798e:	d125      	bne.n	80079dc <_dtoa_r+0xa54>
 8007990:	9a06      	ldr	r2, [sp, #24]
 8007992:	bb1a      	cbnz	r2, 80079dc <_dtoa_r+0xa54>
 8007994:	9a07      	ldr	r2, [sp, #28]
 8007996:	bb0a      	cbnz	r2, 80079dc <_dtoa_r+0xa54>
 8007998:	2b00      	cmp	r3, #0
 800799a:	ddec      	ble.n	8007976 <_dtoa_r+0x9ee>
 800799c:	2201      	movs	r2, #1
 800799e:	9904      	ldr	r1, [sp, #16]
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fa8b 	bl	8007ebc <__lshift>
 80079a6:	4639      	mov	r1, r7
 80079a8:	9004      	str	r0, [sp, #16]
 80079aa:	f000 fadb 	bl	8007f64 <__mcmp>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	dc03      	bgt.n	80079ba <_dtoa_r+0xa32>
 80079b2:	d1e0      	bne.n	8007976 <_dtoa_r+0x9ee>
 80079b4:	f018 0f01 	tst.w	r8, #1
 80079b8:	d0dd      	beq.n	8007976 <_dtoa_r+0x9ee>
 80079ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079be:	d1d8      	bne.n	8007972 <_dtoa_r+0x9ea>
 80079c0:	9b05      	ldr	r3, [sp, #20]
 80079c2:	9a05      	ldr	r2, [sp, #20]
 80079c4:	1c5d      	adds	r5, r3, #1
 80079c6:	2339      	movs	r3, #57	; 0x39
 80079c8:	7013      	strb	r3, [r2, #0]
 80079ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80079ce:	2b39      	cmp	r3, #57	; 0x39
 80079d0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80079d4:	d04f      	beq.n	8007a76 <_dtoa_r+0xaee>
 80079d6:	3301      	adds	r3, #1
 80079d8:	7013      	strb	r3, [r2, #0]
 80079da:	e754      	b.n	8007886 <_dtoa_r+0x8fe>
 80079dc:	9a05      	ldr	r2, [sp, #20]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	f102 0501 	add.w	r5, r2, #1
 80079e4:	dd06      	ble.n	80079f4 <_dtoa_r+0xa6c>
 80079e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80079ea:	d0e9      	beq.n	80079c0 <_dtoa_r+0xa38>
 80079ec:	f108 0801 	add.w	r8, r8, #1
 80079f0:	9b05      	ldr	r3, [sp, #20]
 80079f2:	e7c2      	b.n	800797a <_dtoa_r+0x9f2>
 80079f4:	9a02      	ldr	r2, [sp, #8]
 80079f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80079fa:	eba5 030b 	sub.w	r3, r5, fp
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d021      	beq.n	8007a46 <_dtoa_r+0xabe>
 8007a02:	2300      	movs	r3, #0
 8007a04:	220a      	movs	r2, #10
 8007a06:	9904      	ldr	r1, [sp, #16]
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f8e1 	bl	8007bd0 <__multadd>
 8007a0e:	45b1      	cmp	r9, r6
 8007a10:	9004      	str	r0, [sp, #16]
 8007a12:	f04f 0300 	mov.w	r3, #0
 8007a16:	f04f 020a 	mov.w	r2, #10
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	d105      	bne.n	8007a2c <_dtoa_r+0xaa4>
 8007a20:	f000 f8d6 	bl	8007bd0 <__multadd>
 8007a24:	4681      	mov	r9, r0
 8007a26:	4606      	mov	r6, r0
 8007a28:	9505      	str	r5, [sp, #20]
 8007a2a:	e776      	b.n	800791a <_dtoa_r+0x992>
 8007a2c:	f000 f8d0 	bl	8007bd0 <__multadd>
 8007a30:	4631      	mov	r1, r6
 8007a32:	4681      	mov	r9, r0
 8007a34:	2300      	movs	r3, #0
 8007a36:	220a      	movs	r2, #10
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f000 f8c9 	bl	8007bd0 <__multadd>
 8007a3e:	4606      	mov	r6, r0
 8007a40:	e7f2      	b.n	8007a28 <_dtoa_r+0xaa0>
 8007a42:	f04f 0900 	mov.w	r9, #0
 8007a46:	2201      	movs	r2, #1
 8007a48:	9904      	ldr	r1, [sp, #16]
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 fa36 	bl	8007ebc <__lshift>
 8007a50:	4639      	mov	r1, r7
 8007a52:	9004      	str	r0, [sp, #16]
 8007a54:	f000 fa86 	bl	8007f64 <__mcmp>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	dcb6      	bgt.n	80079ca <_dtoa_r+0xa42>
 8007a5c:	d102      	bne.n	8007a64 <_dtoa_r+0xadc>
 8007a5e:	f018 0f01 	tst.w	r8, #1
 8007a62:	d1b2      	bne.n	80079ca <_dtoa_r+0xa42>
 8007a64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a68:	2b30      	cmp	r3, #48	; 0x30
 8007a6a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007a6e:	f47f af0a 	bne.w	8007886 <_dtoa_r+0x8fe>
 8007a72:	4615      	mov	r5, r2
 8007a74:	e7f6      	b.n	8007a64 <_dtoa_r+0xadc>
 8007a76:	4593      	cmp	fp, r2
 8007a78:	d105      	bne.n	8007a86 <_dtoa_r+0xafe>
 8007a7a:	2331      	movs	r3, #49	; 0x31
 8007a7c:	f10a 0a01 	add.w	sl, sl, #1
 8007a80:	f88b 3000 	strb.w	r3, [fp]
 8007a84:	e6ff      	b.n	8007886 <_dtoa_r+0x8fe>
 8007a86:	4615      	mov	r5, r2
 8007a88:	e79f      	b.n	80079ca <_dtoa_r+0xa42>
 8007a8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007af0 <_dtoa_r+0xb68>
 8007a8e:	e007      	b.n	8007aa0 <_dtoa_r+0xb18>
 8007a90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007af4 <_dtoa_r+0xb6c>
 8007a96:	b11b      	cbz	r3, 8007aa0 <_dtoa_r+0xb18>
 8007a98:	f10b 0308 	add.w	r3, fp, #8
 8007a9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	4658      	mov	r0, fp
 8007aa2:	b017      	add	sp, #92	; 0x5c
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	9b06      	ldr	r3, [sp, #24]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	f77f ae35 	ble.w	800771a <_dtoa_r+0x792>
 8007ab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ab2:	9307      	str	r3, [sp, #28]
 8007ab4:	e649      	b.n	800774a <_dtoa_r+0x7c2>
 8007ab6:	9b02      	ldr	r3, [sp, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	dc03      	bgt.n	8007ac4 <_dtoa_r+0xb3c>
 8007abc:	9b06      	ldr	r3, [sp, #24]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	f73f aecc 	bgt.w	800785c <_dtoa_r+0x8d4>
 8007ac4:	465d      	mov	r5, fp
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	9804      	ldr	r0, [sp, #16]
 8007aca:	f7ff f9ce 	bl	8006e6a <quorem>
 8007ace:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007ad2:	f805 8b01 	strb.w	r8, [r5], #1
 8007ad6:	9a02      	ldr	r2, [sp, #8]
 8007ad8:	eba5 030b 	sub.w	r3, r5, fp
 8007adc:	429a      	cmp	r2, r3
 8007ade:	ddb0      	ble.n	8007a42 <_dtoa_r+0xaba>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	220a      	movs	r2, #10
 8007ae4:	9904      	ldr	r1, [sp, #16]
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 f872 	bl	8007bd0 <__multadd>
 8007aec:	9004      	str	r0, [sp, #16]
 8007aee:	e7ea      	b.n	8007ac6 <_dtoa_r+0xb3e>
 8007af0:	08009bd4 	.word	0x08009bd4
 8007af4:	08009bf8 	.word	0x08009bf8

08007af8 <_localeconv_r>:
 8007af8:	4b04      	ldr	r3, [pc, #16]	; (8007b0c <_localeconv_r+0x14>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6a18      	ldr	r0, [r3, #32]
 8007afe:	4b04      	ldr	r3, [pc, #16]	; (8007b10 <_localeconv_r+0x18>)
 8007b00:	2800      	cmp	r0, #0
 8007b02:	bf08      	it	eq
 8007b04:	4618      	moveq	r0, r3
 8007b06:	30f0      	adds	r0, #240	; 0xf0
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20000030 	.word	0x20000030
 8007b10:	20000094 	.word	0x20000094

08007b14 <malloc>:
 8007b14:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <malloc+0xc>)
 8007b16:	4601      	mov	r1, r0
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	f000 bb45 	b.w	80081a8 <_malloc_r>
 8007b1e:	bf00      	nop
 8007b20:	20000030 	.word	0x20000030

08007b24 <memcpy>:
 8007b24:	b510      	push	{r4, lr}
 8007b26:	1e43      	subs	r3, r0, #1
 8007b28:	440a      	add	r2, r1
 8007b2a:	4291      	cmp	r1, r2
 8007b2c:	d100      	bne.n	8007b30 <memcpy+0xc>
 8007b2e:	bd10      	pop	{r4, pc}
 8007b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b38:	e7f7      	b.n	8007b2a <memcpy+0x6>

08007b3a <_Balloc>:
 8007b3a:	b570      	push	{r4, r5, r6, lr}
 8007b3c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b3e:	4604      	mov	r4, r0
 8007b40:	460e      	mov	r6, r1
 8007b42:	b93d      	cbnz	r5, 8007b54 <_Balloc+0x1a>
 8007b44:	2010      	movs	r0, #16
 8007b46:	f7ff ffe5 	bl	8007b14 <malloc>
 8007b4a:	6260      	str	r0, [r4, #36]	; 0x24
 8007b4c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b50:	6005      	str	r5, [r0, #0]
 8007b52:	60c5      	str	r5, [r0, #12]
 8007b54:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b56:	68eb      	ldr	r3, [r5, #12]
 8007b58:	b183      	cbz	r3, 8007b7c <_Balloc+0x42>
 8007b5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b62:	b9b8      	cbnz	r0, 8007b94 <_Balloc+0x5a>
 8007b64:	2101      	movs	r1, #1
 8007b66:	fa01 f506 	lsl.w	r5, r1, r6
 8007b6a:	1d6a      	adds	r2, r5, #5
 8007b6c:	0092      	lsls	r2, r2, #2
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f000 fabe 	bl	80080f0 <_calloc_r>
 8007b74:	b160      	cbz	r0, 8007b90 <_Balloc+0x56>
 8007b76:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b7a:	e00e      	b.n	8007b9a <_Balloc+0x60>
 8007b7c:	2221      	movs	r2, #33	; 0x21
 8007b7e:	2104      	movs	r1, #4
 8007b80:	4620      	mov	r0, r4
 8007b82:	f000 fab5 	bl	80080f0 <_calloc_r>
 8007b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b88:	60e8      	str	r0, [r5, #12]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1e4      	bne.n	8007b5a <_Balloc+0x20>
 8007b90:	2000      	movs	r0, #0
 8007b92:	bd70      	pop	{r4, r5, r6, pc}
 8007b94:	6802      	ldr	r2, [r0, #0]
 8007b96:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ba0:	e7f7      	b.n	8007b92 <_Balloc+0x58>

08007ba2 <_Bfree>:
 8007ba2:	b570      	push	{r4, r5, r6, lr}
 8007ba4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	460d      	mov	r5, r1
 8007baa:	b93c      	cbnz	r4, 8007bbc <_Bfree+0x1a>
 8007bac:	2010      	movs	r0, #16
 8007bae:	f7ff ffb1 	bl	8007b14 <malloc>
 8007bb2:	6270      	str	r0, [r6, #36]	; 0x24
 8007bb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bb8:	6004      	str	r4, [r0, #0]
 8007bba:	60c4      	str	r4, [r0, #12]
 8007bbc:	b13d      	cbz	r5, 8007bce <_Bfree+0x2c>
 8007bbe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007bc0:	686a      	ldr	r2, [r5, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bc8:	6029      	str	r1, [r5, #0]
 8007bca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007bce:	bd70      	pop	{r4, r5, r6, pc}

08007bd0 <__multadd>:
 8007bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd4:	690d      	ldr	r5, [r1, #16]
 8007bd6:	461f      	mov	r7, r3
 8007bd8:	4606      	mov	r6, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	f101 0c14 	add.w	ip, r1, #20
 8007be0:	2300      	movs	r3, #0
 8007be2:	f8dc 0000 	ldr.w	r0, [ip]
 8007be6:	b281      	uxth	r1, r0
 8007be8:	fb02 7101 	mla	r1, r2, r1, r7
 8007bec:	0c0f      	lsrs	r7, r1, #16
 8007bee:	0c00      	lsrs	r0, r0, #16
 8007bf0:	fb02 7000 	mla	r0, r2, r0, r7
 8007bf4:	b289      	uxth	r1, r1
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007bfc:	429d      	cmp	r5, r3
 8007bfe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007c02:	f84c 1b04 	str.w	r1, [ip], #4
 8007c06:	dcec      	bgt.n	8007be2 <__multadd+0x12>
 8007c08:	b1d7      	cbz	r7, 8007c40 <__multadd+0x70>
 8007c0a:	68a3      	ldr	r3, [r4, #8]
 8007c0c:	42ab      	cmp	r3, r5
 8007c0e:	dc12      	bgt.n	8007c36 <__multadd+0x66>
 8007c10:	6861      	ldr	r1, [r4, #4]
 8007c12:	4630      	mov	r0, r6
 8007c14:	3101      	adds	r1, #1
 8007c16:	f7ff ff90 	bl	8007b3a <_Balloc>
 8007c1a:	6922      	ldr	r2, [r4, #16]
 8007c1c:	3202      	adds	r2, #2
 8007c1e:	f104 010c 	add.w	r1, r4, #12
 8007c22:	4680      	mov	r8, r0
 8007c24:	0092      	lsls	r2, r2, #2
 8007c26:	300c      	adds	r0, #12
 8007c28:	f7ff ff7c 	bl	8007b24 <memcpy>
 8007c2c:	4621      	mov	r1, r4
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7ff ffb7 	bl	8007ba2 <_Bfree>
 8007c34:	4644      	mov	r4, r8
 8007c36:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c3a:	3501      	adds	r5, #1
 8007c3c:	615f      	str	r7, [r3, #20]
 8007c3e:	6125      	str	r5, [r4, #16]
 8007c40:	4620      	mov	r0, r4
 8007c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c46 <__hi0bits>:
 8007c46:	0c02      	lsrs	r2, r0, #16
 8007c48:	0412      	lsls	r2, r2, #16
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	b9b2      	cbnz	r2, 8007c7c <__hi0bits+0x36>
 8007c4e:	0403      	lsls	r3, r0, #16
 8007c50:	2010      	movs	r0, #16
 8007c52:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c56:	bf04      	itt	eq
 8007c58:	021b      	lsleq	r3, r3, #8
 8007c5a:	3008      	addeq	r0, #8
 8007c5c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c60:	bf04      	itt	eq
 8007c62:	011b      	lsleq	r3, r3, #4
 8007c64:	3004      	addeq	r0, #4
 8007c66:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c6a:	bf04      	itt	eq
 8007c6c:	009b      	lsleq	r3, r3, #2
 8007c6e:	3002      	addeq	r0, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	db06      	blt.n	8007c82 <__hi0bits+0x3c>
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	d503      	bpl.n	8007c80 <__hi0bits+0x3a>
 8007c78:	3001      	adds	r0, #1
 8007c7a:	4770      	bx	lr
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	e7e8      	b.n	8007c52 <__hi0bits+0xc>
 8007c80:	2020      	movs	r0, #32
 8007c82:	4770      	bx	lr

08007c84 <__lo0bits>:
 8007c84:	6803      	ldr	r3, [r0, #0]
 8007c86:	f013 0207 	ands.w	r2, r3, #7
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	d00b      	beq.n	8007ca6 <__lo0bits+0x22>
 8007c8e:	07da      	lsls	r2, r3, #31
 8007c90:	d423      	bmi.n	8007cda <__lo0bits+0x56>
 8007c92:	0798      	lsls	r0, r3, #30
 8007c94:	bf49      	itett	mi
 8007c96:	085b      	lsrmi	r3, r3, #1
 8007c98:	089b      	lsrpl	r3, r3, #2
 8007c9a:	2001      	movmi	r0, #1
 8007c9c:	600b      	strmi	r3, [r1, #0]
 8007c9e:	bf5c      	itt	pl
 8007ca0:	600b      	strpl	r3, [r1, #0]
 8007ca2:	2002      	movpl	r0, #2
 8007ca4:	4770      	bx	lr
 8007ca6:	b298      	uxth	r0, r3
 8007ca8:	b9a8      	cbnz	r0, 8007cd6 <__lo0bits+0x52>
 8007caa:	0c1b      	lsrs	r3, r3, #16
 8007cac:	2010      	movs	r0, #16
 8007cae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007cb2:	bf04      	itt	eq
 8007cb4:	0a1b      	lsreq	r3, r3, #8
 8007cb6:	3008      	addeq	r0, #8
 8007cb8:	071a      	lsls	r2, r3, #28
 8007cba:	bf04      	itt	eq
 8007cbc:	091b      	lsreq	r3, r3, #4
 8007cbe:	3004      	addeq	r0, #4
 8007cc0:	079a      	lsls	r2, r3, #30
 8007cc2:	bf04      	itt	eq
 8007cc4:	089b      	lsreq	r3, r3, #2
 8007cc6:	3002      	addeq	r0, #2
 8007cc8:	07da      	lsls	r2, r3, #31
 8007cca:	d402      	bmi.n	8007cd2 <__lo0bits+0x4e>
 8007ccc:	085b      	lsrs	r3, r3, #1
 8007cce:	d006      	beq.n	8007cde <__lo0bits+0x5a>
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	600b      	str	r3, [r1, #0]
 8007cd4:	4770      	bx	lr
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	e7e9      	b.n	8007cae <__lo0bits+0x2a>
 8007cda:	2000      	movs	r0, #0
 8007cdc:	4770      	bx	lr
 8007cde:	2020      	movs	r0, #32
 8007ce0:	4770      	bx	lr

08007ce2 <__i2b>:
 8007ce2:	b510      	push	{r4, lr}
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	f7ff ff27 	bl	8007b3a <_Balloc>
 8007cec:	2201      	movs	r2, #1
 8007cee:	6144      	str	r4, [r0, #20]
 8007cf0:	6102      	str	r2, [r0, #16]
 8007cf2:	bd10      	pop	{r4, pc}

08007cf4 <__multiply>:
 8007cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	690a      	ldr	r2, [r1, #16]
 8007cfc:	6923      	ldr	r3, [r4, #16]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	bfb8      	it	lt
 8007d02:	460b      	movlt	r3, r1
 8007d04:	4688      	mov	r8, r1
 8007d06:	bfbc      	itt	lt
 8007d08:	46a0      	movlt	r8, r4
 8007d0a:	461c      	movlt	r4, r3
 8007d0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d10:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007d14:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d1c:	eb07 0609 	add.w	r6, r7, r9
 8007d20:	42b3      	cmp	r3, r6
 8007d22:	bfb8      	it	lt
 8007d24:	3101      	addlt	r1, #1
 8007d26:	f7ff ff08 	bl	8007b3a <_Balloc>
 8007d2a:	f100 0514 	add.w	r5, r0, #20
 8007d2e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007d32:	462b      	mov	r3, r5
 8007d34:	2200      	movs	r2, #0
 8007d36:	4573      	cmp	r3, lr
 8007d38:	d316      	bcc.n	8007d68 <__multiply+0x74>
 8007d3a:	f104 0214 	add.w	r2, r4, #20
 8007d3e:	f108 0114 	add.w	r1, r8, #20
 8007d42:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007d46:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	9b00      	ldr	r3, [sp, #0]
 8007d4e:	9201      	str	r2, [sp, #4]
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d80c      	bhi.n	8007d6e <__multiply+0x7a>
 8007d54:	2e00      	cmp	r6, #0
 8007d56:	dd03      	ble.n	8007d60 <__multiply+0x6c>
 8007d58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d05d      	beq.n	8007e1c <__multiply+0x128>
 8007d60:	6106      	str	r6, [r0, #16]
 8007d62:	b003      	add	sp, #12
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d68:	f843 2b04 	str.w	r2, [r3], #4
 8007d6c:	e7e3      	b.n	8007d36 <__multiply+0x42>
 8007d6e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007d72:	f1bb 0f00 	cmp.w	fp, #0
 8007d76:	d023      	beq.n	8007dc0 <__multiply+0xcc>
 8007d78:	4689      	mov	r9, r1
 8007d7a:	46ac      	mov	ip, r5
 8007d7c:	f04f 0800 	mov.w	r8, #0
 8007d80:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d84:	f8dc a000 	ldr.w	sl, [ip]
 8007d88:	b2a3      	uxth	r3, r4
 8007d8a:	fa1f fa8a 	uxth.w	sl, sl
 8007d8e:	fb0b a303 	mla	r3, fp, r3, sl
 8007d92:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007d96:	f8dc 4000 	ldr.w	r4, [ip]
 8007d9a:	4443      	add	r3, r8
 8007d9c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007da0:	fb0b 840a 	mla	r4, fp, sl, r8
 8007da4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007da8:	46e2      	mov	sl, ip
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007db0:	454f      	cmp	r7, r9
 8007db2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007db6:	f84a 3b04 	str.w	r3, [sl], #4
 8007dba:	d82b      	bhi.n	8007e14 <__multiply+0x120>
 8007dbc:	f8cc 8004 	str.w	r8, [ip, #4]
 8007dc0:	9b01      	ldr	r3, [sp, #4]
 8007dc2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007dc6:	3204      	adds	r2, #4
 8007dc8:	f1ba 0f00 	cmp.w	sl, #0
 8007dcc:	d020      	beq.n	8007e10 <__multiply+0x11c>
 8007dce:	682b      	ldr	r3, [r5, #0]
 8007dd0:	4689      	mov	r9, r1
 8007dd2:	46a8      	mov	r8, r5
 8007dd4:	f04f 0b00 	mov.w	fp, #0
 8007dd8:	f8b9 c000 	ldrh.w	ip, [r9]
 8007ddc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007de0:	fb0a 440c 	mla	r4, sl, ip, r4
 8007de4:	445c      	add	r4, fp
 8007de6:	46c4      	mov	ip, r8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007dee:	f84c 3b04 	str.w	r3, [ip], #4
 8007df2:	f859 3b04 	ldr.w	r3, [r9], #4
 8007df6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007dfa:	0c1b      	lsrs	r3, r3, #16
 8007dfc:	fb0a b303 	mla	r3, sl, r3, fp
 8007e00:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007e04:	454f      	cmp	r7, r9
 8007e06:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007e0a:	d805      	bhi.n	8007e18 <__multiply+0x124>
 8007e0c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007e10:	3504      	adds	r5, #4
 8007e12:	e79b      	b.n	8007d4c <__multiply+0x58>
 8007e14:	46d4      	mov	ip, sl
 8007e16:	e7b3      	b.n	8007d80 <__multiply+0x8c>
 8007e18:	46e0      	mov	r8, ip
 8007e1a:	e7dd      	b.n	8007dd8 <__multiply+0xe4>
 8007e1c:	3e01      	subs	r6, #1
 8007e1e:	e799      	b.n	8007d54 <__multiply+0x60>

08007e20 <__pow5mult>:
 8007e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e24:	4615      	mov	r5, r2
 8007e26:	f012 0203 	ands.w	r2, r2, #3
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460f      	mov	r7, r1
 8007e2e:	d007      	beq.n	8007e40 <__pow5mult+0x20>
 8007e30:	3a01      	subs	r2, #1
 8007e32:	4c21      	ldr	r4, [pc, #132]	; (8007eb8 <__pow5mult+0x98>)
 8007e34:	2300      	movs	r3, #0
 8007e36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e3a:	f7ff fec9 	bl	8007bd0 <__multadd>
 8007e3e:	4607      	mov	r7, r0
 8007e40:	10ad      	asrs	r5, r5, #2
 8007e42:	d035      	beq.n	8007eb0 <__pow5mult+0x90>
 8007e44:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e46:	b93c      	cbnz	r4, 8007e58 <__pow5mult+0x38>
 8007e48:	2010      	movs	r0, #16
 8007e4a:	f7ff fe63 	bl	8007b14 <malloc>
 8007e4e:	6270      	str	r0, [r6, #36]	; 0x24
 8007e50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e54:	6004      	str	r4, [r0, #0]
 8007e56:	60c4      	str	r4, [r0, #12]
 8007e58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e60:	b94c      	cbnz	r4, 8007e76 <__pow5mult+0x56>
 8007e62:	f240 2171 	movw	r1, #625	; 0x271
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7ff ff3b 	bl	8007ce2 <__i2b>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e72:	4604      	mov	r4, r0
 8007e74:	6003      	str	r3, [r0, #0]
 8007e76:	f04f 0800 	mov.w	r8, #0
 8007e7a:	07eb      	lsls	r3, r5, #31
 8007e7c:	d50a      	bpl.n	8007e94 <__pow5mult+0x74>
 8007e7e:	4639      	mov	r1, r7
 8007e80:	4622      	mov	r2, r4
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7ff ff36 	bl	8007cf4 <__multiply>
 8007e88:	4639      	mov	r1, r7
 8007e8a:	4681      	mov	r9, r0
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f7ff fe88 	bl	8007ba2 <_Bfree>
 8007e92:	464f      	mov	r7, r9
 8007e94:	106d      	asrs	r5, r5, #1
 8007e96:	d00b      	beq.n	8007eb0 <__pow5mult+0x90>
 8007e98:	6820      	ldr	r0, [r4, #0]
 8007e9a:	b938      	cbnz	r0, 8007eac <__pow5mult+0x8c>
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f7ff ff27 	bl	8007cf4 <__multiply>
 8007ea6:	6020      	str	r0, [r4, #0]
 8007ea8:	f8c0 8000 	str.w	r8, [r0]
 8007eac:	4604      	mov	r4, r0
 8007eae:	e7e4      	b.n	8007e7a <__pow5mult+0x5a>
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb6:	bf00      	nop
 8007eb8:	08009cf8 	.word	0x08009cf8

08007ebc <__lshift>:
 8007ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ec6:	6923      	ldr	r3, [r4, #16]
 8007ec8:	6849      	ldr	r1, [r1, #4]
 8007eca:	eb0a 0903 	add.w	r9, sl, r3
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	4616      	mov	r6, r2
 8007ed4:	f109 0501 	add.w	r5, r9, #1
 8007ed8:	42ab      	cmp	r3, r5
 8007eda:	db32      	blt.n	8007f42 <__lshift+0x86>
 8007edc:	4638      	mov	r0, r7
 8007ede:	f7ff fe2c 	bl	8007b3a <_Balloc>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	4680      	mov	r8, r0
 8007ee6:	f100 0114 	add.w	r1, r0, #20
 8007eea:	461a      	mov	r2, r3
 8007eec:	4553      	cmp	r3, sl
 8007eee:	db2b      	blt.n	8007f48 <__lshift+0x8c>
 8007ef0:	6920      	ldr	r0, [r4, #16]
 8007ef2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ef6:	f104 0314 	add.w	r3, r4, #20
 8007efa:	f016 021f 	ands.w	r2, r6, #31
 8007efe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f02:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f06:	d025      	beq.n	8007f54 <__lshift+0x98>
 8007f08:	f1c2 0e20 	rsb	lr, r2, #32
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	681e      	ldr	r6, [r3, #0]
 8007f10:	468a      	mov	sl, r1
 8007f12:	4096      	lsls	r6, r2
 8007f14:	4330      	orrs	r0, r6
 8007f16:	f84a 0b04 	str.w	r0, [sl], #4
 8007f1a:	f853 0b04 	ldr.w	r0, [r3], #4
 8007f1e:	459c      	cmp	ip, r3
 8007f20:	fa20 f00e 	lsr.w	r0, r0, lr
 8007f24:	d814      	bhi.n	8007f50 <__lshift+0x94>
 8007f26:	6048      	str	r0, [r1, #4]
 8007f28:	b108      	cbz	r0, 8007f2e <__lshift+0x72>
 8007f2a:	f109 0502 	add.w	r5, r9, #2
 8007f2e:	3d01      	subs	r5, #1
 8007f30:	4638      	mov	r0, r7
 8007f32:	f8c8 5010 	str.w	r5, [r8, #16]
 8007f36:	4621      	mov	r1, r4
 8007f38:	f7ff fe33 	bl	8007ba2 <_Bfree>
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f42:	3101      	adds	r1, #1
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	e7c7      	b.n	8007ed8 <__lshift+0x1c>
 8007f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	e7cd      	b.n	8007eec <__lshift+0x30>
 8007f50:	4651      	mov	r1, sl
 8007f52:	e7dc      	b.n	8007f0e <__lshift+0x52>
 8007f54:	3904      	subs	r1, #4
 8007f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f5a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f5e:	459c      	cmp	ip, r3
 8007f60:	d8f9      	bhi.n	8007f56 <__lshift+0x9a>
 8007f62:	e7e4      	b.n	8007f2e <__lshift+0x72>

08007f64 <__mcmp>:
 8007f64:	6903      	ldr	r3, [r0, #16]
 8007f66:	690a      	ldr	r2, [r1, #16]
 8007f68:	1a9b      	subs	r3, r3, r2
 8007f6a:	b530      	push	{r4, r5, lr}
 8007f6c:	d10c      	bne.n	8007f88 <__mcmp+0x24>
 8007f6e:	0092      	lsls	r2, r2, #2
 8007f70:	3014      	adds	r0, #20
 8007f72:	3114      	adds	r1, #20
 8007f74:	1884      	adds	r4, r0, r2
 8007f76:	4411      	add	r1, r2
 8007f78:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f7c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f80:	4295      	cmp	r5, r2
 8007f82:	d003      	beq.n	8007f8c <__mcmp+0x28>
 8007f84:	d305      	bcc.n	8007f92 <__mcmp+0x2e>
 8007f86:	2301      	movs	r3, #1
 8007f88:	4618      	mov	r0, r3
 8007f8a:	bd30      	pop	{r4, r5, pc}
 8007f8c:	42a0      	cmp	r0, r4
 8007f8e:	d3f3      	bcc.n	8007f78 <__mcmp+0x14>
 8007f90:	e7fa      	b.n	8007f88 <__mcmp+0x24>
 8007f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f96:	e7f7      	b.n	8007f88 <__mcmp+0x24>

08007f98 <__mdiff>:
 8007f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f9c:	460d      	mov	r5, r1
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	4614      	mov	r4, r2
 8007fa6:	f7ff ffdd 	bl	8007f64 <__mcmp>
 8007faa:	1e06      	subs	r6, r0, #0
 8007fac:	d108      	bne.n	8007fc0 <__mdiff+0x28>
 8007fae:	4631      	mov	r1, r6
 8007fb0:	4638      	mov	r0, r7
 8007fb2:	f7ff fdc2 	bl	8007b3a <_Balloc>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc0:	bfa4      	itt	ge
 8007fc2:	4623      	movge	r3, r4
 8007fc4:	462c      	movge	r4, r5
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	6861      	ldr	r1, [r4, #4]
 8007fca:	bfa6      	itte	ge
 8007fcc:	461d      	movge	r5, r3
 8007fce:	2600      	movge	r6, #0
 8007fd0:	2601      	movlt	r6, #1
 8007fd2:	f7ff fdb2 	bl	8007b3a <_Balloc>
 8007fd6:	692b      	ldr	r3, [r5, #16]
 8007fd8:	60c6      	str	r6, [r0, #12]
 8007fda:	6926      	ldr	r6, [r4, #16]
 8007fdc:	f105 0914 	add.w	r9, r5, #20
 8007fe0:	f104 0214 	add.w	r2, r4, #20
 8007fe4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007fe8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007fec:	f100 0514 	add.w	r5, r0, #20
 8007ff0:	f04f 0e00 	mov.w	lr, #0
 8007ff4:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ff8:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ffc:	fa1e f18a 	uxtah	r1, lr, sl
 8008000:	b2a3      	uxth	r3, r4
 8008002:	1ac9      	subs	r1, r1, r3
 8008004:	0c23      	lsrs	r3, r4, #16
 8008006:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800800a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800800e:	b289      	uxth	r1, r1
 8008010:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008014:	45c8      	cmp	r8, r9
 8008016:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800801a:	4694      	mov	ip, r2
 800801c:	f845 3b04 	str.w	r3, [r5], #4
 8008020:	d8e8      	bhi.n	8007ff4 <__mdiff+0x5c>
 8008022:	45bc      	cmp	ip, r7
 8008024:	d304      	bcc.n	8008030 <__mdiff+0x98>
 8008026:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800802a:	b183      	cbz	r3, 800804e <__mdiff+0xb6>
 800802c:	6106      	str	r6, [r0, #16]
 800802e:	e7c5      	b.n	8007fbc <__mdiff+0x24>
 8008030:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008034:	fa1e f381 	uxtah	r3, lr, r1
 8008038:	141a      	asrs	r2, r3, #16
 800803a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800803e:	b29b      	uxth	r3, r3
 8008040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008044:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008048:	f845 3b04 	str.w	r3, [r5], #4
 800804c:	e7e9      	b.n	8008022 <__mdiff+0x8a>
 800804e:	3e01      	subs	r6, #1
 8008050:	e7e9      	b.n	8008026 <__mdiff+0x8e>

08008052 <__d2b>:
 8008052:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008056:	460e      	mov	r6, r1
 8008058:	2101      	movs	r1, #1
 800805a:	ec59 8b10 	vmov	r8, r9, d0
 800805e:	4615      	mov	r5, r2
 8008060:	f7ff fd6b 	bl	8007b3a <_Balloc>
 8008064:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008068:	4607      	mov	r7, r0
 800806a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800806e:	bb34      	cbnz	r4, 80080be <__d2b+0x6c>
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	f1b8 0300 	subs.w	r3, r8, #0
 8008076:	d027      	beq.n	80080c8 <__d2b+0x76>
 8008078:	a802      	add	r0, sp, #8
 800807a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800807e:	f7ff fe01 	bl	8007c84 <__lo0bits>
 8008082:	9900      	ldr	r1, [sp, #0]
 8008084:	b1f0      	cbz	r0, 80080c4 <__d2b+0x72>
 8008086:	9a01      	ldr	r2, [sp, #4]
 8008088:	f1c0 0320 	rsb	r3, r0, #32
 800808c:	fa02 f303 	lsl.w	r3, r2, r3
 8008090:	430b      	orrs	r3, r1
 8008092:	40c2      	lsrs	r2, r0
 8008094:	617b      	str	r3, [r7, #20]
 8008096:	9201      	str	r2, [sp, #4]
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	61bb      	str	r3, [r7, #24]
 800809c:	2b00      	cmp	r3, #0
 800809e:	bf14      	ite	ne
 80080a0:	2102      	movne	r1, #2
 80080a2:	2101      	moveq	r1, #1
 80080a4:	6139      	str	r1, [r7, #16]
 80080a6:	b1c4      	cbz	r4, 80080da <__d2b+0x88>
 80080a8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80080ac:	4404      	add	r4, r0
 80080ae:	6034      	str	r4, [r6, #0]
 80080b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080b4:	6028      	str	r0, [r5, #0]
 80080b6:	4638      	mov	r0, r7
 80080b8:	b003      	add	sp, #12
 80080ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080c2:	e7d5      	b.n	8008070 <__d2b+0x1e>
 80080c4:	6179      	str	r1, [r7, #20]
 80080c6:	e7e7      	b.n	8008098 <__d2b+0x46>
 80080c8:	a801      	add	r0, sp, #4
 80080ca:	f7ff fddb 	bl	8007c84 <__lo0bits>
 80080ce:	9b01      	ldr	r3, [sp, #4]
 80080d0:	617b      	str	r3, [r7, #20]
 80080d2:	2101      	movs	r1, #1
 80080d4:	6139      	str	r1, [r7, #16]
 80080d6:	3020      	adds	r0, #32
 80080d8:	e7e5      	b.n	80080a6 <__d2b+0x54>
 80080da:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80080de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080e2:	6030      	str	r0, [r6, #0]
 80080e4:	6918      	ldr	r0, [r3, #16]
 80080e6:	f7ff fdae 	bl	8007c46 <__hi0bits>
 80080ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80080ee:	e7e1      	b.n	80080b4 <__d2b+0x62>

080080f0 <_calloc_r>:
 80080f0:	b538      	push	{r3, r4, r5, lr}
 80080f2:	fb02 f401 	mul.w	r4, r2, r1
 80080f6:	4621      	mov	r1, r4
 80080f8:	f000 f856 	bl	80081a8 <_malloc_r>
 80080fc:	4605      	mov	r5, r0
 80080fe:	b118      	cbz	r0, 8008108 <_calloc_r+0x18>
 8008100:	4622      	mov	r2, r4
 8008102:	2100      	movs	r1, #0
 8008104:	f7fe fa1e 	bl	8006544 <memset>
 8008108:	4628      	mov	r0, r5
 800810a:	bd38      	pop	{r3, r4, r5, pc}

0800810c <_free_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4605      	mov	r5, r0
 8008110:	2900      	cmp	r1, #0
 8008112:	d045      	beq.n	80081a0 <_free_r+0x94>
 8008114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008118:	1f0c      	subs	r4, r1, #4
 800811a:	2b00      	cmp	r3, #0
 800811c:	bfb8      	it	lt
 800811e:	18e4      	addlt	r4, r4, r3
 8008120:	f000 fa29 	bl	8008576 <__malloc_lock>
 8008124:	4a1f      	ldr	r2, [pc, #124]	; (80081a4 <_free_r+0x98>)
 8008126:	6813      	ldr	r3, [r2, #0]
 8008128:	4610      	mov	r0, r2
 800812a:	b933      	cbnz	r3, 800813a <_free_r+0x2e>
 800812c:	6063      	str	r3, [r4, #4]
 800812e:	6014      	str	r4, [r2, #0]
 8008130:	4628      	mov	r0, r5
 8008132:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008136:	f000 ba1f 	b.w	8008578 <__malloc_unlock>
 800813a:	42a3      	cmp	r3, r4
 800813c:	d90c      	bls.n	8008158 <_free_r+0x4c>
 800813e:	6821      	ldr	r1, [r4, #0]
 8008140:	1862      	adds	r2, r4, r1
 8008142:	4293      	cmp	r3, r2
 8008144:	bf04      	itt	eq
 8008146:	681a      	ldreq	r2, [r3, #0]
 8008148:	685b      	ldreq	r3, [r3, #4]
 800814a:	6063      	str	r3, [r4, #4]
 800814c:	bf04      	itt	eq
 800814e:	1852      	addeq	r2, r2, r1
 8008150:	6022      	streq	r2, [r4, #0]
 8008152:	6004      	str	r4, [r0, #0]
 8008154:	e7ec      	b.n	8008130 <_free_r+0x24>
 8008156:	4613      	mov	r3, r2
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	b10a      	cbz	r2, 8008160 <_free_r+0x54>
 800815c:	42a2      	cmp	r2, r4
 800815e:	d9fa      	bls.n	8008156 <_free_r+0x4a>
 8008160:	6819      	ldr	r1, [r3, #0]
 8008162:	1858      	adds	r0, r3, r1
 8008164:	42a0      	cmp	r0, r4
 8008166:	d10b      	bne.n	8008180 <_free_r+0x74>
 8008168:	6820      	ldr	r0, [r4, #0]
 800816a:	4401      	add	r1, r0
 800816c:	1858      	adds	r0, r3, r1
 800816e:	4282      	cmp	r2, r0
 8008170:	6019      	str	r1, [r3, #0]
 8008172:	d1dd      	bne.n	8008130 <_free_r+0x24>
 8008174:	6810      	ldr	r0, [r2, #0]
 8008176:	6852      	ldr	r2, [r2, #4]
 8008178:	605a      	str	r2, [r3, #4]
 800817a:	4401      	add	r1, r0
 800817c:	6019      	str	r1, [r3, #0]
 800817e:	e7d7      	b.n	8008130 <_free_r+0x24>
 8008180:	d902      	bls.n	8008188 <_free_r+0x7c>
 8008182:	230c      	movs	r3, #12
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	e7d3      	b.n	8008130 <_free_r+0x24>
 8008188:	6820      	ldr	r0, [r4, #0]
 800818a:	1821      	adds	r1, r4, r0
 800818c:	428a      	cmp	r2, r1
 800818e:	bf04      	itt	eq
 8008190:	6811      	ldreq	r1, [r2, #0]
 8008192:	6852      	ldreq	r2, [r2, #4]
 8008194:	6062      	str	r2, [r4, #4]
 8008196:	bf04      	itt	eq
 8008198:	1809      	addeq	r1, r1, r0
 800819a:	6021      	streq	r1, [r4, #0]
 800819c:	605c      	str	r4, [r3, #4]
 800819e:	e7c7      	b.n	8008130 <_free_r+0x24>
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
 80081a2:	bf00      	nop
 80081a4:	20000230 	.word	0x20000230

080081a8 <_malloc_r>:
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	1ccd      	adds	r5, r1, #3
 80081ac:	f025 0503 	bic.w	r5, r5, #3
 80081b0:	3508      	adds	r5, #8
 80081b2:	2d0c      	cmp	r5, #12
 80081b4:	bf38      	it	cc
 80081b6:	250c      	movcc	r5, #12
 80081b8:	2d00      	cmp	r5, #0
 80081ba:	4606      	mov	r6, r0
 80081bc:	db01      	blt.n	80081c2 <_malloc_r+0x1a>
 80081be:	42a9      	cmp	r1, r5
 80081c0:	d903      	bls.n	80081ca <_malloc_r+0x22>
 80081c2:	230c      	movs	r3, #12
 80081c4:	6033      	str	r3, [r6, #0]
 80081c6:	2000      	movs	r0, #0
 80081c8:	bd70      	pop	{r4, r5, r6, pc}
 80081ca:	f000 f9d4 	bl	8008576 <__malloc_lock>
 80081ce:	4a21      	ldr	r2, [pc, #132]	; (8008254 <_malloc_r+0xac>)
 80081d0:	6814      	ldr	r4, [r2, #0]
 80081d2:	4621      	mov	r1, r4
 80081d4:	b991      	cbnz	r1, 80081fc <_malloc_r+0x54>
 80081d6:	4c20      	ldr	r4, [pc, #128]	; (8008258 <_malloc_r+0xb0>)
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	b91b      	cbnz	r3, 80081e4 <_malloc_r+0x3c>
 80081dc:	4630      	mov	r0, r6
 80081de:	f000 f98f 	bl	8008500 <_sbrk_r>
 80081e2:	6020      	str	r0, [r4, #0]
 80081e4:	4629      	mov	r1, r5
 80081e6:	4630      	mov	r0, r6
 80081e8:	f000 f98a 	bl	8008500 <_sbrk_r>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d124      	bne.n	800823a <_malloc_r+0x92>
 80081f0:	230c      	movs	r3, #12
 80081f2:	6033      	str	r3, [r6, #0]
 80081f4:	4630      	mov	r0, r6
 80081f6:	f000 f9bf 	bl	8008578 <__malloc_unlock>
 80081fa:	e7e4      	b.n	80081c6 <_malloc_r+0x1e>
 80081fc:	680b      	ldr	r3, [r1, #0]
 80081fe:	1b5b      	subs	r3, r3, r5
 8008200:	d418      	bmi.n	8008234 <_malloc_r+0x8c>
 8008202:	2b0b      	cmp	r3, #11
 8008204:	d90f      	bls.n	8008226 <_malloc_r+0x7e>
 8008206:	600b      	str	r3, [r1, #0]
 8008208:	50cd      	str	r5, [r1, r3]
 800820a:	18cc      	adds	r4, r1, r3
 800820c:	4630      	mov	r0, r6
 800820e:	f000 f9b3 	bl	8008578 <__malloc_unlock>
 8008212:	f104 000b 	add.w	r0, r4, #11
 8008216:	1d23      	adds	r3, r4, #4
 8008218:	f020 0007 	bic.w	r0, r0, #7
 800821c:	1ac3      	subs	r3, r0, r3
 800821e:	d0d3      	beq.n	80081c8 <_malloc_r+0x20>
 8008220:	425a      	negs	r2, r3
 8008222:	50e2      	str	r2, [r4, r3]
 8008224:	e7d0      	b.n	80081c8 <_malloc_r+0x20>
 8008226:	428c      	cmp	r4, r1
 8008228:	684b      	ldr	r3, [r1, #4]
 800822a:	bf16      	itet	ne
 800822c:	6063      	strne	r3, [r4, #4]
 800822e:	6013      	streq	r3, [r2, #0]
 8008230:	460c      	movne	r4, r1
 8008232:	e7eb      	b.n	800820c <_malloc_r+0x64>
 8008234:	460c      	mov	r4, r1
 8008236:	6849      	ldr	r1, [r1, #4]
 8008238:	e7cc      	b.n	80081d4 <_malloc_r+0x2c>
 800823a:	1cc4      	adds	r4, r0, #3
 800823c:	f024 0403 	bic.w	r4, r4, #3
 8008240:	42a0      	cmp	r0, r4
 8008242:	d005      	beq.n	8008250 <_malloc_r+0xa8>
 8008244:	1a21      	subs	r1, r4, r0
 8008246:	4630      	mov	r0, r6
 8008248:	f000 f95a 	bl	8008500 <_sbrk_r>
 800824c:	3001      	adds	r0, #1
 800824e:	d0cf      	beq.n	80081f0 <_malloc_r+0x48>
 8008250:	6025      	str	r5, [r4, #0]
 8008252:	e7db      	b.n	800820c <_malloc_r+0x64>
 8008254:	20000230 	.word	0x20000230
 8008258:	20000234 	.word	0x20000234

0800825c <__ssputs_r>:
 800825c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	688e      	ldr	r6, [r1, #8]
 8008262:	429e      	cmp	r6, r3
 8008264:	4682      	mov	sl, r0
 8008266:	460c      	mov	r4, r1
 8008268:	4690      	mov	r8, r2
 800826a:	4699      	mov	r9, r3
 800826c:	d837      	bhi.n	80082de <__ssputs_r+0x82>
 800826e:	898a      	ldrh	r2, [r1, #12]
 8008270:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008274:	d031      	beq.n	80082da <__ssputs_r+0x7e>
 8008276:	6825      	ldr	r5, [r4, #0]
 8008278:	6909      	ldr	r1, [r1, #16]
 800827a:	1a6f      	subs	r7, r5, r1
 800827c:	6965      	ldr	r5, [r4, #20]
 800827e:	2302      	movs	r3, #2
 8008280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008284:	fb95 f5f3 	sdiv	r5, r5, r3
 8008288:	f109 0301 	add.w	r3, r9, #1
 800828c:	443b      	add	r3, r7
 800828e:	429d      	cmp	r5, r3
 8008290:	bf38      	it	cc
 8008292:	461d      	movcc	r5, r3
 8008294:	0553      	lsls	r3, r2, #21
 8008296:	d530      	bpl.n	80082fa <__ssputs_r+0x9e>
 8008298:	4629      	mov	r1, r5
 800829a:	f7ff ff85 	bl	80081a8 <_malloc_r>
 800829e:	4606      	mov	r6, r0
 80082a0:	b950      	cbnz	r0, 80082b8 <__ssputs_r+0x5c>
 80082a2:	230c      	movs	r3, #12
 80082a4:	f8ca 3000 	str.w	r3, [sl]
 80082a8:	89a3      	ldrh	r3, [r4, #12]
 80082aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ae:	81a3      	strh	r3, [r4, #12]
 80082b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b8:	463a      	mov	r2, r7
 80082ba:	6921      	ldr	r1, [r4, #16]
 80082bc:	f7ff fc32 	bl	8007b24 <memcpy>
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ca:	81a3      	strh	r3, [r4, #12]
 80082cc:	6126      	str	r6, [r4, #16]
 80082ce:	6165      	str	r5, [r4, #20]
 80082d0:	443e      	add	r6, r7
 80082d2:	1bed      	subs	r5, r5, r7
 80082d4:	6026      	str	r6, [r4, #0]
 80082d6:	60a5      	str	r5, [r4, #8]
 80082d8:	464e      	mov	r6, r9
 80082da:	454e      	cmp	r6, r9
 80082dc:	d900      	bls.n	80082e0 <__ssputs_r+0x84>
 80082de:	464e      	mov	r6, r9
 80082e0:	4632      	mov	r2, r6
 80082e2:	4641      	mov	r1, r8
 80082e4:	6820      	ldr	r0, [r4, #0]
 80082e6:	f000 f92d 	bl	8008544 <memmove>
 80082ea:	68a3      	ldr	r3, [r4, #8]
 80082ec:	1b9b      	subs	r3, r3, r6
 80082ee:	60a3      	str	r3, [r4, #8]
 80082f0:	6823      	ldr	r3, [r4, #0]
 80082f2:	441e      	add	r6, r3
 80082f4:	6026      	str	r6, [r4, #0]
 80082f6:	2000      	movs	r0, #0
 80082f8:	e7dc      	b.n	80082b4 <__ssputs_r+0x58>
 80082fa:	462a      	mov	r2, r5
 80082fc:	f000 f93d 	bl	800857a <_realloc_r>
 8008300:	4606      	mov	r6, r0
 8008302:	2800      	cmp	r0, #0
 8008304:	d1e2      	bne.n	80082cc <__ssputs_r+0x70>
 8008306:	6921      	ldr	r1, [r4, #16]
 8008308:	4650      	mov	r0, sl
 800830a:	f7ff feff 	bl	800810c <_free_r>
 800830e:	e7c8      	b.n	80082a2 <__ssputs_r+0x46>

08008310 <_svfiprintf_r>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	461d      	mov	r5, r3
 8008316:	898b      	ldrh	r3, [r1, #12]
 8008318:	061f      	lsls	r7, r3, #24
 800831a:	b09d      	sub	sp, #116	; 0x74
 800831c:	4680      	mov	r8, r0
 800831e:	460c      	mov	r4, r1
 8008320:	4616      	mov	r6, r2
 8008322:	d50f      	bpl.n	8008344 <_svfiprintf_r+0x34>
 8008324:	690b      	ldr	r3, [r1, #16]
 8008326:	b96b      	cbnz	r3, 8008344 <_svfiprintf_r+0x34>
 8008328:	2140      	movs	r1, #64	; 0x40
 800832a:	f7ff ff3d 	bl	80081a8 <_malloc_r>
 800832e:	6020      	str	r0, [r4, #0]
 8008330:	6120      	str	r0, [r4, #16]
 8008332:	b928      	cbnz	r0, 8008340 <_svfiprintf_r+0x30>
 8008334:	230c      	movs	r3, #12
 8008336:	f8c8 3000 	str.w	r3, [r8]
 800833a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800833e:	e0c8      	b.n	80084d2 <_svfiprintf_r+0x1c2>
 8008340:	2340      	movs	r3, #64	; 0x40
 8008342:	6163      	str	r3, [r4, #20]
 8008344:	2300      	movs	r3, #0
 8008346:	9309      	str	r3, [sp, #36]	; 0x24
 8008348:	2320      	movs	r3, #32
 800834a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800834e:	2330      	movs	r3, #48	; 0x30
 8008350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008354:	9503      	str	r5, [sp, #12]
 8008356:	f04f 0b01 	mov.w	fp, #1
 800835a:	4637      	mov	r7, r6
 800835c:	463d      	mov	r5, r7
 800835e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008362:	b10b      	cbz	r3, 8008368 <_svfiprintf_r+0x58>
 8008364:	2b25      	cmp	r3, #37	; 0x25
 8008366:	d13e      	bne.n	80083e6 <_svfiprintf_r+0xd6>
 8008368:	ebb7 0a06 	subs.w	sl, r7, r6
 800836c:	d00b      	beq.n	8008386 <_svfiprintf_r+0x76>
 800836e:	4653      	mov	r3, sl
 8008370:	4632      	mov	r2, r6
 8008372:	4621      	mov	r1, r4
 8008374:	4640      	mov	r0, r8
 8008376:	f7ff ff71 	bl	800825c <__ssputs_r>
 800837a:	3001      	adds	r0, #1
 800837c:	f000 80a4 	beq.w	80084c8 <_svfiprintf_r+0x1b8>
 8008380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008382:	4453      	add	r3, sl
 8008384:	9309      	str	r3, [sp, #36]	; 0x24
 8008386:	783b      	ldrb	r3, [r7, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 809d 	beq.w	80084c8 <_svfiprintf_r+0x1b8>
 800838e:	2300      	movs	r3, #0
 8008390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008398:	9304      	str	r3, [sp, #16]
 800839a:	9307      	str	r3, [sp, #28]
 800839c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083a0:	931a      	str	r3, [sp, #104]	; 0x68
 80083a2:	462f      	mov	r7, r5
 80083a4:	2205      	movs	r2, #5
 80083a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80083aa:	4850      	ldr	r0, [pc, #320]	; (80084ec <_svfiprintf_r+0x1dc>)
 80083ac:	f7f7 ff38 	bl	8000220 <memchr>
 80083b0:	9b04      	ldr	r3, [sp, #16]
 80083b2:	b9d0      	cbnz	r0, 80083ea <_svfiprintf_r+0xda>
 80083b4:	06d9      	lsls	r1, r3, #27
 80083b6:	bf44      	itt	mi
 80083b8:	2220      	movmi	r2, #32
 80083ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083be:	071a      	lsls	r2, r3, #28
 80083c0:	bf44      	itt	mi
 80083c2:	222b      	movmi	r2, #43	; 0x2b
 80083c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083c8:	782a      	ldrb	r2, [r5, #0]
 80083ca:	2a2a      	cmp	r2, #42	; 0x2a
 80083cc:	d015      	beq.n	80083fa <_svfiprintf_r+0xea>
 80083ce:	9a07      	ldr	r2, [sp, #28]
 80083d0:	462f      	mov	r7, r5
 80083d2:	2000      	movs	r0, #0
 80083d4:	250a      	movs	r5, #10
 80083d6:	4639      	mov	r1, r7
 80083d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083dc:	3b30      	subs	r3, #48	; 0x30
 80083de:	2b09      	cmp	r3, #9
 80083e0:	d94d      	bls.n	800847e <_svfiprintf_r+0x16e>
 80083e2:	b1b8      	cbz	r0, 8008414 <_svfiprintf_r+0x104>
 80083e4:	e00f      	b.n	8008406 <_svfiprintf_r+0xf6>
 80083e6:	462f      	mov	r7, r5
 80083e8:	e7b8      	b.n	800835c <_svfiprintf_r+0x4c>
 80083ea:	4a40      	ldr	r2, [pc, #256]	; (80084ec <_svfiprintf_r+0x1dc>)
 80083ec:	1a80      	subs	r0, r0, r2
 80083ee:	fa0b f000 	lsl.w	r0, fp, r0
 80083f2:	4318      	orrs	r0, r3
 80083f4:	9004      	str	r0, [sp, #16]
 80083f6:	463d      	mov	r5, r7
 80083f8:	e7d3      	b.n	80083a2 <_svfiprintf_r+0x92>
 80083fa:	9a03      	ldr	r2, [sp, #12]
 80083fc:	1d11      	adds	r1, r2, #4
 80083fe:	6812      	ldr	r2, [r2, #0]
 8008400:	9103      	str	r1, [sp, #12]
 8008402:	2a00      	cmp	r2, #0
 8008404:	db01      	blt.n	800840a <_svfiprintf_r+0xfa>
 8008406:	9207      	str	r2, [sp, #28]
 8008408:	e004      	b.n	8008414 <_svfiprintf_r+0x104>
 800840a:	4252      	negs	r2, r2
 800840c:	f043 0302 	orr.w	r3, r3, #2
 8008410:	9207      	str	r2, [sp, #28]
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	783b      	ldrb	r3, [r7, #0]
 8008416:	2b2e      	cmp	r3, #46	; 0x2e
 8008418:	d10c      	bne.n	8008434 <_svfiprintf_r+0x124>
 800841a:	787b      	ldrb	r3, [r7, #1]
 800841c:	2b2a      	cmp	r3, #42	; 0x2a
 800841e:	d133      	bne.n	8008488 <_svfiprintf_r+0x178>
 8008420:	9b03      	ldr	r3, [sp, #12]
 8008422:	1d1a      	adds	r2, r3, #4
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	9203      	str	r2, [sp, #12]
 8008428:	2b00      	cmp	r3, #0
 800842a:	bfb8      	it	lt
 800842c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008430:	3702      	adds	r7, #2
 8008432:	9305      	str	r3, [sp, #20]
 8008434:	4d2e      	ldr	r5, [pc, #184]	; (80084f0 <_svfiprintf_r+0x1e0>)
 8008436:	7839      	ldrb	r1, [r7, #0]
 8008438:	2203      	movs	r2, #3
 800843a:	4628      	mov	r0, r5
 800843c:	f7f7 fef0 	bl	8000220 <memchr>
 8008440:	b138      	cbz	r0, 8008452 <_svfiprintf_r+0x142>
 8008442:	2340      	movs	r3, #64	; 0x40
 8008444:	1b40      	subs	r0, r0, r5
 8008446:	fa03 f000 	lsl.w	r0, r3, r0
 800844a:	9b04      	ldr	r3, [sp, #16]
 800844c:	4303      	orrs	r3, r0
 800844e:	3701      	adds	r7, #1
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	7839      	ldrb	r1, [r7, #0]
 8008454:	4827      	ldr	r0, [pc, #156]	; (80084f4 <_svfiprintf_r+0x1e4>)
 8008456:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800845a:	2206      	movs	r2, #6
 800845c:	1c7e      	adds	r6, r7, #1
 800845e:	f7f7 fedf 	bl	8000220 <memchr>
 8008462:	2800      	cmp	r0, #0
 8008464:	d038      	beq.n	80084d8 <_svfiprintf_r+0x1c8>
 8008466:	4b24      	ldr	r3, [pc, #144]	; (80084f8 <_svfiprintf_r+0x1e8>)
 8008468:	bb13      	cbnz	r3, 80084b0 <_svfiprintf_r+0x1a0>
 800846a:	9b03      	ldr	r3, [sp, #12]
 800846c:	3307      	adds	r3, #7
 800846e:	f023 0307 	bic.w	r3, r3, #7
 8008472:	3308      	adds	r3, #8
 8008474:	9303      	str	r3, [sp, #12]
 8008476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008478:	444b      	add	r3, r9
 800847a:	9309      	str	r3, [sp, #36]	; 0x24
 800847c:	e76d      	b.n	800835a <_svfiprintf_r+0x4a>
 800847e:	fb05 3202 	mla	r2, r5, r2, r3
 8008482:	2001      	movs	r0, #1
 8008484:	460f      	mov	r7, r1
 8008486:	e7a6      	b.n	80083d6 <_svfiprintf_r+0xc6>
 8008488:	2300      	movs	r3, #0
 800848a:	3701      	adds	r7, #1
 800848c:	9305      	str	r3, [sp, #20]
 800848e:	4619      	mov	r1, r3
 8008490:	250a      	movs	r5, #10
 8008492:	4638      	mov	r0, r7
 8008494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008498:	3a30      	subs	r2, #48	; 0x30
 800849a:	2a09      	cmp	r2, #9
 800849c:	d903      	bls.n	80084a6 <_svfiprintf_r+0x196>
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d0c8      	beq.n	8008434 <_svfiprintf_r+0x124>
 80084a2:	9105      	str	r1, [sp, #20]
 80084a4:	e7c6      	b.n	8008434 <_svfiprintf_r+0x124>
 80084a6:	fb05 2101 	mla	r1, r5, r1, r2
 80084aa:	2301      	movs	r3, #1
 80084ac:	4607      	mov	r7, r0
 80084ae:	e7f0      	b.n	8008492 <_svfiprintf_r+0x182>
 80084b0:	ab03      	add	r3, sp, #12
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	4622      	mov	r2, r4
 80084b6:	4b11      	ldr	r3, [pc, #68]	; (80084fc <_svfiprintf_r+0x1ec>)
 80084b8:	a904      	add	r1, sp, #16
 80084ba:	4640      	mov	r0, r8
 80084bc:	f7fe f8de 	bl	800667c <_printf_float>
 80084c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80084c4:	4681      	mov	r9, r0
 80084c6:	d1d6      	bne.n	8008476 <_svfiprintf_r+0x166>
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	065b      	lsls	r3, r3, #25
 80084cc:	f53f af35 	bmi.w	800833a <_svfiprintf_r+0x2a>
 80084d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084d2:	b01d      	add	sp, #116	; 0x74
 80084d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d8:	ab03      	add	r3, sp, #12
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4622      	mov	r2, r4
 80084de:	4b07      	ldr	r3, [pc, #28]	; (80084fc <_svfiprintf_r+0x1ec>)
 80084e0:	a904      	add	r1, sp, #16
 80084e2:	4640      	mov	r0, r8
 80084e4:	f7fe fb80 	bl	8006be8 <_printf_i>
 80084e8:	e7ea      	b.n	80084c0 <_svfiprintf_r+0x1b0>
 80084ea:	bf00      	nop
 80084ec:	08009d04 	.word	0x08009d04
 80084f0:	08009d0a 	.word	0x08009d0a
 80084f4:	08009d0e 	.word	0x08009d0e
 80084f8:	0800667d 	.word	0x0800667d
 80084fc:	0800825d 	.word	0x0800825d

08008500 <_sbrk_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4c06      	ldr	r4, [pc, #24]	; (800851c <_sbrk_r+0x1c>)
 8008504:	2300      	movs	r3, #0
 8008506:	4605      	mov	r5, r0
 8008508:	4608      	mov	r0, r1
 800850a:	6023      	str	r3, [r4, #0]
 800850c:	f7f9 fc62 	bl	8001dd4 <_sbrk>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d102      	bne.n	800851a <_sbrk_r+0x1a>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	b103      	cbz	r3, 800851a <_sbrk_r+0x1a>
 8008518:	602b      	str	r3, [r5, #0]
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	2000262c 	.word	0x2000262c

08008520 <__ascii_mbtowc>:
 8008520:	b082      	sub	sp, #8
 8008522:	b901      	cbnz	r1, 8008526 <__ascii_mbtowc+0x6>
 8008524:	a901      	add	r1, sp, #4
 8008526:	b142      	cbz	r2, 800853a <__ascii_mbtowc+0x1a>
 8008528:	b14b      	cbz	r3, 800853e <__ascii_mbtowc+0x1e>
 800852a:	7813      	ldrb	r3, [r2, #0]
 800852c:	600b      	str	r3, [r1, #0]
 800852e:	7812      	ldrb	r2, [r2, #0]
 8008530:	1c10      	adds	r0, r2, #0
 8008532:	bf18      	it	ne
 8008534:	2001      	movne	r0, #1
 8008536:	b002      	add	sp, #8
 8008538:	4770      	bx	lr
 800853a:	4610      	mov	r0, r2
 800853c:	e7fb      	b.n	8008536 <__ascii_mbtowc+0x16>
 800853e:	f06f 0001 	mvn.w	r0, #1
 8008542:	e7f8      	b.n	8008536 <__ascii_mbtowc+0x16>

08008544 <memmove>:
 8008544:	4288      	cmp	r0, r1
 8008546:	b510      	push	{r4, lr}
 8008548:	eb01 0302 	add.w	r3, r1, r2
 800854c:	d807      	bhi.n	800855e <memmove+0x1a>
 800854e:	1e42      	subs	r2, r0, #1
 8008550:	4299      	cmp	r1, r3
 8008552:	d00a      	beq.n	800856a <memmove+0x26>
 8008554:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008558:	f802 4f01 	strb.w	r4, [r2, #1]!
 800855c:	e7f8      	b.n	8008550 <memmove+0xc>
 800855e:	4283      	cmp	r3, r0
 8008560:	d9f5      	bls.n	800854e <memmove+0xa>
 8008562:	1881      	adds	r1, r0, r2
 8008564:	1ad2      	subs	r2, r2, r3
 8008566:	42d3      	cmn	r3, r2
 8008568:	d100      	bne.n	800856c <memmove+0x28>
 800856a:	bd10      	pop	{r4, pc}
 800856c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008570:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008574:	e7f7      	b.n	8008566 <memmove+0x22>

08008576 <__malloc_lock>:
 8008576:	4770      	bx	lr

08008578 <__malloc_unlock>:
 8008578:	4770      	bx	lr

0800857a <_realloc_r>:
 800857a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857c:	4607      	mov	r7, r0
 800857e:	4614      	mov	r4, r2
 8008580:	460e      	mov	r6, r1
 8008582:	b921      	cbnz	r1, 800858e <_realloc_r+0x14>
 8008584:	4611      	mov	r1, r2
 8008586:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800858a:	f7ff be0d 	b.w	80081a8 <_malloc_r>
 800858e:	b922      	cbnz	r2, 800859a <_realloc_r+0x20>
 8008590:	f7ff fdbc 	bl	800810c <_free_r>
 8008594:	4625      	mov	r5, r4
 8008596:	4628      	mov	r0, r5
 8008598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800859a:	f000 f821 	bl	80085e0 <_malloc_usable_size_r>
 800859e:	42a0      	cmp	r0, r4
 80085a0:	d20f      	bcs.n	80085c2 <_realloc_r+0x48>
 80085a2:	4621      	mov	r1, r4
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff fdff 	bl	80081a8 <_malloc_r>
 80085aa:	4605      	mov	r5, r0
 80085ac:	2800      	cmp	r0, #0
 80085ae:	d0f2      	beq.n	8008596 <_realloc_r+0x1c>
 80085b0:	4631      	mov	r1, r6
 80085b2:	4622      	mov	r2, r4
 80085b4:	f7ff fab6 	bl	8007b24 <memcpy>
 80085b8:	4631      	mov	r1, r6
 80085ba:	4638      	mov	r0, r7
 80085bc:	f7ff fda6 	bl	800810c <_free_r>
 80085c0:	e7e9      	b.n	8008596 <_realloc_r+0x1c>
 80085c2:	4635      	mov	r5, r6
 80085c4:	e7e7      	b.n	8008596 <_realloc_r+0x1c>

080085c6 <__ascii_wctomb>:
 80085c6:	b149      	cbz	r1, 80085dc <__ascii_wctomb+0x16>
 80085c8:	2aff      	cmp	r2, #255	; 0xff
 80085ca:	bf85      	ittet	hi
 80085cc:	238a      	movhi	r3, #138	; 0x8a
 80085ce:	6003      	strhi	r3, [r0, #0]
 80085d0:	700a      	strbls	r2, [r1, #0]
 80085d2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80085d6:	bf98      	it	ls
 80085d8:	2001      	movls	r0, #1
 80085da:	4770      	bx	lr
 80085dc:	4608      	mov	r0, r1
 80085de:	4770      	bx	lr

080085e0 <_malloc_usable_size_r>:
 80085e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085e4:	1f18      	subs	r0, r3, #4
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	bfbc      	itt	lt
 80085ea:	580b      	ldrlt	r3, [r1, r0]
 80085ec:	18c0      	addlt	r0, r0, r3
 80085ee:	4770      	bx	lr

080085f0 <log>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	ed2d 8b02 	vpush	{d8}
 80085f6:	b08a      	sub	sp, #40	; 0x28
 80085f8:	ec55 4b10 	vmov	r4, r5, d0
 80085fc:	f000 f9e8 	bl	80089d0 <__ieee754_log>
 8008600:	4b36      	ldr	r3, [pc, #216]	; (80086dc <log+0xec>)
 8008602:	eeb0 8a40 	vmov.f32	s16, s0
 8008606:	eef0 8a60 	vmov.f32	s17, s1
 800860a:	f993 6000 	ldrsb.w	r6, [r3]
 800860e:	1c73      	adds	r3, r6, #1
 8008610:	d05b      	beq.n	80086ca <log+0xda>
 8008612:	4622      	mov	r2, r4
 8008614:	462b      	mov	r3, r5
 8008616:	4620      	mov	r0, r4
 8008618:	4629      	mov	r1, r5
 800861a:	f7f8 faa7 	bl	8000b6c <__aeabi_dcmpun>
 800861e:	2800      	cmp	r0, #0
 8008620:	d153      	bne.n	80086ca <log+0xda>
 8008622:	2200      	movs	r2, #0
 8008624:	2300      	movs	r3, #0
 8008626:	4620      	mov	r0, r4
 8008628:	4629      	mov	r1, r5
 800862a:	f7f8 fa95 	bl	8000b58 <__aeabi_dcmpgt>
 800862e:	2800      	cmp	r0, #0
 8008630:	d14b      	bne.n	80086ca <log+0xda>
 8008632:	4b2b      	ldr	r3, [pc, #172]	; (80086e0 <log+0xf0>)
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	9008      	str	r0, [sp, #32]
 8008638:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800863c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008640:	b9a6      	cbnz	r6, 800866c <log+0x7c>
 8008642:	4b28      	ldr	r3, [pc, #160]	; (80086e4 <log+0xf4>)
 8008644:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8008648:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800864c:	4620      	mov	r0, r4
 800864e:	2200      	movs	r2, #0
 8008650:	2300      	movs	r3, #0
 8008652:	4629      	mov	r1, r5
 8008654:	f7f8 fa58 	bl	8000b08 <__aeabi_dcmpeq>
 8008658:	bb40      	cbnz	r0, 80086ac <log+0xbc>
 800865a:	2301      	movs	r3, #1
 800865c:	2e02      	cmp	r6, #2
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	d119      	bne.n	8008696 <log+0xa6>
 8008662:	f7fd ff45 	bl	80064f0 <__errno>
 8008666:	2321      	movs	r3, #33	; 0x21
 8008668:	6003      	str	r3, [r0, #0]
 800866a:	e019      	b.n	80086a0 <log+0xb0>
 800866c:	4b1e      	ldr	r3, [pc, #120]	; (80086e8 <log+0xf8>)
 800866e:	2200      	movs	r2, #0
 8008670:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008674:	4620      	mov	r0, r4
 8008676:	2200      	movs	r2, #0
 8008678:	2300      	movs	r3, #0
 800867a:	4629      	mov	r1, r5
 800867c:	f7f8 fa44 	bl	8000b08 <__aeabi_dcmpeq>
 8008680:	2800      	cmp	r0, #0
 8008682:	d0ea      	beq.n	800865a <log+0x6a>
 8008684:	2302      	movs	r3, #2
 8008686:	429e      	cmp	r6, r3
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	d111      	bne.n	80086b0 <log+0xc0>
 800868c:	f7fd ff30 	bl	80064f0 <__errno>
 8008690:	2322      	movs	r3, #34	; 0x22
 8008692:	6003      	str	r3, [r0, #0]
 8008694:	e011      	b.n	80086ba <log+0xca>
 8008696:	4668      	mov	r0, sp
 8008698:	f001 f91d 	bl	80098d6 <matherr>
 800869c:	2800      	cmp	r0, #0
 800869e:	d0e0      	beq.n	8008662 <log+0x72>
 80086a0:	4812      	ldr	r0, [pc, #72]	; (80086ec <log+0xfc>)
 80086a2:	f001 f91d 	bl	80098e0 <nan>
 80086a6:	ed8d 0b06 	vstr	d0, [sp, #24]
 80086aa:	e006      	b.n	80086ba <log+0xca>
 80086ac:	2302      	movs	r3, #2
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	4668      	mov	r0, sp
 80086b2:	f001 f910 	bl	80098d6 <matherr>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d0e8      	beq.n	800868c <log+0x9c>
 80086ba:	9b08      	ldr	r3, [sp, #32]
 80086bc:	b11b      	cbz	r3, 80086c6 <log+0xd6>
 80086be:	f7fd ff17 	bl	80064f0 <__errno>
 80086c2:	9b08      	ldr	r3, [sp, #32]
 80086c4:	6003      	str	r3, [r0, #0]
 80086c6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80086ca:	eeb0 0a48 	vmov.f32	s0, s16
 80086ce:	eef0 0a68 	vmov.f32	s1, s17
 80086d2:	b00a      	add	sp, #40	; 0x28
 80086d4:	ecbd 8b02 	vpop	{d8}
 80086d8:	bd70      	pop	{r4, r5, r6, pc}
 80086da:	bf00      	nop
 80086dc:	20000200 	.word	0x20000200
 80086e0:	08009e20 	.word	0x08009e20
 80086e4:	c7efffff 	.word	0xc7efffff
 80086e8:	fff00000 	.word	0xfff00000
 80086ec:	08009d09 	.word	0x08009d09

080086f0 <pow>:
 80086f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f4:	ed2d 8b04 	vpush	{d8-d9}
 80086f8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80089cc <pow+0x2dc>
 80086fc:	b08d      	sub	sp, #52	; 0x34
 80086fe:	ec57 6b10 	vmov	r6, r7, d0
 8008702:	ec55 4b11 	vmov	r4, r5, d1
 8008706:	f000 fb17 	bl	8008d38 <__ieee754_pow>
 800870a:	f999 3000 	ldrsb.w	r3, [r9]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	3301      	adds	r3, #1
 8008712:	eeb0 8a40 	vmov.f32	s16, s0
 8008716:	eef0 8a60 	vmov.f32	s17, s1
 800871a:	46c8      	mov	r8, r9
 800871c:	d05f      	beq.n	80087de <pow+0xee>
 800871e:	4622      	mov	r2, r4
 8008720:	462b      	mov	r3, r5
 8008722:	4620      	mov	r0, r4
 8008724:	4629      	mov	r1, r5
 8008726:	f7f8 fa21 	bl	8000b6c <__aeabi_dcmpun>
 800872a:	4683      	mov	fp, r0
 800872c:	2800      	cmp	r0, #0
 800872e:	d156      	bne.n	80087de <pow+0xee>
 8008730:	4632      	mov	r2, r6
 8008732:	463b      	mov	r3, r7
 8008734:	4630      	mov	r0, r6
 8008736:	4639      	mov	r1, r7
 8008738:	f7f8 fa18 	bl	8000b6c <__aeabi_dcmpun>
 800873c:	9001      	str	r0, [sp, #4]
 800873e:	b1e8      	cbz	r0, 800877c <pow+0x8c>
 8008740:	2200      	movs	r2, #0
 8008742:	2300      	movs	r3, #0
 8008744:	4620      	mov	r0, r4
 8008746:	4629      	mov	r1, r5
 8008748:	f7f8 f9de 	bl	8000b08 <__aeabi_dcmpeq>
 800874c:	2800      	cmp	r0, #0
 800874e:	d046      	beq.n	80087de <pow+0xee>
 8008750:	2301      	movs	r3, #1
 8008752:	9302      	str	r3, [sp, #8]
 8008754:	4b96      	ldr	r3, [pc, #600]	; (80089b0 <pow+0x2c0>)
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	4b96      	ldr	r3, [pc, #600]	; (80089b4 <pow+0x2c4>)
 800875a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800875e:	2200      	movs	r2, #0
 8008760:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008764:	9b00      	ldr	r3, [sp, #0]
 8008766:	2b02      	cmp	r3, #2
 8008768:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800876c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008770:	d033      	beq.n	80087da <pow+0xea>
 8008772:	a802      	add	r0, sp, #8
 8008774:	f001 f8af 	bl	80098d6 <matherr>
 8008778:	bb48      	cbnz	r0, 80087ce <pow+0xde>
 800877a:	e05d      	b.n	8008838 <pow+0x148>
 800877c:	f04f 0a00 	mov.w	sl, #0
 8008780:	f04f 0b00 	mov.w	fp, #0
 8008784:	4652      	mov	r2, sl
 8008786:	465b      	mov	r3, fp
 8008788:	4630      	mov	r0, r6
 800878a:	4639      	mov	r1, r7
 800878c:	f7f8 f9bc 	bl	8000b08 <__aeabi_dcmpeq>
 8008790:	ec4b ab19 	vmov	d9, sl, fp
 8008794:	2800      	cmp	r0, #0
 8008796:	d054      	beq.n	8008842 <pow+0x152>
 8008798:	4652      	mov	r2, sl
 800879a:	465b      	mov	r3, fp
 800879c:	4620      	mov	r0, r4
 800879e:	4629      	mov	r1, r5
 80087a0:	f7f8 f9b2 	bl	8000b08 <__aeabi_dcmpeq>
 80087a4:	4680      	mov	r8, r0
 80087a6:	b318      	cbz	r0, 80087f0 <pow+0x100>
 80087a8:	2301      	movs	r3, #1
 80087aa:	9302      	str	r3, [sp, #8]
 80087ac:	4b80      	ldr	r3, [pc, #512]	; (80089b0 <pow+0x2c0>)
 80087ae:	9303      	str	r3, [sp, #12]
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	930a      	str	r3, [sp, #40]	; 0x28
 80087b4:	9b00      	ldr	r3, [sp, #0]
 80087b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80087ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80087be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0d5      	beq.n	8008772 <pow+0x82>
 80087c6:	4b7b      	ldr	r3, [pc, #492]	; (80089b4 <pow+0x2c4>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80087ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d0:	b11b      	cbz	r3, 80087da <pow+0xea>
 80087d2:	f7fd fe8d 	bl	80064f0 <__errno>
 80087d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d8:	6003      	str	r3, [r0, #0]
 80087da:	ed9d 8b08 	vldr	d8, [sp, #32]
 80087de:	eeb0 0a48 	vmov.f32	s0, s16
 80087e2:	eef0 0a68 	vmov.f32	s1, s17
 80087e6:	b00d      	add	sp, #52	; 0x34
 80087e8:	ecbd 8b04 	vpop	{d8-d9}
 80087ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f0:	ec45 4b10 	vmov	d0, r4, r5
 80087f4:	f001 f867 	bl	80098c6 <finite>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	d0f0      	beq.n	80087de <pow+0xee>
 80087fc:	4652      	mov	r2, sl
 80087fe:	465b      	mov	r3, fp
 8008800:	4620      	mov	r0, r4
 8008802:	4629      	mov	r1, r5
 8008804:	f7f8 f98a 	bl	8000b1c <__aeabi_dcmplt>
 8008808:	2800      	cmp	r0, #0
 800880a:	d0e8      	beq.n	80087de <pow+0xee>
 800880c:	2301      	movs	r3, #1
 800880e:	9302      	str	r3, [sp, #8]
 8008810:	4b67      	ldr	r3, [pc, #412]	; (80089b0 <pow+0x2c0>)
 8008812:	9303      	str	r3, [sp, #12]
 8008814:	f999 3000 	ldrsb.w	r3, [r9]
 8008818:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800881c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008820:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008824:	b913      	cbnz	r3, 800882c <pow+0x13c>
 8008826:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800882a:	e7a2      	b.n	8008772 <pow+0x82>
 800882c:	4962      	ldr	r1, [pc, #392]	; (80089b8 <pow+0x2c8>)
 800882e:	2000      	movs	r0, #0
 8008830:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008834:	2b02      	cmp	r3, #2
 8008836:	d19c      	bne.n	8008772 <pow+0x82>
 8008838:	f7fd fe5a 	bl	80064f0 <__errno>
 800883c:	2321      	movs	r3, #33	; 0x21
 800883e:	6003      	str	r3, [r0, #0]
 8008840:	e7c5      	b.n	80087ce <pow+0xde>
 8008842:	eeb0 0a48 	vmov.f32	s0, s16
 8008846:	eef0 0a68 	vmov.f32	s1, s17
 800884a:	f001 f83c 	bl	80098c6 <finite>
 800884e:	9000      	str	r0, [sp, #0]
 8008850:	2800      	cmp	r0, #0
 8008852:	f040 8081 	bne.w	8008958 <pow+0x268>
 8008856:	ec47 6b10 	vmov	d0, r6, r7
 800885a:	f001 f834 	bl	80098c6 <finite>
 800885e:	2800      	cmp	r0, #0
 8008860:	d07a      	beq.n	8008958 <pow+0x268>
 8008862:	ec45 4b10 	vmov	d0, r4, r5
 8008866:	f001 f82e 	bl	80098c6 <finite>
 800886a:	2800      	cmp	r0, #0
 800886c:	d074      	beq.n	8008958 <pow+0x268>
 800886e:	ec53 2b18 	vmov	r2, r3, d8
 8008872:	ee18 0a10 	vmov	r0, s16
 8008876:	4619      	mov	r1, r3
 8008878:	f7f8 f978 	bl	8000b6c <__aeabi_dcmpun>
 800887c:	f999 9000 	ldrsb.w	r9, [r9]
 8008880:	4b4b      	ldr	r3, [pc, #300]	; (80089b0 <pow+0x2c0>)
 8008882:	b1b0      	cbz	r0, 80088b2 <pow+0x1c2>
 8008884:	2201      	movs	r2, #1
 8008886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800888a:	9b00      	ldr	r3, [sp, #0]
 800888c:	930a      	str	r3, [sp, #40]	; 0x28
 800888e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008892:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8008896:	f1b9 0f00 	cmp.w	r9, #0
 800889a:	d0c4      	beq.n	8008826 <pow+0x136>
 800889c:	4652      	mov	r2, sl
 800889e:	465b      	mov	r3, fp
 80088a0:	4650      	mov	r0, sl
 80088a2:	4659      	mov	r1, fp
 80088a4:	f7f7 fff2 	bl	800088c <__aeabi_ddiv>
 80088a8:	f1b9 0f02 	cmp.w	r9, #2
 80088ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80088b0:	e7c1      	b.n	8008836 <pow+0x146>
 80088b2:	2203      	movs	r2, #3
 80088b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088b8:	900a      	str	r0, [sp, #40]	; 0x28
 80088ba:	4629      	mov	r1, r5
 80088bc:	4620      	mov	r0, r4
 80088be:	2200      	movs	r2, #0
 80088c0:	4b3e      	ldr	r3, [pc, #248]	; (80089bc <pow+0x2cc>)
 80088c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80088c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80088ca:	f7f7 feb5 	bl	8000638 <__aeabi_dmul>
 80088ce:	4604      	mov	r4, r0
 80088d0:	460d      	mov	r5, r1
 80088d2:	f1b9 0f00 	cmp.w	r9, #0
 80088d6:	d124      	bne.n	8008922 <pow+0x232>
 80088d8:	4b39      	ldr	r3, [pc, #228]	; (80089c0 <pow+0x2d0>)
 80088da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80088de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80088e2:	4630      	mov	r0, r6
 80088e4:	4652      	mov	r2, sl
 80088e6:	465b      	mov	r3, fp
 80088e8:	4639      	mov	r1, r7
 80088ea:	f7f8 f917 	bl	8000b1c <__aeabi_dcmplt>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d056      	beq.n	80089a0 <pow+0x2b0>
 80088f2:	ec45 4b10 	vmov	d0, r4, r5
 80088f6:	f000 fffb 	bl	80098f0 <rint>
 80088fa:	4622      	mov	r2, r4
 80088fc:	462b      	mov	r3, r5
 80088fe:	ec51 0b10 	vmov	r0, r1, d0
 8008902:	f7f8 f901 	bl	8000b08 <__aeabi_dcmpeq>
 8008906:	b920      	cbnz	r0, 8008912 <pow+0x222>
 8008908:	4b2e      	ldr	r3, [pc, #184]	; (80089c4 <pow+0x2d4>)
 800890a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800890e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008912:	f998 3000 	ldrsb.w	r3, [r8]
 8008916:	2b02      	cmp	r3, #2
 8008918:	d142      	bne.n	80089a0 <pow+0x2b0>
 800891a:	f7fd fde9 	bl	80064f0 <__errno>
 800891e:	2322      	movs	r3, #34	; 0x22
 8008920:	e78d      	b.n	800883e <pow+0x14e>
 8008922:	4b29      	ldr	r3, [pc, #164]	; (80089c8 <pow+0x2d8>)
 8008924:	2200      	movs	r2, #0
 8008926:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800892a:	4630      	mov	r0, r6
 800892c:	4652      	mov	r2, sl
 800892e:	465b      	mov	r3, fp
 8008930:	4639      	mov	r1, r7
 8008932:	f7f8 f8f3 	bl	8000b1c <__aeabi_dcmplt>
 8008936:	2800      	cmp	r0, #0
 8008938:	d0eb      	beq.n	8008912 <pow+0x222>
 800893a:	ec45 4b10 	vmov	d0, r4, r5
 800893e:	f000 ffd7 	bl	80098f0 <rint>
 8008942:	4622      	mov	r2, r4
 8008944:	462b      	mov	r3, r5
 8008946:	ec51 0b10 	vmov	r0, r1, d0
 800894a:	f7f8 f8dd 	bl	8000b08 <__aeabi_dcmpeq>
 800894e:	2800      	cmp	r0, #0
 8008950:	d1df      	bne.n	8008912 <pow+0x222>
 8008952:	2200      	movs	r2, #0
 8008954:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <pow+0x2c8>)
 8008956:	e7da      	b.n	800890e <pow+0x21e>
 8008958:	2200      	movs	r2, #0
 800895a:	2300      	movs	r3, #0
 800895c:	ec51 0b18 	vmov	r0, r1, d8
 8008960:	f7f8 f8d2 	bl	8000b08 <__aeabi_dcmpeq>
 8008964:	2800      	cmp	r0, #0
 8008966:	f43f af3a 	beq.w	80087de <pow+0xee>
 800896a:	ec47 6b10 	vmov	d0, r6, r7
 800896e:	f000 ffaa 	bl	80098c6 <finite>
 8008972:	2800      	cmp	r0, #0
 8008974:	f43f af33 	beq.w	80087de <pow+0xee>
 8008978:	ec45 4b10 	vmov	d0, r4, r5
 800897c:	f000 ffa3 	bl	80098c6 <finite>
 8008980:	2800      	cmp	r0, #0
 8008982:	f43f af2c 	beq.w	80087de <pow+0xee>
 8008986:	2304      	movs	r3, #4
 8008988:	9302      	str	r3, [sp, #8]
 800898a:	4b09      	ldr	r3, [pc, #36]	; (80089b0 <pow+0x2c0>)
 800898c:	9303      	str	r3, [sp, #12]
 800898e:	2300      	movs	r3, #0
 8008990:	930a      	str	r3, [sp, #40]	; 0x28
 8008992:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008996:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800899a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800899e:	e7b8      	b.n	8008912 <pow+0x222>
 80089a0:	a802      	add	r0, sp, #8
 80089a2:	f000 ff98 	bl	80098d6 <matherr>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f47f af11 	bne.w	80087ce <pow+0xde>
 80089ac:	e7b5      	b.n	800891a <pow+0x22a>
 80089ae:	bf00      	nop
 80089b0:	08009e24 	.word	0x08009e24
 80089b4:	3ff00000 	.word	0x3ff00000
 80089b8:	fff00000 	.word	0xfff00000
 80089bc:	3fe00000 	.word	0x3fe00000
 80089c0:	47efffff 	.word	0x47efffff
 80089c4:	c7efffff 	.word	0xc7efffff
 80089c8:	7ff00000 	.word	0x7ff00000
 80089cc:	20000200 	.word	0x20000200

080089d0 <__ieee754_log>:
 80089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	ec51 0b10 	vmov	r0, r1, d0
 80089d8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80089dc:	b087      	sub	sp, #28
 80089de:	460d      	mov	r5, r1
 80089e0:	da27      	bge.n	8008a32 <__ieee754_log+0x62>
 80089e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089e6:	4303      	orrs	r3, r0
 80089e8:	ee10 2a10 	vmov	r2, s0
 80089ec:	d10a      	bne.n	8008a04 <__ieee754_log+0x34>
 80089ee:	49cc      	ldr	r1, [pc, #816]	; (8008d20 <__ieee754_log+0x350>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	2300      	movs	r3, #0
 80089f4:	2000      	movs	r0, #0
 80089f6:	f7f7 ff49 	bl	800088c <__aeabi_ddiv>
 80089fa:	ec41 0b10 	vmov	d0, r0, r1
 80089fe:	b007      	add	sp, #28
 8008a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a04:	2900      	cmp	r1, #0
 8008a06:	da05      	bge.n	8008a14 <__ieee754_log+0x44>
 8008a08:	460b      	mov	r3, r1
 8008a0a:	f7f7 fc5d 	bl	80002c8 <__aeabi_dsub>
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2300      	movs	r3, #0
 8008a12:	e7f0      	b.n	80089f6 <__ieee754_log+0x26>
 8008a14:	4bc3      	ldr	r3, [pc, #780]	; (8008d24 <__ieee754_log+0x354>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	f7f7 fe0e 	bl	8000638 <__aeabi_dmul>
 8008a1c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8008a20:	460d      	mov	r5, r1
 8008a22:	4ac1      	ldr	r2, [pc, #772]	; (8008d28 <__ieee754_log+0x358>)
 8008a24:	4295      	cmp	r5, r2
 8008a26:	dd06      	ble.n	8008a36 <__ieee754_log+0x66>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	f7f7 fc4e 	bl	80002cc <__adddf3>
 8008a30:	e7e3      	b.n	80089fa <__ieee754_log+0x2a>
 8008a32:	2300      	movs	r3, #0
 8008a34:	e7f5      	b.n	8008a22 <__ieee754_log+0x52>
 8008a36:	152c      	asrs	r4, r5, #20
 8008a38:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008a3c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008a40:	441c      	add	r4, r3
 8008a42:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8008a46:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8008a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a4e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8008a52:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8008a56:	ea42 0105 	orr.w	r1, r2, r5
 8008a5a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8008a5e:	2200      	movs	r2, #0
 8008a60:	4bb2      	ldr	r3, [pc, #712]	; (8008d2c <__ieee754_log+0x35c>)
 8008a62:	f7f7 fc31 	bl	80002c8 <__aeabi_dsub>
 8008a66:	1cab      	adds	r3, r5, #2
 8008a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a6c:	2b02      	cmp	r3, #2
 8008a6e:	4682      	mov	sl, r0
 8008a70:	468b      	mov	fp, r1
 8008a72:	f04f 0200 	mov.w	r2, #0
 8008a76:	dc53      	bgt.n	8008b20 <__ieee754_log+0x150>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f7f8 f845 	bl	8000b08 <__aeabi_dcmpeq>
 8008a7e:	b1d0      	cbz	r0, 8008ab6 <__ieee754_log+0xe6>
 8008a80:	2c00      	cmp	r4, #0
 8008a82:	f000 8120 	beq.w	8008cc6 <__ieee754_log+0x2f6>
 8008a86:	4620      	mov	r0, r4
 8008a88:	f7f7 fd6c 	bl	8000564 <__aeabi_i2d>
 8008a8c:	a390      	add	r3, pc, #576	; (adr r3, 8008cd0 <__ieee754_log+0x300>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	4606      	mov	r6, r0
 8008a94:	460f      	mov	r7, r1
 8008a96:	f7f7 fdcf 	bl	8000638 <__aeabi_dmul>
 8008a9a:	a38f      	add	r3, pc, #572	; (adr r3, 8008cd8 <__ieee754_log+0x308>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	460d      	mov	r5, r1
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	f7f7 fdc6 	bl	8000638 <__aeabi_dmul>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	e7ba      	b.n	8008a2c <__ieee754_log+0x5c>
 8008ab6:	a38a      	add	r3, pc, #552	; (adr r3, 8008ce0 <__ieee754_log+0x310>)
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	4650      	mov	r0, sl
 8008abe:	4659      	mov	r1, fp
 8008ac0:	f7f7 fdba 	bl	8000638 <__aeabi_dmul>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	2000      	movs	r0, #0
 8008aca:	4999      	ldr	r1, [pc, #612]	; (8008d30 <__ieee754_log+0x360>)
 8008acc:	f7f7 fbfc 	bl	80002c8 <__aeabi_dsub>
 8008ad0:	4652      	mov	r2, sl
 8008ad2:	4606      	mov	r6, r0
 8008ad4:	460f      	mov	r7, r1
 8008ad6:	465b      	mov	r3, fp
 8008ad8:	4650      	mov	r0, sl
 8008ada:	4659      	mov	r1, fp
 8008adc:	f7f7 fdac 	bl	8000638 <__aeabi_dmul>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4630      	mov	r0, r6
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	f7f7 fda6 	bl	8000638 <__aeabi_dmul>
 8008aec:	4606      	mov	r6, r0
 8008aee:	460f      	mov	r7, r1
 8008af0:	b914      	cbnz	r4, 8008af8 <__ieee754_log+0x128>
 8008af2:	4632      	mov	r2, r6
 8008af4:	463b      	mov	r3, r7
 8008af6:	e0a0      	b.n	8008c3a <__ieee754_log+0x26a>
 8008af8:	4620      	mov	r0, r4
 8008afa:	f7f7 fd33 	bl	8000564 <__aeabi_i2d>
 8008afe:	a374      	add	r3, pc, #464	; (adr r3, 8008cd0 <__ieee754_log+0x300>)
 8008b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b04:	4680      	mov	r8, r0
 8008b06:	4689      	mov	r9, r1
 8008b08:	f7f7 fd96 	bl	8000638 <__aeabi_dmul>
 8008b0c:	a372      	add	r3, pc, #456	; (adr r3, 8008cd8 <__ieee754_log+0x308>)
 8008b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b12:	4604      	mov	r4, r0
 8008b14:	460d      	mov	r5, r1
 8008b16:	4640      	mov	r0, r8
 8008b18:	4649      	mov	r1, r9
 8008b1a:	f7f7 fd8d 	bl	8000638 <__aeabi_dmul>
 8008b1e:	e0a5      	b.n	8008c6c <__ieee754_log+0x29c>
 8008b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008b24:	f7f7 fbd2 	bl	80002cc <__adddf3>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4650      	mov	r0, sl
 8008b2e:	4659      	mov	r1, fp
 8008b30:	f7f7 feac 	bl	800088c <__aeabi_ddiv>
 8008b34:	e9cd 0100 	strd	r0, r1, [sp]
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f7f7 fd13 	bl	8000564 <__aeabi_i2d>
 8008b3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b46:	4610      	mov	r0, r2
 8008b48:	4619      	mov	r1, r3
 8008b4a:	f7f7 fd75 	bl	8000638 <__aeabi_dmul>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b56:	f7f7 fd6f 	bl	8000638 <__aeabi_dmul>
 8008b5a:	a363      	add	r3, pc, #396	; (adr r3, 8008ce8 <__ieee754_log+0x318>)
 8008b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b60:	4680      	mov	r8, r0
 8008b62:	4689      	mov	r9, r1
 8008b64:	f7f7 fd68 	bl	8000638 <__aeabi_dmul>
 8008b68:	a361      	add	r3, pc, #388	; (adr r3, 8008cf0 <__ieee754_log+0x320>)
 8008b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6e:	f7f7 fbad 	bl	80002cc <__adddf3>
 8008b72:	4642      	mov	r2, r8
 8008b74:	464b      	mov	r3, r9
 8008b76:	f7f7 fd5f 	bl	8000638 <__aeabi_dmul>
 8008b7a:	a35f      	add	r3, pc, #380	; (adr r3, 8008cf8 <__ieee754_log+0x328>)
 8008b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b80:	f7f7 fba4 	bl	80002cc <__adddf3>
 8008b84:	4642      	mov	r2, r8
 8008b86:	464b      	mov	r3, r9
 8008b88:	f7f7 fd56 	bl	8000638 <__aeabi_dmul>
 8008b8c:	a35c      	add	r3, pc, #368	; (adr r3, 8008d00 <__ieee754_log+0x330>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	f7f7 fb9b 	bl	80002cc <__adddf3>
 8008b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b9a:	f7f7 fd4d 	bl	8000638 <__aeabi_dmul>
 8008b9e:	a35a      	add	r3, pc, #360	; (adr r3, 8008d08 <__ieee754_log+0x338>)
 8008ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ba8:	4640      	mov	r0, r8
 8008baa:	4649      	mov	r1, r9
 8008bac:	f7f7 fd44 	bl	8000638 <__aeabi_dmul>
 8008bb0:	a357      	add	r3, pc, #348	; (adr r3, 8008d10 <__ieee754_log+0x340>)
 8008bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb6:	f7f7 fb89 	bl	80002cc <__adddf3>
 8008bba:	4642      	mov	r2, r8
 8008bbc:	464b      	mov	r3, r9
 8008bbe:	f7f7 fd3b 	bl	8000638 <__aeabi_dmul>
 8008bc2:	a355      	add	r3, pc, #340	; (adr r3, 8008d18 <__ieee754_log+0x348>)
 8008bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc8:	f7f7 fb80 	bl	80002cc <__adddf3>
 8008bcc:	4642      	mov	r2, r8
 8008bce:	464b      	mov	r3, r9
 8008bd0:	f7f7 fd32 	bl	8000638 <__aeabi_dmul>
 8008bd4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8008bd8:	4602      	mov	r2, r0
 8008bda:	460b      	mov	r3, r1
 8008bdc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008be0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008be4:	f7f7 fb72 	bl	80002cc <__adddf3>
 8008be8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8008bec:	3551      	adds	r5, #81	; 0x51
 8008bee:	4335      	orrs	r5, r6
 8008bf0:	2d00      	cmp	r5, #0
 8008bf2:	4680      	mov	r8, r0
 8008bf4:	4689      	mov	r9, r1
 8008bf6:	dd48      	ble.n	8008c8a <__ieee754_log+0x2ba>
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4b4d      	ldr	r3, [pc, #308]	; (8008d30 <__ieee754_log+0x360>)
 8008bfc:	4650      	mov	r0, sl
 8008bfe:	4659      	mov	r1, fp
 8008c00:	f7f7 fd1a 	bl	8000638 <__aeabi_dmul>
 8008c04:	4652      	mov	r2, sl
 8008c06:	465b      	mov	r3, fp
 8008c08:	f7f7 fd16 	bl	8000638 <__aeabi_dmul>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	460b      	mov	r3, r1
 8008c10:	4606      	mov	r6, r0
 8008c12:	460f      	mov	r7, r1
 8008c14:	4640      	mov	r0, r8
 8008c16:	4649      	mov	r1, r9
 8008c18:	f7f7 fb58 	bl	80002cc <__adddf3>
 8008c1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c20:	f7f7 fd0a 	bl	8000638 <__aeabi_dmul>
 8008c24:	4680      	mov	r8, r0
 8008c26:	4689      	mov	r9, r1
 8008c28:	b964      	cbnz	r4, 8008c44 <__ieee754_log+0x274>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4630      	mov	r0, r6
 8008c30:	4639      	mov	r1, r7
 8008c32:	f7f7 fb49 	bl	80002c8 <__aeabi_dsub>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4650      	mov	r0, sl
 8008c3c:	4659      	mov	r1, fp
 8008c3e:	f7f7 fb43 	bl	80002c8 <__aeabi_dsub>
 8008c42:	e6da      	b.n	80089fa <__ieee754_log+0x2a>
 8008c44:	a322      	add	r3, pc, #136	; (adr r3, 8008cd0 <__ieee754_log+0x300>)
 8008c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c4e:	f7f7 fcf3 	bl	8000638 <__aeabi_dmul>
 8008c52:	a321      	add	r3, pc, #132	; (adr r3, 8008cd8 <__ieee754_log+0x308>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	4604      	mov	r4, r0
 8008c5a:	460d      	mov	r5, r1
 8008c5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c60:	f7f7 fcea 	bl	8000638 <__aeabi_dmul>
 8008c64:	4642      	mov	r2, r8
 8008c66:	464b      	mov	r3, r9
 8008c68:	f7f7 fb30 	bl	80002cc <__adddf3>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	460b      	mov	r3, r1
 8008c70:	4630      	mov	r0, r6
 8008c72:	4639      	mov	r1, r7
 8008c74:	f7f7 fb28 	bl	80002c8 <__aeabi_dsub>
 8008c78:	4652      	mov	r2, sl
 8008c7a:	465b      	mov	r3, fp
 8008c7c:	f7f7 fb24 	bl	80002c8 <__aeabi_dsub>
 8008c80:	4602      	mov	r2, r0
 8008c82:	460b      	mov	r3, r1
 8008c84:	4620      	mov	r0, r4
 8008c86:	4629      	mov	r1, r5
 8008c88:	e7d9      	b.n	8008c3e <__ieee754_log+0x26e>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4650      	mov	r0, sl
 8008c90:	4659      	mov	r1, fp
 8008c92:	f7f7 fb19 	bl	80002c8 <__aeabi_dsub>
 8008c96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c9a:	f7f7 fccd 	bl	8000638 <__aeabi_dmul>
 8008c9e:	4606      	mov	r6, r0
 8008ca0:	460f      	mov	r7, r1
 8008ca2:	2c00      	cmp	r4, #0
 8008ca4:	f43f af25 	beq.w	8008af2 <__ieee754_log+0x122>
 8008ca8:	a309      	add	r3, pc, #36	; (adr r3, 8008cd0 <__ieee754_log+0x300>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb2:	f7f7 fcc1 	bl	8000638 <__aeabi_dmul>
 8008cb6:	a308      	add	r3, pc, #32	; (adr r3, 8008cd8 <__ieee754_log+0x308>)
 8008cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	460d      	mov	r5, r1
 8008cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cc4:	e729      	b.n	8008b1a <__ieee754_log+0x14a>
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	2100      	movs	r1, #0
 8008cca:	e696      	b.n	80089fa <__ieee754_log+0x2a>
 8008ccc:	f3af 8000 	nop.w
 8008cd0:	fee00000 	.word	0xfee00000
 8008cd4:	3fe62e42 	.word	0x3fe62e42
 8008cd8:	35793c76 	.word	0x35793c76
 8008cdc:	3dea39ef 	.word	0x3dea39ef
 8008ce0:	55555555 	.word	0x55555555
 8008ce4:	3fd55555 	.word	0x3fd55555
 8008ce8:	df3e5244 	.word	0xdf3e5244
 8008cec:	3fc2f112 	.word	0x3fc2f112
 8008cf0:	96cb03de 	.word	0x96cb03de
 8008cf4:	3fc74664 	.word	0x3fc74664
 8008cf8:	94229359 	.word	0x94229359
 8008cfc:	3fd24924 	.word	0x3fd24924
 8008d00:	55555593 	.word	0x55555593
 8008d04:	3fe55555 	.word	0x3fe55555
 8008d08:	d078c69f 	.word	0xd078c69f
 8008d0c:	3fc39a09 	.word	0x3fc39a09
 8008d10:	1d8e78af 	.word	0x1d8e78af
 8008d14:	3fcc71c5 	.word	0x3fcc71c5
 8008d18:	9997fa04 	.word	0x9997fa04
 8008d1c:	3fd99999 	.word	0x3fd99999
 8008d20:	c3500000 	.word	0xc3500000
 8008d24:	43500000 	.word	0x43500000
 8008d28:	7fefffff 	.word	0x7fefffff
 8008d2c:	3ff00000 	.word	0x3ff00000
 8008d30:	3fe00000 	.word	0x3fe00000
 8008d34:	00000000 	.word	0x00000000

08008d38 <__ieee754_pow>:
 8008d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3c:	b091      	sub	sp, #68	; 0x44
 8008d3e:	ed8d 1b00 	vstr	d1, [sp]
 8008d42:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008d46:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008d4a:	ea58 0302 	orrs.w	r3, r8, r2
 8008d4e:	ec57 6b10 	vmov	r6, r7, d0
 8008d52:	f000 84be 	beq.w	80096d2 <__ieee754_pow+0x99a>
 8008d56:	4b7a      	ldr	r3, [pc, #488]	; (8008f40 <__ieee754_pow+0x208>)
 8008d58:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008d5c:	429c      	cmp	r4, r3
 8008d5e:	463d      	mov	r5, r7
 8008d60:	ee10 aa10 	vmov	sl, s0
 8008d64:	dc09      	bgt.n	8008d7a <__ieee754_pow+0x42>
 8008d66:	d103      	bne.n	8008d70 <__ieee754_pow+0x38>
 8008d68:	b93e      	cbnz	r6, 8008d7a <__ieee754_pow+0x42>
 8008d6a:	45a0      	cmp	r8, r4
 8008d6c:	dc0d      	bgt.n	8008d8a <__ieee754_pow+0x52>
 8008d6e:	e001      	b.n	8008d74 <__ieee754_pow+0x3c>
 8008d70:	4598      	cmp	r8, r3
 8008d72:	dc02      	bgt.n	8008d7a <__ieee754_pow+0x42>
 8008d74:	4598      	cmp	r8, r3
 8008d76:	d10e      	bne.n	8008d96 <__ieee754_pow+0x5e>
 8008d78:	b16a      	cbz	r2, 8008d96 <__ieee754_pow+0x5e>
 8008d7a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008d7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008d82:	ea54 030a 	orrs.w	r3, r4, sl
 8008d86:	f000 84a4 	beq.w	80096d2 <__ieee754_pow+0x99a>
 8008d8a:	486e      	ldr	r0, [pc, #440]	; (8008f44 <__ieee754_pow+0x20c>)
 8008d8c:	b011      	add	sp, #68	; 0x44
 8008d8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d92:	f000 bda5 	b.w	80098e0 <nan>
 8008d96:	2d00      	cmp	r5, #0
 8008d98:	da53      	bge.n	8008e42 <__ieee754_pow+0x10a>
 8008d9a:	4b6b      	ldr	r3, [pc, #428]	; (8008f48 <__ieee754_pow+0x210>)
 8008d9c:	4598      	cmp	r8, r3
 8008d9e:	dc4d      	bgt.n	8008e3c <__ieee754_pow+0x104>
 8008da0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008da4:	4598      	cmp	r8, r3
 8008da6:	dd4c      	ble.n	8008e42 <__ieee754_pow+0x10a>
 8008da8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008dac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008db0:	2b14      	cmp	r3, #20
 8008db2:	dd26      	ble.n	8008e02 <__ieee754_pow+0xca>
 8008db4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008db8:	fa22 f103 	lsr.w	r1, r2, r3
 8008dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d13e      	bne.n	8008e42 <__ieee754_pow+0x10a>
 8008dc4:	f001 0101 	and.w	r1, r1, #1
 8008dc8:	f1c1 0b02 	rsb	fp, r1, #2
 8008dcc:	2a00      	cmp	r2, #0
 8008dce:	d15b      	bne.n	8008e88 <__ieee754_pow+0x150>
 8008dd0:	4b5b      	ldr	r3, [pc, #364]	; (8008f40 <__ieee754_pow+0x208>)
 8008dd2:	4598      	cmp	r8, r3
 8008dd4:	d124      	bne.n	8008e20 <__ieee754_pow+0xe8>
 8008dd6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008dda:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008dde:	ea53 030a 	orrs.w	r3, r3, sl
 8008de2:	f000 8476 	beq.w	80096d2 <__ieee754_pow+0x99a>
 8008de6:	4b59      	ldr	r3, [pc, #356]	; (8008f4c <__ieee754_pow+0x214>)
 8008de8:	429c      	cmp	r4, r3
 8008dea:	dd2d      	ble.n	8008e48 <__ieee754_pow+0x110>
 8008dec:	f1b9 0f00 	cmp.w	r9, #0
 8008df0:	f280 8473 	bge.w	80096da <__ieee754_pow+0x9a2>
 8008df4:	2000      	movs	r0, #0
 8008df6:	2100      	movs	r1, #0
 8008df8:	ec41 0b10 	vmov	d0, r0, r1
 8008dfc:	b011      	add	sp, #68	; 0x44
 8008dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e02:	2a00      	cmp	r2, #0
 8008e04:	d13e      	bne.n	8008e84 <__ieee754_pow+0x14c>
 8008e06:	f1c3 0314 	rsb	r3, r3, #20
 8008e0a:	fa48 f103 	asr.w	r1, r8, r3
 8008e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e12:	4543      	cmp	r3, r8
 8008e14:	f040 8469 	bne.w	80096ea <__ieee754_pow+0x9b2>
 8008e18:	f001 0101 	and.w	r1, r1, #1
 8008e1c:	f1c1 0b02 	rsb	fp, r1, #2
 8008e20:	4b4b      	ldr	r3, [pc, #300]	; (8008f50 <__ieee754_pow+0x218>)
 8008e22:	4598      	cmp	r8, r3
 8008e24:	d118      	bne.n	8008e58 <__ieee754_pow+0x120>
 8008e26:	f1b9 0f00 	cmp.w	r9, #0
 8008e2a:	f280 845a 	bge.w	80096e2 <__ieee754_pow+0x9aa>
 8008e2e:	4948      	ldr	r1, [pc, #288]	; (8008f50 <__ieee754_pow+0x218>)
 8008e30:	4632      	mov	r2, r6
 8008e32:	463b      	mov	r3, r7
 8008e34:	2000      	movs	r0, #0
 8008e36:	f7f7 fd29 	bl	800088c <__aeabi_ddiv>
 8008e3a:	e7dd      	b.n	8008df8 <__ieee754_pow+0xc0>
 8008e3c:	f04f 0b02 	mov.w	fp, #2
 8008e40:	e7c4      	b.n	8008dcc <__ieee754_pow+0x94>
 8008e42:	f04f 0b00 	mov.w	fp, #0
 8008e46:	e7c1      	b.n	8008dcc <__ieee754_pow+0x94>
 8008e48:	f1b9 0f00 	cmp.w	r9, #0
 8008e4c:	dad2      	bge.n	8008df4 <__ieee754_pow+0xbc>
 8008e4e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008e52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008e56:	e7cf      	b.n	8008df8 <__ieee754_pow+0xc0>
 8008e58:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008e5c:	d106      	bne.n	8008e6c <__ieee754_pow+0x134>
 8008e5e:	4632      	mov	r2, r6
 8008e60:	463b      	mov	r3, r7
 8008e62:	4610      	mov	r0, r2
 8008e64:	4619      	mov	r1, r3
 8008e66:	f7f7 fbe7 	bl	8000638 <__aeabi_dmul>
 8008e6a:	e7c5      	b.n	8008df8 <__ieee754_pow+0xc0>
 8008e6c:	4b39      	ldr	r3, [pc, #228]	; (8008f54 <__ieee754_pow+0x21c>)
 8008e6e:	4599      	cmp	r9, r3
 8008e70:	d10a      	bne.n	8008e88 <__ieee754_pow+0x150>
 8008e72:	2d00      	cmp	r5, #0
 8008e74:	db08      	blt.n	8008e88 <__ieee754_pow+0x150>
 8008e76:	ec47 6b10 	vmov	d0, r6, r7
 8008e7a:	b011      	add	sp, #68	; 0x44
 8008e7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e80:	f000 bc68 	b.w	8009754 <__ieee754_sqrt>
 8008e84:	f04f 0b00 	mov.w	fp, #0
 8008e88:	ec47 6b10 	vmov	d0, r6, r7
 8008e8c:	f000 fd12 	bl	80098b4 <fabs>
 8008e90:	ec51 0b10 	vmov	r0, r1, d0
 8008e94:	f1ba 0f00 	cmp.w	sl, #0
 8008e98:	d127      	bne.n	8008eea <__ieee754_pow+0x1b2>
 8008e9a:	b124      	cbz	r4, 8008ea6 <__ieee754_pow+0x16e>
 8008e9c:	4b2c      	ldr	r3, [pc, #176]	; (8008f50 <__ieee754_pow+0x218>)
 8008e9e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d121      	bne.n	8008eea <__ieee754_pow+0x1b2>
 8008ea6:	f1b9 0f00 	cmp.w	r9, #0
 8008eaa:	da05      	bge.n	8008eb8 <__ieee754_pow+0x180>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	4927      	ldr	r1, [pc, #156]	; (8008f50 <__ieee754_pow+0x218>)
 8008eb4:	f7f7 fcea 	bl	800088c <__aeabi_ddiv>
 8008eb8:	2d00      	cmp	r5, #0
 8008eba:	da9d      	bge.n	8008df8 <__ieee754_pow+0xc0>
 8008ebc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008ec0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008ec4:	ea54 030b 	orrs.w	r3, r4, fp
 8008ec8:	d108      	bne.n	8008edc <__ieee754_pow+0x1a4>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4610      	mov	r0, r2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	f7f7 f9f9 	bl	80002c8 <__aeabi_dsub>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	e7ac      	b.n	8008e36 <__ieee754_pow+0xfe>
 8008edc:	f1bb 0f01 	cmp.w	fp, #1
 8008ee0:	d18a      	bne.n	8008df8 <__ieee754_pow+0xc0>
 8008ee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	e786      	b.n	8008df8 <__ieee754_pow+0xc0>
 8008eea:	0fed      	lsrs	r5, r5, #31
 8008eec:	1e6b      	subs	r3, r5, #1
 8008eee:	930d      	str	r3, [sp, #52]	; 0x34
 8008ef0:	ea5b 0303 	orrs.w	r3, fp, r3
 8008ef4:	d102      	bne.n	8008efc <__ieee754_pow+0x1c4>
 8008ef6:	4632      	mov	r2, r6
 8008ef8:	463b      	mov	r3, r7
 8008efa:	e7e8      	b.n	8008ece <__ieee754_pow+0x196>
 8008efc:	4b16      	ldr	r3, [pc, #88]	; (8008f58 <__ieee754_pow+0x220>)
 8008efe:	4598      	cmp	r8, r3
 8008f00:	f340 80fe 	ble.w	8009100 <__ieee754_pow+0x3c8>
 8008f04:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008f08:	4598      	cmp	r8, r3
 8008f0a:	dd0a      	ble.n	8008f22 <__ieee754_pow+0x1ea>
 8008f0c:	4b0f      	ldr	r3, [pc, #60]	; (8008f4c <__ieee754_pow+0x214>)
 8008f0e:	429c      	cmp	r4, r3
 8008f10:	dc0d      	bgt.n	8008f2e <__ieee754_pow+0x1f6>
 8008f12:	f1b9 0f00 	cmp.w	r9, #0
 8008f16:	f6bf af6d 	bge.w	8008df4 <__ieee754_pow+0xbc>
 8008f1a:	a307      	add	r3, pc, #28	; (adr r3, 8008f38 <__ieee754_pow+0x200>)
 8008f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f20:	e79f      	b.n	8008e62 <__ieee754_pow+0x12a>
 8008f22:	4b0e      	ldr	r3, [pc, #56]	; (8008f5c <__ieee754_pow+0x224>)
 8008f24:	429c      	cmp	r4, r3
 8008f26:	ddf4      	ble.n	8008f12 <__ieee754_pow+0x1da>
 8008f28:	4b09      	ldr	r3, [pc, #36]	; (8008f50 <__ieee754_pow+0x218>)
 8008f2a:	429c      	cmp	r4, r3
 8008f2c:	dd18      	ble.n	8008f60 <__ieee754_pow+0x228>
 8008f2e:	f1b9 0f00 	cmp.w	r9, #0
 8008f32:	dcf2      	bgt.n	8008f1a <__ieee754_pow+0x1e2>
 8008f34:	e75e      	b.n	8008df4 <__ieee754_pow+0xbc>
 8008f36:	bf00      	nop
 8008f38:	8800759c 	.word	0x8800759c
 8008f3c:	7e37e43c 	.word	0x7e37e43c
 8008f40:	7ff00000 	.word	0x7ff00000
 8008f44:	08009d09 	.word	0x08009d09
 8008f48:	433fffff 	.word	0x433fffff
 8008f4c:	3fefffff 	.word	0x3fefffff
 8008f50:	3ff00000 	.word	0x3ff00000
 8008f54:	3fe00000 	.word	0x3fe00000
 8008f58:	41e00000 	.word	0x41e00000
 8008f5c:	3feffffe 	.word	0x3feffffe
 8008f60:	2200      	movs	r2, #0
 8008f62:	4b63      	ldr	r3, [pc, #396]	; (80090f0 <__ieee754_pow+0x3b8>)
 8008f64:	f7f7 f9b0 	bl	80002c8 <__aeabi_dsub>
 8008f68:	a355      	add	r3, pc, #340	; (adr r3, 80090c0 <__ieee754_pow+0x388>)
 8008f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6e:	4604      	mov	r4, r0
 8008f70:	460d      	mov	r5, r1
 8008f72:	f7f7 fb61 	bl	8000638 <__aeabi_dmul>
 8008f76:	a354      	add	r3, pc, #336	; (adr r3, 80090c8 <__ieee754_pow+0x390>)
 8008f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460f      	mov	r7, r1
 8008f80:	4620      	mov	r0, r4
 8008f82:	4629      	mov	r1, r5
 8008f84:	f7f7 fb58 	bl	8000638 <__aeabi_dmul>
 8008f88:	2200      	movs	r2, #0
 8008f8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f8e:	4b59      	ldr	r3, [pc, #356]	; (80090f4 <__ieee754_pow+0x3bc>)
 8008f90:	4620      	mov	r0, r4
 8008f92:	4629      	mov	r1, r5
 8008f94:	f7f7 fb50 	bl	8000638 <__aeabi_dmul>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	a14c      	add	r1, pc, #304	; (adr r1, 80090d0 <__ieee754_pow+0x398>)
 8008f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fa2:	f7f7 f991 	bl	80002c8 <__aeabi_dsub>
 8008fa6:	4622      	mov	r2, r4
 8008fa8:	462b      	mov	r3, r5
 8008faa:	f7f7 fb45 	bl	8000638 <__aeabi_dmul>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	2000      	movs	r0, #0
 8008fb4:	4950      	ldr	r1, [pc, #320]	; (80090f8 <__ieee754_pow+0x3c0>)
 8008fb6:	f7f7 f987 	bl	80002c8 <__aeabi_dsub>
 8008fba:	4622      	mov	r2, r4
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	4689      	mov	r9, r1
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	f7f7 fb37 	bl	8000638 <__aeabi_dmul>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4640      	mov	r0, r8
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	f7f7 fb31 	bl	8000638 <__aeabi_dmul>
 8008fd6:	a340      	add	r3, pc, #256	; (adr r3, 80090d8 <__ieee754_pow+0x3a0>)
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 fb2c 	bl	8000638 <__aeabi_dmul>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fe8:	f7f7 f96e 	bl	80002c8 <__aeabi_dsub>
 8008fec:	4602      	mov	r2, r0
 8008fee:	460b      	mov	r3, r1
 8008ff0:	4604      	mov	r4, r0
 8008ff2:	460d      	mov	r5, r1
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	f7f7 f968 	bl	80002cc <__adddf3>
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009002:	4632      	mov	r2, r6
 8009004:	463b      	mov	r3, r7
 8009006:	f7f7 f95f 	bl	80002c8 <__aeabi_dsub>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4620      	mov	r0, r4
 8009010:	4629      	mov	r1, r5
 8009012:	f7f7 f959 	bl	80002c8 <__aeabi_dsub>
 8009016:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009018:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800901c:	4313      	orrs	r3, r2
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	f040 81eb 	bne.w	80093fc <__ieee754_pow+0x6c4>
 8009026:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80090e0 <__ieee754_pow+0x3a8>
 800902a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800902e:	2400      	movs	r4, #0
 8009030:	4622      	mov	r2, r4
 8009032:	462b      	mov	r3, r5
 8009034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009038:	ed8d 7b02 	vstr	d7, [sp, #8]
 800903c:	f7f7 f944 	bl	80002c8 <__aeabi_dsub>
 8009040:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009044:	f7f7 faf8 	bl	8000638 <__aeabi_dmul>
 8009048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800904c:	4680      	mov	r8, r0
 800904e:	4689      	mov	r9, r1
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	f7f7 faf0 	bl	8000638 <__aeabi_dmul>
 8009058:	4602      	mov	r2, r0
 800905a:	460b      	mov	r3, r1
 800905c:	4640      	mov	r0, r8
 800905e:	4649      	mov	r1, r9
 8009060:	f7f7 f934 	bl	80002cc <__adddf3>
 8009064:	4622      	mov	r2, r4
 8009066:	462b      	mov	r3, r5
 8009068:	4680      	mov	r8, r0
 800906a:	4689      	mov	r9, r1
 800906c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009070:	f7f7 fae2 	bl	8000638 <__aeabi_dmul>
 8009074:	460b      	mov	r3, r1
 8009076:	4604      	mov	r4, r0
 8009078:	460d      	mov	r5, r1
 800907a:	4602      	mov	r2, r0
 800907c:	4649      	mov	r1, r9
 800907e:	4640      	mov	r0, r8
 8009080:	e9cd 4500 	strd	r4, r5, [sp]
 8009084:	f7f7 f922 	bl	80002cc <__adddf3>
 8009088:	4b1c      	ldr	r3, [pc, #112]	; (80090fc <__ieee754_pow+0x3c4>)
 800908a:	4299      	cmp	r1, r3
 800908c:	4606      	mov	r6, r0
 800908e:	460f      	mov	r7, r1
 8009090:	468b      	mov	fp, r1
 8009092:	f340 82f7 	ble.w	8009684 <__ieee754_pow+0x94c>
 8009096:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800909a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800909e:	4303      	orrs	r3, r0
 80090a0:	f000 81ea 	beq.w	8009478 <__ieee754_pow+0x740>
 80090a4:	a310      	add	r3, pc, #64	; (adr r3, 80090e8 <__ieee754_pow+0x3b0>)
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090ae:	f7f7 fac3 	bl	8000638 <__aeabi_dmul>
 80090b2:	a30d      	add	r3, pc, #52	; (adr r3, 80090e8 <__ieee754_pow+0x3b0>)
 80090b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b8:	e6d5      	b.n	8008e66 <__ieee754_pow+0x12e>
 80090ba:	bf00      	nop
 80090bc:	f3af 8000 	nop.w
 80090c0:	60000000 	.word	0x60000000
 80090c4:	3ff71547 	.word	0x3ff71547
 80090c8:	f85ddf44 	.word	0xf85ddf44
 80090cc:	3e54ae0b 	.word	0x3e54ae0b
 80090d0:	55555555 	.word	0x55555555
 80090d4:	3fd55555 	.word	0x3fd55555
 80090d8:	652b82fe 	.word	0x652b82fe
 80090dc:	3ff71547 	.word	0x3ff71547
 80090e0:	00000000 	.word	0x00000000
 80090e4:	bff00000 	.word	0xbff00000
 80090e8:	8800759c 	.word	0x8800759c
 80090ec:	7e37e43c 	.word	0x7e37e43c
 80090f0:	3ff00000 	.word	0x3ff00000
 80090f4:	3fd00000 	.word	0x3fd00000
 80090f8:	3fe00000 	.word	0x3fe00000
 80090fc:	408fffff 	.word	0x408fffff
 8009100:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	da05      	bge.n	8009116 <__ieee754_pow+0x3de>
 800910a:	4bd3      	ldr	r3, [pc, #844]	; (8009458 <__ieee754_pow+0x720>)
 800910c:	f7f7 fa94 	bl	8000638 <__aeabi_dmul>
 8009110:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009114:	460c      	mov	r4, r1
 8009116:	1523      	asrs	r3, r4, #20
 8009118:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800911c:	4413      	add	r3, r2
 800911e:	9309      	str	r3, [sp, #36]	; 0x24
 8009120:	4bce      	ldr	r3, [pc, #824]	; (800945c <__ieee754_pow+0x724>)
 8009122:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009126:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800912a:	429c      	cmp	r4, r3
 800912c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009130:	dd08      	ble.n	8009144 <__ieee754_pow+0x40c>
 8009132:	4bcb      	ldr	r3, [pc, #812]	; (8009460 <__ieee754_pow+0x728>)
 8009134:	429c      	cmp	r4, r3
 8009136:	f340 815e 	ble.w	80093f6 <__ieee754_pow+0x6be>
 800913a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800913c:	3301      	adds	r3, #1
 800913e:	9309      	str	r3, [sp, #36]	; 0x24
 8009140:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009144:	f04f 0a00 	mov.w	sl, #0
 8009148:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800914c:	930c      	str	r3, [sp, #48]	; 0x30
 800914e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009150:	4bc4      	ldr	r3, [pc, #784]	; (8009464 <__ieee754_pow+0x72c>)
 8009152:	4413      	add	r3, r2
 8009154:	ed93 7b00 	vldr	d7, [r3]
 8009158:	4629      	mov	r1, r5
 800915a:	ec53 2b17 	vmov	r2, r3, d7
 800915e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009162:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009166:	f7f7 f8af 	bl	80002c8 <__aeabi_dsub>
 800916a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800916e:	4606      	mov	r6, r0
 8009170:	460f      	mov	r7, r1
 8009172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009176:	f7f7 f8a9 	bl	80002cc <__adddf3>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	2000      	movs	r0, #0
 8009180:	49b9      	ldr	r1, [pc, #740]	; (8009468 <__ieee754_pow+0x730>)
 8009182:	f7f7 fb83 	bl	800088c <__aeabi_ddiv>
 8009186:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800918a:	4602      	mov	r2, r0
 800918c:	460b      	mov	r3, r1
 800918e:	4630      	mov	r0, r6
 8009190:	4639      	mov	r1, r7
 8009192:	f7f7 fa51 	bl	8000638 <__aeabi_dmul>
 8009196:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800919a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800919e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80091a2:	2300      	movs	r3, #0
 80091a4:	9302      	str	r3, [sp, #8]
 80091a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80091aa:	106d      	asrs	r5, r5, #1
 80091ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80091b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80091b4:	2200      	movs	r2, #0
 80091b6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80091ba:	4640      	mov	r0, r8
 80091bc:	4649      	mov	r1, r9
 80091be:	4614      	mov	r4, r2
 80091c0:	461d      	mov	r5, r3
 80091c2:	f7f7 fa39 	bl	8000638 <__aeabi_dmul>
 80091c6:	4602      	mov	r2, r0
 80091c8:	460b      	mov	r3, r1
 80091ca:	4630      	mov	r0, r6
 80091cc:	4639      	mov	r1, r7
 80091ce:	f7f7 f87b 	bl	80002c8 <__aeabi_dsub>
 80091d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80091d6:	4606      	mov	r6, r0
 80091d8:	460f      	mov	r7, r1
 80091da:	4620      	mov	r0, r4
 80091dc:	4629      	mov	r1, r5
 80091de:	f7f7 f873 	bl	80002c8 <__aeabi_dsub>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80091ea:	f7f7 f86d 	bl	80002c8 <__aeabi_dsub>
 80091ee:	4642      	mov	r2, r8
 80091f0:	464b      	mov	r3, r9
 80091f2:	f7f7 fa21 	bl	8000638 <__aeabi_dmul>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	4630      	mov	r0, r6
 80091fc:	4639      	mov	r1, r7
 80091fe:	f7f7 f863 	bl	80002c8 <__aeabi_dsub>
 8009202:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009206:	f7f7 fa17 	bl	8000638 <__aeabi_dmul>
 800920a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800920e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009212:	4610      	mov	r0, r2
 8009214:	4619      	mov	r1, r3
 8009216:	f7f7 fa0f 	bl	8000638 <__aeabi_dmul>
 800921a:	a37b      	add	r3, pc, #492	; (adr r3, 8009408 <__ieee754_pow+0x6d0>)
 800921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009220:	4604      	mov	r4, r0
 8009222:	460d      	mov	r5, r1
 8009224:	f7f7 fa08 	bl	8000638 <__aeabi_dmul>
 8009228:	a379      	add	r3, pc, #484	; (adr r3, 8009410 <__ieee754_pow+0x6d8>)
 800922a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800922e:	f7f7 f84d 	bl	80002cc <__adddf3>
 8009232:	4622      	mov	r2, r4
 8009234:	462b      	mov	r3, r5
 8009236:	f7f7 f9ff 	bl	8000638 <__aeabi_dmul>
 800923a:	a377      	add	r3, pc, #476	; (adr r3, 8009418 <__ieee754_pow+0x6e0>)
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	f7f7 f844 	bl	80002cc <__adddf3>
 8009244:	4622      	mov	r2, r4
 8009246:	462b      	mov	r3, r5
 8009248:	f7f7 f9f6 	bl	8000638 <__aeabi_dmul>
 800924c:	a374      	add	r3, pc, #464	; (adr r3, 8009420 <__ieee754_pow+0x6e8>)
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	f7f7 f83b 	bl	80002cc <__adddf3>
 8009256:	4622      	mov	r2, r4
 8009258:	462b      	mov	r3, r5
 800925a:	f7f7 f9ed 	bl	8000638 <__aeabi_dmul>
 800925e:	a372      	add	r3, pc, #456	; (adr r3, 8009428 <__ieee754_pow+0x6f0>)
 8009260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009264:	f7f7 f832 	bl	80002cc <__adddf3>
 8009268:	4622      	mov	r2, r4
 800926a:	462b      	mov	r3, r5
 800926c:	f7f7 f9e4 	bl	8000638 <__aeabi_dmul>
 8009270:	a36f      	add	r3, pc, #444	; (adr r3, 8009430 <__ieee754_pow+0x6f8>)
 8009272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009276:	f7f7 f829 	bl	80002cc <__adddf3>
 800927a:	4622      	mov	r2, r4
 800927c:	4606      	mov	r6, r0
 800927e:	460f      	mov	r7, r1
 8009280:	462b      	mov	r3, r5
 8009282:	4620      	mov	r0, r4
 8009284:	4629      	mov	r1, r5
 8009286:	f7f7 f9d7 	bl	8000638 <__aeabi_dmul>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	4630      	mov	r0, r6
 8009290:	4639      	mov	r1, r7
 8009292:	f7f7 f9d1 	bl	8000638 <__aeabi_dmul>
 8009296:	4642      	mov	r2, r8
 8009298:	4604      	mov	r4, r0
 800929a:	460d      	mov	r5, r1
 800929c:	464b      	mov	r3, r9
 800929e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092a2:	f7f7 f813 	bl	80002cc <__adddf3>
 80092a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092aa:	f7f7 f9c5 	bl	8000638 <__aeabi_dmul>
 80092ae:	4622      	mov	r2, r4
 80092b0:	462b      	mov	r3, r5
 80092b2:	f7f7 f80b 	bl	80002cc <__adddf3>
 80092b6:	4642      	mov	r2, r8
 80092b8:	4606      	mov	r6, r0
 80092ba:	460f      	mov	r7, r1
 80092bc:	464b      	mov	r3, r9
 80092be:	4640      	mov	r0, r8
 80092c0:	4649      	mov	r1, r9
 80092c2:	f7f7 f9b9 	bl	8000638 <__aeabi_dmul>
 80092c6:	2200      	movs	r2, #0
 80092c8:	4b68      	ldr	r3, [pc, #416]	; (800946c <__ieee754_pow+0x734>)
 80092ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80092ce:	f7f6 fffd 	bl	80002cc <__adddf3>
 80092d2:	4632      	mov	r2, r6
 80092d4:	463b      	mov	r3, r7
 80092d6:	f7f6 fff9 	bl	80002cc <__adddf3>
 80092da:	9802      	ldr	r0, [sp, #8]
 80092dc:	460d      	mov	r5, r1
 80092de:	4604      	mov	r4, r0
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4640      	mov	r0, r8
 80092e6:	4649      	mov	r1, r9
 80092e8:	f7f7 f9a6 	bl	8000638 <__aeabi_dmul>
 80092ec:	2200      	movs	r2, #0
 80092ee:	4680      	mov	r8, r0
 80092f0:	4689      	mov	r9, r1
 80092f2:	4b5e      	ldr	r3, [pc, #376]	; (800946c <__ieee754_pow+0x734>)
 80092f4:	4620      	mov	r0, r4
 80092f6:	4629      	mov	r1, r5
 80092f8:	f7f6 ffe6 	bl	80002c8 <__aeabi_dsub>
 80092fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009300:	f7f6 ffe2 	bl	80002c8 <__aeabi_dsub>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f6 ffdc 	bl	80002c8 <__aeabi_dsub>
 8009310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009314:	f7f7 f990 	bl	8000638 <__aeabi_dmul>
 8009318:	4622      	mov	r2, r4
 800931a:	4606      	mov	r6, r0
 800931c:	460f      	mov	r7, r1
 800931e:	462b      	mov	r3, r5
 8009320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009324:	f7f7 f988 	bl	8000638 <__aeabi_dmul>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4630      	mov	r0, r6
 800932e:	4639      	mov	r1, r7
 8009330:	f7f6 ffcc 	bl	80002cc <__adddf3>
 8009334:	4606      	mov	r6, r0
 8009336:	460f      	mov	r7, r1
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4640      	mov	r0, r8
 800933e:	4649      	mov	r1, r9
 8009340:	f7f6 ffc4 	bl	80002cc <__adddf3>
 8009344:	9802      	ldr	r0, [sp, #8]
 8009346:	a33c      	add	r3, pc, #240	; (adr r3, 8009438 <__ieee754_pow+0x700>)
 8009348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934c:	4604      	mov	r4, r0
 800934e:	460d      	mov	r5, r1
 8009350:	f7f7 f972 	bl	8000638 <__aeabi_dmul>
 8009354:	4642      	mov	r2, r8
 8009356:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800935a:	464b      	mov	r3, r9
 800935c:	4620      	mov	r0, r4
 800935e:	4629      	mov	r1, r5
 8009360:	f7f6 ffb2 	bl	80002c8 <__aeabi_dsub>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	4630      	mov	r0, r6
 800936a:	4639      	mov	r1, r7
 800936c:	f7f6 ffac 	bl	80002c8 <__aeabi_dsub>
 8009370:	a333      	add	r3, pc, #204	; (adr r3, 8009440 <__ieee754_pow+0x708>)
 8009372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009376:	f7f7 f95f 	bl	8000638 <__aeabi_dmul>
 800937a:	a333      	add	r3, pc, #204	; (adr r3, 8009448 <__ieee754_pow+0x710>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	4606      	mov	r6, r0
 8009382:	460f      	mov	r7, r1
 8009384:	4620      	mov	r0, r4
 8009386:	4629      	mov	r1, r5
 8009388:	f7f7 f956 	bl	8000638 <__aeabi_dmul>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4630      	mov	r0, r6
 8009392:	4639      	mov	r1, r7
 8009394:	f7f6 ff9a 	bl	80002cc <__adddf3>
 8009398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800939a:	4b35      	ldr	r3, [pc, #212]	; (8009470 <__ieee754_pow+0x738>)
 800939c:	4413      	add	r3, r2
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f7f6 ff93 	bl	80002cc <__adddf3>
 80093a6:	4604      	mov	r4, r0
 80093a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093aa:	460d      	mov	r5, r1
 80093ac:	f7f7 f8da 	bl	8000564 <__aeabi_i2d>
 80093b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093b2:	4b30      	ldr	r3, [pc, #192]	; (8009474 <__ieee754_pow+0x73c>)
 80093b4:	4413      	add	r3, r2
 80093b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093ba:	4606      	mov	r6, r0
 80093bc:	460f      	mov	r7, r1
 80093be:	4622      	mov	r2, r4
 80093c0:	462b      	mov	r3, r5
 80093c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093c6:	f7f6 ff81 	bl	80002cc <__adddf3>
 80093ca:	4642      	mov	r2, r8
 80093cc:	464b      	mov	r3, r9
 80093ce:	f7f6 ff7d 	bl	80002cc <__adddf3>
 80093d2:	4632      	mov	r2, r6
 80093d4:	463b      	mov	r3, r7
 80093d6:	f7f6 ff79 	bl	80002cc <__adddf3>
 80093da:	9802      	ldr	r0, [sp, #8]
 80093dc:	4632      	mov	r2, r6
 80093de:	463b      	mov	r3, r7
 80093e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093e4:	f7f6 ff70 	bl	80002c8 <__aeabi_dsub>
 80093e8:	4642      	mov	r2, r8
 80093ea:	464b      	mov	r3, r9
 80093ec:	f7f6 ff6c 	bl	80002c8 <__aeabi_dsub>
 80093f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093f4:	e607      	b.n	8009006 <__ieee754_pow+0x2ce>
 80093f6:	f04f 0a01 	mov.w	sl, #1
 80093fa:	e6a5      	b.n	8009148 <__ieee754_pow+0x410>
 80093fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009450 <__ieee754_pow+0x718>
 8009400:	e613      	b.n	800902a <__ieee754_pow+0x2f2>
 8009402:	bf00      	nop
 8009404:	f3af 8000 	nop.w
 8009408:	4a454eef 	.word	0x4a454eef
 800940c:	3fca7e28 	.word	0x3fca7e28
 8009410:	93c9db65 	.word	0x93c9db65
 8009414:	3fcd864a 	.word	0x3fcd864a
 8009418:	a91d4101 	.word	0xa91d4101
 800941c:	3fd17460 	.word	0x3fd17460
 8009420:	518f264d 	.word	0x518f264d
 8009424:	3fd55555 	.word	0x3fd55555
 8009428:	db6fabff 	.word	0xdb6fabff
 800942c:	3fdb6db6 	.word	0x3fdb6db6
 8009430:	33333303 	.word	0x33333303
 8009434:	3fe33333 	.word	0x3fe33333
 8009438:	e0000000 	.word	0xe0000000
 800943c:	3feec709 	.word	0x3feec709
 8009440:	dc3a03fd 	.word	0xdc3a03fd
 8009444:	3feec709 	.word	0x3feec709
 8009448:	145b01f5 	.word	0x145b01f5
 800944c:	be3e2fe0 	.word	0xbe3e2fe0
 8009450:	00000000 	.word	0x00000000
 8009454:	3ff00000 	.word	0x3ff00000
 8009458:	43400000 	.word	0x43400000
 800945c:	0003988e 	.word	0x0003988e
 8009460:	000bb679 	.word	0x000bb679
 8009464:	08009e28 	.word	0x08009e28
 8009468:	3ff00000 	.word	0x3ff00000
 800946c:	40080000 	.word	0x40080000
 8009470:	08009e48 	.word	0x08009e48
 8009474:	08009e38 	.word	0x08009e38
 8009478:	a3b4      	add	r3, pc, #720	; (adr r3, 800974c <__ieee754_pow+0xa14>)
 800947a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947e:	4640      	mov	r0, r8
 8009480:	4649      	mov	r1, r9
 8009482:	f7f6 ff23 	bl	80002cc <__adddf3>
 8009486:	4622      	mov	r2, r4
 8009488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800948c:	462b      	mov	r3, r5
 800948e:	4630      	mov	r0, r6
 8009490:	4639      	mov	r1, r7
 8009492:	f7f6 ff19 	bl	80002c8 <__aeabi_dsub>
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800949e:	f7f7 fb5b 	bl	8000b58 <__aeabi_dcmpgt>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	f47f adfe 	bne.w	80090a4 <__ieee754_pow+0x36c>
 80094a8:	4aa3      	ldr	r2, [pc, #652]	; (8009738 <__ieee754_pow+0xa00>)
 80094aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094ae:	4293      	cmp	r3, r2
 80094b0:	f340 810a 	ble.w	80096c8 <__ieee754_pow+0x990>
 80094b4:	151b      	asrs	r3, r3, #20
 80094b6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80094ba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80094be:	fa4a f303 	asr.w	r3, sl, r3
 80094c2:	445b      	add	r3, fp
 80094c4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80094c8:	4e9c      	ldr	r6, [pc, #624]	; (800973c <__ieee754_pow+0xa04>)
 80094ca:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80094ce:	4116      	asrs	r6, r2
 80094d0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80094d4:	2000      	movs	r0, #0
 80094d6:	ea23 0106 	bic.w	r1, r3, r6
 80094da:	f1c2 0214 	rsb	r2, r2, #20
 80094de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80094e2:	fa4a fa02 	asr.w	sl, sl, r2
 80094e6:	f1bb 0f00 	cmp.w	fp, #0
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	4620      	mov	r0, r4
 80094f0:	4629      	mov	r1, r5
 80094f2:	bfb8      	it	lt
 80094f4:	f1ca 0a00 	rsblt	sl, sl, #0
 80094f8:	f7f6 fee6 	bl	80002c8 <__aeabi_dsub>
 80094fc:	e9cd 0100 	strd	r0, r1, [sp]
 8009500:	4642      	mov	r2, r8
 8009502:	464b      	mov	r3, r9
 8009504:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009508:	f7f6 fee0 	bl	80002cc <__adddf3>
 800950c:	2000      	movs	r0, #0
 800950e:	a378      	add	r3, pc, #480	; (adr r3, 80096f0 <__ieee754_pow+0x9b8>)
 8009510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009514:	4604      	mov	r4, r0
 8009516:	460d      	mov	r5, r1
 8009518:	f7f7 f88e 	bl	8000638 <__aeabi_dmul>
 800951c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009520:	4606      	mov	r6, r0
 8009522:	460f      	mov	r7, r1
 8009524:	4620      	mov	r0, r4
 8009526:	4629      	mov	r1, r5
 8009528:	f7f6 fece 	bl	80002c8 <__aeabi_dsub>
 800952c:	4602      	mov	r2, r0
 800952e:	460b      	mov	r3, r1
 8009530:	4640      	mov	r0, r8
 8009532:	4649      	mov	r1, r9
 8009534:	f7f6 fec8 	bl	80002c8 <__aeabi_dsub>
 8009538:	a36f      	add	r3, pc, #444	; (adr r3, 80096f8 <__ieee754_pow+0x9c0>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f7 f87b 	bl	8000638 <__aeabi_dmul>
 8009542:	a36f      	add	r3, pc, #444	; (adr r3, 8009700 <__ieee754_pow+0x9c8>)
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	4680      	mov	r8, r0
 800954a:	4689      	mov	r9, r1
 800954c:	4620      	mov	r0, r4
 800954e:	4629      	mov	r1, r5
 8009550:	f7f7 f872 	bl	8000638 <__aeabi_dmul>
 8009554:	4602      	mov	r2, r0
 8009556:	460b      	mov	r3, r1
 8009558:	4640      	mov	r0, r8
 800955a:	4649      	mov	r1, r9
 800955c:	f7f6 feb6 	bl	80002cc <__adddf3>
 8009560:	4604      	mov	r4, r0
 8009562:	460d      	mov	r5, r1
 8009564:	4602      	mov	r2, r0
 8009566:	460b      	mov	r3, r1
 8009568:	4630      	mov	r0, r6
 800956a:	4639      	mov	r1, r7
 800956c:	f7f6 feae 	bl	80002cc <__adddf3>
 8009570:	4632      	mov	r2, r6
 8009572:	463b      	mov	r3, r7
 8009574:	4680      	mov	r8, r0
 8009576:	4689      	mov	r9, r1
 8009578:	f7f6 fea6 	bl	80002c8 <__aeabi_dsub>
 800957c:	4602      	mov	r2, r0
 800957e:	460b      	mov	r3, r1
 8009580:	4620      	mov	r0, r4
 8009582:	4629      	mov	r1, r5
 8009584:	f7f6 fea0 	bl	80002c8 <__aeabi_dsub>
 8009588:	4642      	mov	r2, r8
 800958a:	4606      	mov	r6, r0
 800958c:	460f      	mov	r7, r1
 800958e:	464b      	mov	r3, r9
 8009590:	4640      	mov	r0, r8
 8009592:	4649      	mov	r1, r9
 8009594:	f7f7 f850 	bl	8000638 <__aeabi_dmul>
 8009598:	a35b      	add	r3, pc, #364	; (adr r3, 8009708 <__ieee754_pow+0x9d0>)
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	4604      	mov	r4, r0
 80095a0:	460d      	mov	r5, r1
 80095a2:	f7f7 f849 	bl	8000638 <__aeabi_dmul>
 80095a6:	a35a      	add	r3, pc, #360	; (adr r3, 8009710 <__ieee754_pow+0x9d8>)
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f7f6 fe8c 	bl	80002c8 <__aeabi_dsub>
 80095b0:	4622      	mov	r2, r4
 80095b2:	462b      	mov	r3, r5
 80095b4:	f7f7 f840 	bl	8000638 <__aeabi_dmul>
 80095b8:	a357      	add	r3, pc, #348	; (adr r3, 8009718 <__ieee754_pow+0x9e0>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095be:	f7f6 fe85 	bl	80002cc <__adddf3>
 80095c2:	4622      	mov	r2, r4
 80095c4:	462b      	mov	r3, r5
 80095c6:	f7f7 f837 	bl	8000638 <__aeabi_dmul>
 80095ca:	a355      	add	r3, pc, #340	; (adr r3, 8009720 <__ieee754_pow+0x9e8>)
 80095cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d0:	f7f6 fe7a 	bl	80002c8 <__aeabi_dsub>
 80095d4:	4622      	mov	r2, r4
 80095d6:	462b      	mov	r3, r5
 80095d8:	f7f7 f82e 	bl	8000638 <__aeabi_dmul>
 80095dc:	a352      	add	r3, pc, #328	; (adr r3, 8009728 <__ieee754_pow+0x9f0>)
 80095de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e2:	f7f6 fe73 	bl	80002cc <__adddf3>
 80095e6:	4622      	mov	r2, r4
 80095e8:	462b      	mov	r3, r5
 80095ea:	f7f7 f825 	bl	8000638 <__aeabi_dmul>
 80095ee:	4602      	mov	r2, r0
 80095f0:	460b      	mov	r3, r1
 80095f2:	4640      	mov	r0, r8
 80095f4:	4649      	mov	r1, r9
 80095f6:	f7f6 fe67 	bl	80002c8 <__aeabi_dsub>
 80095fa:	4604      	mov	r4, r0
 80095fc:	460d      	mov	r5, r1
 80095fe:	4602      	mov	r2, r0
 8009600:	460b      	mov	r3, r1
 8009602:	4640      	mov	r0, r8
 8009604:	4649      	mov	r1, r9
 8009606:	f7f7 f817 	bl	8000638 <__aeabi_dmul>
 800960a:	2200      	movs	r2, #0
 800960c:	e9cd 0100 	strd	r0, r1, [sp]
 8009610:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009614:	4620      	mov	r0, r4
 8009616:	4629      	mov	r1, r5
 8009618:	f7f6 fe56 	bl	80002c8 <__aeabi_dsub>
 800961c:	4602      	mov	r2, r0
 800961e:	460b      	mov	r3, r1
 8009620:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009624:	f7f7 f932 	bl	800088c <__aeabi_ddiv>
 8009628:	4632      	mov	r2, r6
 800962a:	4604      	mov	r4, r0
 800962c:	460d      	mov	r5, r1
 800962e:	463b      	mov	r3, r7
 8009630:	4640      	mov	r0, r8
 8009632:	4649      	mov	r1, r9
 8009634:	f7f7 f800 	bl	8000638 <__aeabi_dmul>
 8009638:	4632      	mov	r2, r6
 800963a:	463b      	mov	r3, r7
 800963c:	f7f6 fe46 	bl	80002cc <__adddf3>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4620      	mov	r0, r4
 8009646:	4629      	mov	r1, r5
 8009648:	f7f6 fe3e 	bl	80002c8 <__aeabi_dsub>
 800964c:	4642      	mov	r2, r8
 800964e:	464b      	mov	r3, r9
 8009650:	f7f6 fe3a 	bl	80002c8 <__aeabi_dsub>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	2000      	movs	r0, #0
 800965a:	4939      	ldr	r1, [pc, #228]	; (8009740 <__ieee754_pow+0xa08>)
 800965c:	f7f6 fe34 	bl	80002c8 <__aeabi_dsub>
 8009660:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009664:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009668:	4602      	mov	r2, r0
 800966a:	460b      	mov	r3, r1
 800966c:	da2f      	bge.n	80096ce <__ieee754_pow+0x996>
 800966e:	4650      	mov	r0, sl
 8009670:	ec43 2b10 	vmov	d0, r2, r3
 8009674:	f000 f9c0 	bl	80099f8 <scalbn>
 8009678:	ec51 0b10 	vmov	r0, r1, d0
 800967c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009680:	f7ff bbf1 	b.w	8008e66 <__ieee754_pow+0x12e>
 8009684:	4b2f      	ldr	r3, [pc, #188]	; (8009744 <__ieee754_pow+0xa0c>)
 8009686:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800968a:	429e      	cmp	r6, r3
 800968c:	f77f af0c 	ble.w	80094a8 <__ieee754_pow+0x770>
 8009690:	4b2d      	ldr	r3, [pc, #180]	; (8009748 <__ieee754_pow+0xa10>)
 8009692:	440b      	add	r3, r1
 8009694:	4303      	orrs	r3, r0
 8009696:	d00b      	beq.n	80096b0 <__ieee754_pow+0x978>
 8009698:	a325      	add	r3, pc, #148	; (adr r3, 8009730 <__ieee754_pow+0x9f8>)
 800969a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096a2:	f7f6 ffc9 	bl	8000638 <__aeabi_dmul>
 80096a6:	a322      	add	r3, pc, #136	; (adr r3, 8009730 <__ieee754_pow+0x9f8>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7ff bbdb 	b.w	8008e66 <__ieee754_pow+0x12e>
 80096b0:	4622      	mov	r2, r4
 80096b2:	462b      	mov	r3, r5
 80096b4:	f7f6 fe08 	bl	80002c8 <__aeabi_dsub>
 80096b8:	4642      	mov	r2, r8
 80096ba:	464b      	mov	r3, r9
 80096bc:	f7f7 fa42 	bl	8000b44 <__aeabi_dcmpge>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	f43f aef1 	beq.w	80094a8 <__ieee754_pow+0x770>
 80096c6:	e7e7      	b.n	8009698 <__ieee754_pow+0x960>
 80096c8:	f04f 0a00 	mov.w	sl, #0
 80096cc:	e718      	b.n	8009500 <__ieee754_pow+0x7c8>
 80096ce:	4621      	mov	r1, r4
 80096d0:	e7d4      	b.n	800967c <__ieee754_pow+0x944>
 80096d2:	2000      	movs	r0, #0
 80096d4:	491a      	ldr	r1, [pc, #104]	; (8009740 <__ieee754_pow+0xa08>)
 80096d6:	f7ff bb8f 	b.w	8008df8 <__ieee754_pow+0xc0>
 80096da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096de:	f7ff bb8b 	b.w	8008df8 <__ieee754_pow+0xc0>
 80096e2:	4630      	mov	r0, r6
 80096e4:	4639      	mov	r1, r7
 80096e6:	f7ff bb87 	b.w	8008df8 <__ieee754_pow+0xc0>
 80096ea:	4693      	mov	fp, r2
 80096ec:	f7ff bb98 	b.w	8008e20 <__ieee754_pow+0xe8>
 80096f0:	00000000 	.word	0x00000000
 80096f4:	3fe62e43 	.word	0x3fe62e43
 80096f8:	fefa39ef 	.word	0xfefa39ef
 80096fc:	3fe62e42 	.word	0x3fe62e42
 8009700:	0ca86c39 	.word	0x0ca86c39
 8009704:	be205c61 	.word	0xbe205c61
 8009708:	72bea4d0 	.word	0x72bea4d0
 800970c:	3e663769 	.word	0x3e663769
 8009710:	c5d26bf1 	.word	0xc5d26bf1
 8009714:	3ebbbd41 	.word	0x3ebbbd41
 8009718:	af25de2c 	.word	0xaf25de2c
 800971c:	3f11566a 	.word	0x3f11566a
 8009720:	16bebd93 	.word	0x16bebd93
 8009724:	3f66c16c 	.word	0x3f66c16c
 8009728:	5555553e 	.word	0x5555553e
 800972c:	3fc55555 	.word	0x3fc55555
 8009730:	c2f8f359 	.word	0xc2f8f359
 8009734:	01a56e1f 	.word	0x01a56e1f
 8009738:	3fe00000 	.word	0x3fe00000
 800973c:	000fffff 	.word	0x000fffff
 8009740:	3ff00000 	.word	0x3ff00000
 8009744:	4090cbff 	.word	0x4090cbff
 8009748:	3f6f3400 	.word	0x3f6f3400
 800974c:	652b82fe 	.word	0x652b82fe
 8009750:	3c971547 	.word	0x3c971547

08009754 <__ieee754_sqrt>:
 8009754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009758:	4955      	ldr	r1, [pc, #340]	; (80098b0 <__ieee754_sqrt+0x15c>)
 800975a:	ec55 4b10 	vmov	r4, r5, d0
 800975e:	43a9      	bics	r1, r5
 8009760:	462b      	mov	r3, r5
 8009762:	462a      	mov	r2, r5
 8009764:	d112      	bne.n	800978c <__ieee754_sqrt+0x38>
 8009766:	ee10 2a10 	vmov	r2, s0
 800976a:	ee10 0a10 	vmov	r0, s0
 800976e:	4629      	mov	r1, r5
 8009770:	f7f6 ff62 	bl	8000638 <__aeabi_dmul>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	4620      	mov	r0, r4
 800977a:	4629      	mov	r1, r5
 800977c:	f7f6 fda6 	bl	80002cc <__adddf3>
 8009780:	4604      	mov	r4, r0
 8009782:	460d      	mov	r5, r1
 8009784:	ec45 4b10 	vmov	d0, r4, r5
 8009788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800978c:	2d00      	cmp	r5, #0
 800978e:	ee10 0a10 	vmov	r0, s0
 8009792:	4621      	mov	r1, r4
 8009794:	dc0f      	bgt.n	80097b6 <__ieee754_sqrt+0x62>
 8009796:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800979a:	4330      	orrs	r0, r6
 800979c:	d0f2      	beq.n	8009784 <__ieee754_sqrt+0x30>
 800979e:	b155      	cbz	r5, 80097b6 <__ieee754_sqrt+0x62>
 80097a0:	ee10 2a10 	vmov	r2, s0
 80097a4:	4620      	mov	r0, r4
 80097a6:	4629      	mov	r1, r5
 80097a8:	f7f6 fd8e 	bl	80002c8 <__aeabi_dsub>
 80097ac:	4602      	mov	r2, r0
 80097ae:	460b      	mov	r3, r1
 80097b0:	f7f7 f86c 	bl	800088c <__aeabi_ddiv>
 80097b4:	e7e4      	b.n	8009780 <__ieee754_sqrt+0x2c>
 80097b6:	151b      	asrs	r3, r3, #20
 80097b8:	d073      	beq.n	80098a2 <__ieee754_sqrt+0x14e>
 80097ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80097be:	07dd      	lsls	r5, r3, #31
 80097c0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80097c4:	bf48      	it	mi
 80097c6:	0fc8      	lsrmi	r0, r1, #31
 80097c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80097cc:	bf44      	itt	mi
 80097ce:	0049      	lslmi	r1, r1, #1
 80097d0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80097d4:	2500      	movs	r5, #0
 80097d6:	1058      	asrs	r0, r3, #1
 80097d8:	0fcb      	lsrs	r3, r1, #31
 80097da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80097de:	0049      	lsls	r1, r1, #1
 80097e0:	2316      	movs	r3, #22
 80097e2:	462c      	mov	r4, r5
 80097e4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80097e8:	19a7      	adds	r7, r4, r6
 80097ea:	4297      	cmp	r7, r2
 80097ec:	bfde      	ittt	le
 80097ee:	19bc      	addle	r4, r7, r6
 80097f0:	1bd2      	suble	r2, r2, r7
 80097f2:	19ad      	addle	r5, r5, r6
 80097f4:	0fcf      	lsrs	r7, r1, #31
 80097f6:	3b01      	subs	r3, #1
 80097f8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80097fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009800:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009804:	d1f0      	bne.n	80097e8 <__ieee754_sqrt+0x94>
 8009806:	f04f 0c20 	mov.w	ip, #32
 800980a:	469e      	mov	lr, r3
 800980c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009810:	42a2      	cmp	r2, r4
 8009812:	eb06 070e 	add.w	r7, r6, lr
 8009816:	dc02      	bgt.n	800981e <__ieee754_sqrt+0xca>
 8009818:	d112      	bne.n	8009840 <__ieee754_sqrt+0xec>
 800981a:	428f      	cmp	r7, r1
 800981c:	d810      	bhi.n	8009840 <__ieee754_sqrt+0xec>
 800981e:	2f00      	cmp	r7, #0
 8009820:	eb07 0e06 	add.w	lr, r7, r6
 8009824:	da42      	bge.n	80098ac <__ieee754_sqrt+0x158>
 8009826:	f1be 0f00 	cmp.w	lr, #0
 800982a:	db3f      	blt.n	80098ac <__ieee754_sqrt+0x158>
 800982c:	f104 0801 	add.w	r8, r4, #1
 8009830:	1b12      	subs	r2, r2, r4
 8009832:	428f      	cmp	r7, r1
 8009834:	bf88      	it	hi
 8009836:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800983a:	1bc9      	subs	r1, r1, r7
 800983c:	4433      	add	r3, r6
 800983e:	4644      	mov	r4, r8
 8009840:	0052      	lsls	r2, r2, #1
 8009842:	f1bc 0c01 	subs.w	ip, ip, #1
 8009846:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800984a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800984e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009852:	d1dd      	bne.n	8009810 <__ieee754_sqrt+0xbc>
 8009854:	430a      	orrs	r2, r1
 8009856:	d006      	beq.n	8009866 <__ieee754_sqrt+0x112>
 8009858:	1c5c      	adds	r4, r3, #1
 800985a:	bf13      	iteet	ne
 800985c:	3301      	addne	r3, #1
 800985e:	3501      	addeq	r5, #1
 8009860:	4663      	moveq	r3, ip
 8009862:	f023 0301 	bicne.w	r3, r3, #1
 8009866:	106a      	asrs	r2, r5, #1
 8009868:	085b      	lsrs	r3, r3, #1
 800986a:	07e9      	lsls	r1, r5, #31
 800986c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8009870:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009874:	bf48      	it	mi
 8009876:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800987a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800987e:	461c      	mov	r4, r3
 8009880:	e780      	b.n	8009784 <__ieee754_sqrt+0x30>
 8009882:	0aca      	lsrs	r2, r1, #11
 8009884:	3815      	subs	r0, #21
 8009886:	0549      	lsls	r1, r1, #21
 8009888:	2a00      	cmp	r2, #0
 800988a:	d0fa      	beq.n	8009882 <__ieee754_sqrt+0x12e>
 800988c:	02d6      	lsls	r6, r2, #11
 800988e:	d50a      	bpl.n	80098a6 <__ieee754_sqrt+0x152>
 8009890:	f1c3 0420 	rsb	r4, r3, #32
 8009894:	fa21 f404 	lsr.w	r4, r1, r4
 8009898:	1e5d      	subs	r5, r3, #1
 800989a:	4099      	lsls	r1, r3
 800989c:	4322      	orrs	r2, r4
 800989e:	1b43      	subs	r3, r0, r5
 80098a0:	e78b      	b.n	80097ba <__ieee754_sqrt+0x66>
 80098a2:	4618      	mov	r0, r3
 80098a4:	e7f0      	b.n	8009888 <__ieee754_sqrt+0x134>
 80098a6:	0052      	lsls	r2, r2, #1
 80098a8:	3301      	adds	r3, #1
 80098aa:	e7ef      	b.n	800988c <__ieee754_sqrt+0x138>
 80098ac:	46a0      	mov	r8, r4
 80098ae:	e7bf      	b.n	8009830 <__ieee754_sqrt+0xdc>
 80098b0:	7ff00000 	.word	0x7ff00000

080098b4 <fabs>:
 80098b4:	ec51 0b10 	vmov	r0, r1, d0
 80098b8:	ee10 2a10 	vmov	r2, s0
 80098bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80098c0:	ec43 2b10 	vmov	d0, r2, r3
 80098c4:	4770      	bx	lr

080098c6 <finite>:
 80098c6:	ee10 3a90 	vmov	r3, s1
 80098ca:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80098ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80098d2:	0fc0      	lsrs	r0, r0, #31
 80098d4:	4770      	bx	lr

080098d6 <matherr>:
 80098d6:	2000      	movs	r0, #0
 80098d8:	4770      	bx	lr
 80098da:	0000      	movs	r0, r0
 80098dc:	0000      	movs	r0, r0
	...

080098e0 <nan>:
 80098e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80098e8 <nan+0x8>
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	00000000 	.word	0x00000000
 80098ec:	7ff80000 	.word	0x7ff80000

080098f0 <rint>:
 80098f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098f2:	ec51 0b10 	vmov	r0, r1, d0
 80098f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80098fa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80098fe:	2e13      	cmp	r6, #19
 8009900:	460b      	mov	r3, r1
 8009902:	ee10 4a10 	vmov	r4, s0
 8009906:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800990a:	dc56      	bgt.n	80099ba <rint+0xca>
 800990c:	2e00      	cmp	r6, #0
 800990e:	da2b      	bge.n	8009968 <rint+0x78>
 8009910:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009914:	4302      	orrs	r2, r0
 8009916:	d023      	beq.n	8009960 <rint+0x70>
 8009918:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800991c:	4302      	orrs	r2, r0
 800991e:	4254      	negs	r4, r2
 8009920:	4314      	orrs	r4, r2
 8009922:	0c4b      	lsrs	r3, r1, #17
 8009924:	0b24      	lsrs	r4, r4, #12
 8009926:	045b      	lsls	r3, r3, #17
 8009928:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800992c:	ea44 0103 	orr.w	r1, r4, r3
 8009930:	460b      	mov	r3, r1
 8009932:	492f      	ldr	r1, [pc, #188]	; (80099f0 <rint+0x100>)
 8009934:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8009938:	e9d1 6700 	ldrd	r6, r7, [r1]
 800993c:	4602      	mov	r2, r0
 800993e:	4639      	mov	r1, r7
 8009940:	4630      	mov	r0, r6
 8009942:	f7f6 fcc3 	bl	80002cc <__adddf3>
 8009946:	e9cd 0100 	strd	r0, r1, [sp]
 800994a:	463b      	mov	r3, r7
 800994c:	4632      	mov	r2, r6
 800994e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009952:	f7f6 fcb9 	bl	80002c8 <__aeabi_dsub>
 8009956:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800995a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800995e:	4639      	mov	r1, r7
 8009960:	ec41 0b10 	vmov	d0, r0, r1
 8009964:	b003      	add	sp, #12
 8009966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009968:	4a22      	ldr	r2, [pc, #136]	; (80099f4 <rint+0x104>)
 800996a:	4132      	asrs	r2, r6
 800996c:	ea01 0702 	and.w	r7, r1, r2
 8009970:	4307      	orrs	r7, r0
 8009972:	d0f5      	beq.n	8009960 <rint+0x70>
 8009974:	0852      	lsrs	r2, r2, #1
 8009976:	4011      	ands	r1, r2
 8009978:	430c      	orrs	r4, r1
 800997a:	d00b      	beq.n	8009994 <rint+0xa4>
 800997c:	ea23 0202 	bic.w	r2, r3, r2
 8009980:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009984:	2e13      	cmp	r6, #19
 8009986:	fa43 f306 	asr.w	r3, r3, r6
 800998a:	bf0c      	ite	eq
 800998c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009990:	2400      	movne	r4, #0
 8009992:	4313      	orrs	r3, r2
 8009994:	4916      	ldr	r1, [pc, #88]	; (80099f0 <rint+0x100>)
 8009996:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800999a:	4622      	mov	r2, r4
 800999c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099a0:	4620      	mov	r0, r4
 80099a2:	4629      	mov	r1, r5
 80099a4:	f7f6 fc92 	bl	80002cc <__adddf3>
 80099a8:	e9cd 0100 	strd	r0, r1, [sp]
 80099ac:	4622      	mov	r2, r4
 80099ae:	462b      	mov	r3, r5
 80099b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099b4:	f7f6 fc88 	bl	80002c8 <__aeabi_dsub>
 80099b8:	e7d2      	b.n	8009960 <rint+0x70>
 80099ba:	2e33      	cmp	r6, #51	; 0x33
 80099bc:	dd07      	ble.n	80099ce <rint+0xde>
 80099be:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80099c2:	d1cd      	bne.n	8009960 <rint+0x70>
 80099c4:	ee10 2a10 	vmov	r2, s0
 80099c8:	f7f6 fc80 	bl	80002cc <__adddf3>
 80099cc:	e7c8      	b.n	8009960 <rint+0x70>
 80099ce:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80099d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099d6:	40f2      	lsrs	r2, r6
 80099d8:	4210      	tst	r0, r2
 80099da:	d0c1      	beq.n	8009960 <rint+0x70>
 80099dc:	0852      	lsrs	r2, r2, #1
 80099de:	4210      	tst	r0, r2
 80099e0:	bf1f      	itttt	ne
 80099e2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80099e6:	ea20 0202 	bicne.w	r2, r0, r2
 80099ea:	4134      	asrne	r4, r6
 80099ec:	4314      	orrne	r4, r2
 80099ee:	e7d1      	b.n	8009994 <rint+0xa4>
 80099f0:	08009e58 	.word	0x08009e58
 80099f4:	000fffff 	.word	0x000fffff

080099f8 <scalbn>:
 80099f8:	b570      	push	{r4, r5, r6, lr}
 80099fa:	ec55 4b10 	vmov	r4, r5, d0
 80099fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009a02:	4606      	mov	r6, r0
 8009a04:	462b      	mov	r3, r5
 8009a06:	b9aa      	cbnz	r2, 8009a34 <scalbn+0x3c>
 8009a08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009a0c:	4323      	orrs	r3, r4
 8009a0e:	d03b      	beq.n	8009a88 <scalbn+0x90>
 8009a10:	4b31      	ldr	r3, [pc, #196]	; (8009ad8 <scalbn+0xe0>)
 8009a12:	4629      	mov	r1, r5
 8009a14:	2200      	movs	r2, #0
 8009a16:	ee10 0a10 	vmov	r0, s0
 8009a1a:	f7f6 fe0d 	bl	8000638 <__aeabi_dmul>
 8009a1e:	4b2f      	ldr	r3, [pc, #188]	; (8009adc <scalbn+0xe4>)
 8009a20:	429e      	cmp	r6, r3
 8009a22:	4604      	mov	r4, r0
 8009a24:	460d      	mov	r5, r1
 8009a26:	da12      	bge.n	8009a4e <scalbn+0x56>
 8009a28:	a327      	add	r3, pc, #156	; (adr r3, 8009ac8 <scalbn+0xd0>)
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	f7f6 fe03 	bl	8000638 <__aeabi_dmul>
 8009a32:	e009      	b.n	8009a48 <scalbn+0x50>
 8009a34:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009a38:	428a      	cmp	r2, r1
 8009a3a:	d10c      	bne.n	8009a56 <scalbn+0x5e>
 8009a3c:	ee10 2a10 	vmov	r2, s0
 8009a40:	4620      	mov	r0, r4
 8009a42:	4629      	mov	r1, r5
 8009a44:	f7f6 fc42 	bl	80002cc <__adddf3>
 8009a48:	4604      	mov	r4, r0
 8009a4a:	460d      	mov	r5, r1
 8009a4c:	e01c      	b.n	8009a88 <scalbn+0x90>
 8009a4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009a52:	460b      	mov	r3, r1
 8009a54:	3a36      	subs	r2, #54	; 0x36
 8009a56:	4432      	add	r2, r6
 8009a58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009a5c:	428a      	cmp	r2, r1
 8009a5e:	dd0b      	ble.n	8009a78 <scalbn+0x80>
 8009a60:	ec45 4b11 	vmov	d1, r4, r5
 8009a64:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009ad0 <scalbn+0xd8>
 8009a68:	f000 f83c 	bl	8009ae4 <copysign>
 8009a6c:	a318      	add	r3, pc, #96	; (adr r3, 8009ad0 <scalbn+0xd8>)
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	ec51 0b10 	vmov	r0, r1, d0
 8009a76:	e7da      	b.n	8009a2e <scalbn+0x36>
 8009a78:	2a00      	cmp	r2, #0
 8009a7a:	dd08      	ble.n	8009a8e <scalbn+0x96>
 8009a7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009a80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009a84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a88:	ec45 4b10 	vmov	d0, r4, r5
 8009a8c:	bd70      	pop	{r4, r5, r6, pc}
 8009a8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009a92:	da0d      	bge.n	8009ab0 <scalbn+0xb8>
 8009a94:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009a98:	429e      	cmp	r6, r3
 8009a9a:	ec45 4b11 	vmov	d1, r4, r5
 8009a9e:	dce1      	bgt.n	8009a64 <scalbn+0x6c>
 8009aa0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009ac8 <scalbn+0xd0>
 8009aa4:	f000 f81e 	bl	8009ae4 <copysign>
 8009aa8:	a307      	add	r3, pc, #28	; (adr r3, 8009ac8 <scalbn+0xd0>)
 8009aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aae:	e7e0      	b.n	8009a72 <scalbn+0x7a>
 8009ab0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009ab4:	3236      	adds	r2, #54	; 0x36
 8009ab6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009aba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4629      	mov	r1, r5
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	4b06      	ldr	r3, [pc, #24]	; (8009ae0 <scalbn+0xe8>)
 8009ac6:	e7b2      	b.n	8009a2e <scalbn+0x36>
 8009ac8:	c2f8f359 	.word	0xc2f8f359
 8009acc:	01a56e1f 	.word	0x01a56e1f
 8009ad0:	8800759c 	.word	0x8800759c
 8009ad4:	7e37e43c 	.word	0x7e37e43c
 8009ad8:	43500000 	.word	0x43500000
 8009adc:	ffff3cb0 	.word	0xffff3cb0
 8009ae0:	3c900000 	.word	0x3c900000

08009ae4 <copysign>:
 8009ae4:	ec51 0b10 	vmov	r0, r1, d0
 8009ae8:	ee11 0a90 	vmov	r0, s3
 8009aec:	ee10 2a10 	vmov	r2, s0
 8009af0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009af4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009af8:	ea41 0300 	orr.w	r3, r1, r0
 8009afc:	ec43 2b10 	vmov	d0, r2, r3
 8009b00:	4770      	bx	lr
	...

08009b04 <_init>:
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	bf00      	nop
 8009b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0a:	bc08      	pop	{r3}
 8009b0c:	469e      	mov	lr, r3
 8009b0e:	4770      	bx	lr

08009b10 <_fini>:
 8009b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b12:	bf00      	nop
 8009b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b16:	bc08      	pop	{r3}
 8009b18:	469e      	mov	lr, r3
 8009b1a:	4770      	bx	lr
